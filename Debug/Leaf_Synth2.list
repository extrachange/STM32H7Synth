
Leaf_Synth2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009094  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050b0  08009330  08009330  0000a330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e3e0  0800e3e0  0000f3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e3e8  0800e3e8  0000f3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e3ec  0800e3ec  0000f3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000020c4  24000000  0800e3f0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001bf4  240020c8  080104b4  000120c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24003cbc  080104b4  00012cbc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000120c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c613  00000000  00000000  000120f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046d5  00000000  00000000  0003e705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 00014e48  00000000  00000000  00042dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000015b8  00000000  00000000  00057c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000280d  00000000  00000000  000591e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b0a3  00000000  00000000  0005b9ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00031a2d  00000000  00000000  00096a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017f34e  00000000  00000000  000c84bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0024780b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004284  00000000  00000000  00247850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000049  00000000  00000000  0024bad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240020c8 	.word	0x240020c8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009314 	.word	0x08009314

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240020cc 	.word	0x240020cc
 80002d4:	08009314 	.word	0x08009314

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SineOsc_tick>:
#endif

#define ONE_8Q16 0x00010000
void SineOsc_tick(SineOsc *osc) {
	osc->output = 0;
    		osc->phase += osc->phaseInc;
 80005c8:	e9d0 2300 	ldrd	r2, r3, [r0]
 80005cc:	4413      	add	r3, r2
    		if (osc->phase >= 0x10000 * TABLE_SIZE) {
 80005ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80005d2:	d303      	bcc.n	80005dc <SineOsc_tick+0x14>
    			osc->phase = osc->phase & 0x001111111;
 80005d4:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 80005d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
    		}
    		int index = osc->phase >> 16;
 80005dc:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = osc->SineLut[index];
 80005de:	68c2      	ldr	r2, [r0, #12]
    		osc->phase += osc->phaseInc;
 80005e0:	6043      	str	r3, [r0, #4]
    		uint32_t sample = osc->SineLut[index];
 80005e2:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80005e6:	6083      	str	r3, [r0, #8]
    		osc->output = sample;
}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SineOsc_init>:
void SineOsc_init(SineOsc *osc, uint16_t *sineTable){
	osc->phase = 0;
	osc->output = 0;
 80005ec:	2300      	movs	r3, #0
	osc->SineLut = sineTable;
	SineOsc_setFreq(osc, 5);
}

void SineOsc_setFreq(SineOsc *osc, float frequency){
	osc->frequency = frequency;
 80005ee:	f8df c014 	ldr.w	ip, [pc, #20]	@ 8000604 <SineOsc_init+0x18>
	osc->phaseInc = 0x10000 * frequency * (float)TABLE_SIZE / (float)SAMPLE_RATE;
 80005f2:	f646 523a 	movw	r2, #27962	@ 0x6d3a
	osc->frequency = frequency;
 80005f6:	f8c0 c010 	str.w	ip, [r0, #16]
	osc->SineLut = sineTable;
 80005fa:	e9c0 3102 	strd	r3, r1, [r0, #8]
	osc->phaseInc = 0x10000 * frequency * (float)TABLE_SIZE / (float)SAMPLE_RATE;
 80005fe:	e9c0 2300 	strd	r2, r3, [r0]
}
 8000602:	4770      	bx	lr
 8000604:	40a00000 	.word	0x40a00000

08000608 <SineOsc_setFreq>:
	osc->phaseInc = 0x10000 * frequency * (float)TABLE_SIZE / (float)SAMPLE_RATE;
 8000608:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8000620 <SineOsc_setFreq+0x18>
	osc->frequency = frequency;
 800060c:	ed80 0a04 	vstr	s0, [r0, #16]
	osc->phaseInc = 0x10000 * frequency * (float)TABLE_SIZE / (float)SAMPLE_RATE;
 8000610:	ee60 7a27 	vmul.f32	s15, s0, s15
 8000614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000618:	edc0 7a00 	vstr	s15, [r0]
}
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	45aec33e 	.word	0x45aec33e
 8000624:	00000000 	.word	0x00000000

08000628 <SineOsc9x_tick>:
//振荡器相位计算为16位定点小数
void SineOsc9x_tick(SineOsc9x *osc) {
	osc->output = 0;
 8000628:	ed9f 7b8f 	vldr	d7, [pc, #572]	@ 8000868 <SineOsc9x_tick+0x240>
    for(int i = 0; i < 9; i++){
    	if(osc->tooHigh[i] == 0){
 800062c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
void SineOsc9x_tick(SineOsc9x *osc) {
 800062e:	b410      	push	{r4}
	osc->output = 0;
 8000630:	ed80 7b14 	vstr	d7, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 8000634:	b9a3      	cbnz	r3, 8000660 <SineOsc9x_tick+0x38>
    		osc->phase[i] += osc->phaseInc[i];
 8000636:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000638:	6802      	ldr	r2, [r0, #0]
 800063a:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 800063c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000640:	f080 810d 	bcs.w	800085e <SineOsc9x_tick+0x236>
    		int nextIndex = index + 1;
    		if (nextIndex >= TABLE_SIZE){
    			nextIndex -= TABLE_SIZE;
    		}
    		uint32_t sample = (0x00010000 - frac) * osc->SineLut[index] + frac * osc->SineLut[nextIndex];    		 */
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000644:	6c81      	ldr	r1, [r0, #72]	@ 0x48
    		int index = osc->phase[i] >> 16;
 8000646:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    		osc->phase[i] += osc->phaseInc[i];
 800064a:	6243      	str	r3, [r0, #36]	@ 0x24
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 800064c:	f831 301c 	ldrh.w	r3, [r1, ip, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000650:	2100      	movs	r1, #0
 8000652:	6d82      	ldr	r2, [r0, #88]	@ 0x58
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000654:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000656:	6541      	str	r1, [r0, #84]	@ 0x54
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	099b      	lsrs	r3, r3, #6
 800065e:	6503      	str	r3, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 8000660:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8000664:	b9bb      	cbnz	r3, 8000696 <SineOsc9x_tick+0x6e>
    		osc->phase[i] += osc->phaseInc[i];
 8000666:	6843      	ldr	r3, [r0, #4]
 8000668:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800066a:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 800066c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000670:	f080 80f0 	bcs.w	8000854 <SineOsc9x_tick+0x22c>
    		int index = osc->phase[i] >> 16;
 8000674:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000676:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 8000678:	6283      	str	r3, [r0, #40]	@ 0x28
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 800067a:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 800067e:	6dc4      	ldr	r4, [r0, #92]	@ 0x5c
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000680:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000682:	fb04 f303 	mul.w	r3, r4, r3
 8000686:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 800068a:	099b      	lsrs	r3, r3, #6
 800068c:	18d2      	adds	r2, r2, r3
 800068e:	f141 0100 	adc.w	r1, r1, #0
 8000692:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 8000696:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800069a:	b9bb      	cbnz	r3, 80006cc <SineOsc9x_tick+0xa4>
    		osc->phase[i] += osc->phaseInc[i];
 800069c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800069e:	6882      	ldr	r2, [r0, #8]
 80006a0:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 80006a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80006a6:	f080 80d0 	bcs.w	800084a <SineOsc9x_tick+0x222>
    		int index = osc->phase[i] >> 16;
 80006aa:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80006ac:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 80006ae:	62c3      	str	r3, [r0, #44]	@ 0x2c
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80006b0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 80006b4:	6e04      	ldr	r4, [r0, #96]	@ 0x60
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80006b6:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 80006b8:	fb04 f303 	mul.w	r3, r4, r3
 80006bc:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 80006c0:	099b      	lsrs	r3, r3, #6
 80006c2:	18d2      	adds	r2, r2, r3
 80006c4:	f141 0100 	adc.w	r1, r1, #0
 80006c8:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 80006cc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80006d0:	b9bb      	cbnz	r3, 8000702 <SineOsc9x_tick+0xda>
    		osc->phase[i] += osc->phaseInc[i];
 80006d2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80006d4:	68c2      	ldr	r2, [r0, #12]
 80006d6:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 80006d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80006dc:	f080 80b0 	bcs.w	8000840 <SineOsc9x_tick+0x218>
    		int index = osc->phase[i] >> 16;
 80006e0:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80006e2:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 80006e4:	6303      	str	r3, [r0, #48]	@ 0x30
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80006e6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 80006ea:	6e44      	ldr	r4, [r0, #100]	@ 0x64
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80006ec:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 80006ee:	fb04 f303 	mul.w	r3, r4, r3
 80006f2:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 80006f6:	099b      	lsrs	r3, r3, #6
 80006f8:	18d2      	adds	r2, r2, r3
 80006fa:	f141 0100 	adc.w	r1, r1, #0
 80006fe:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 8000702:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8000706:	b9bb      	cbnz	r3, 8000738 <SineOsc9x_tick+0x110>
    		osc->phase[i] += osc->phaseInc[i];
 8000708:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800070a:	6902      	ldr	r2, [r0, #16]
 800070c:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 800070e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000712:	f080 8090 	bcs.w	8000836 <SineOsc9x_tick+0x20e>
    		int index = osc->phase[i] >> 16;
 8000716:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000718:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 800071a:	6343      	str	r3, [r0, #52]	@ 0x34
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 800071c:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000720:	6e84      	ldr	r4, [r0, #104]	@ 0x68
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000722:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000724:	fb04 f303 	mul.w	r3, r4, r3
 8000728:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 800072c:	099b      	lsrs	r3, r3, #6
 800072e:	18d2      	adds	r2, r2, r3
 8000730:	f141 0100 	adc.w	r1, r1, #0
 8000734:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 8000738:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 800073c:	b9b3      	cbnz	r3, 800076c <SineOsc9x_tick+0x144>
    		osc->phase[i] += osc->phaseInc[i];
 800073e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000740:	6942      	ldr	r2, [r0, #20]
 8000742:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 8000744:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000748:	d270      	bcs.n	800082c <SineOsc9x_tick+0x204>
    		int index = osc->phase[i] >> 16;
 800074a:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 800074c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 800074e:	6383      	str	r3, [r0, #56]	@ 0x38
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000750:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000754:	6ec4      	ldr	r4, [r0, #108]	@ 0x6c
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000756:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000758:	fb04 f303 	mul.w	r3, r4, r3
 800075c:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 8000760:	099b      	lsrs	r3, r3, #6
 8000762:	18d2      	adds	r2, r2, r3
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 800076c:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8000770:	b9b3      	cbnz	r3, 80007a0 <SineOsc9x_tick+0x178>
    		osc->phase[i] += osc->phaseInc[i];
 8000772:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8000774:	6982      	ldr	r2, [r0, #24]
 8000776:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 8000778:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800077c:	d251      	bcs.n	8000822 <SineOsc9x_tick+0x1fa>
    		int index = osc->phase[i] >> 16;
 800077e:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000780:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 8000782:	63c3      	str	r3, [r0, #60]	@ 0x3c
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 8000784:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 8000788:	6f04      	ldr	r4, [r0, #112]	@ 0x70
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 800078a:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 800078c:	fb04 f303 	mul.w	r3, r4, r3
 8000790:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 8000794:	099b      	lsrs	r3, r3, #6
 8000796:	18d2      	adds	r2, r2, r3
 8000798:	f141 0100 	adc.w	r1, r1, #0
 800079c:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 80007a0:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 80007a4:	b9b3      	cbnz	r3, 80007d4 <SineOsc9x_tick+0x1ac>
    		osc->phase[i] += osc->phaseInc[i];
 80007a6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80007a8:	69c2      	ldr	r2, [r0, #28]
 80007aa:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 80007ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80007b0:	d232      	bcs.n	8000818 <SineOsc9x_tick+0x1f0>
    		int index = osc->phase[i] >> 16;
 80007b2:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80007b4:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 80007b6:	6403      	str	r3, [r0, #64]	@ 0x40
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80007b8:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 80007bc:	6f44      	ldr	r4, [r0, #116]	@ 0x74
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80007be:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 80007c0:	fb04 f303 	mul.w	r3, r4, r3
 80007c4:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 80007c8:	099b      	lsrs	r3, r3, #6
 80007ca:	18d2      	adds	r2, r2, r3
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
    	if(osc->tooHigh[i] == 0){
 80007d4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80007d8:	b9b3      	cbnz	r3, 8000808 <SineOsc9x_tick+0x1e0>
    		osc->phase[i] += osc->phaseInc[i];
 80007da:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80007dc:	6a02      	ldr	r2, [r0, #32]
 80007de:	4413      	add	r3, r2
    		if (osc->phase[i] >= 0x10000 * TABLE_SIZE) {	//相位截断
 80007e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80007e4:	d213      	bcs.n	800080e <SineOsc9x_tick+0x1e6>
    		int index = osc->phase[i] >> 16;
 80007e6:	0c19      	lsrs	r1, r3, #16
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80007e8:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    		osc->phase[i] += osc->phaseInc[i];
 80007ea:	6443      	str	r3, [r0, #68]	@ 0x44
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80007ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    		osc->output += (sample * osc->volume[i]) >> 6;
 80007f0:	6f84      	ldr	r4, [r0, #120]	@ 0x78
    		uint32_t sample = 0x00010000* osc->SineLut[index];
 80007f2:	041b      	lsls	r3, r3, #16
    		osc->output += (sample * osc->volume[i]) >> 6;
 80007f4:	fb04 f303 	mul.w	r3, r4, r3
 80007f8:	e9d0 2114 	ldrd	r2, r1, [r0, #80]	@ 0x50
 80007fc:	099b      	lsrs	r3, r3, #6
 80007fe:	18d2      	adds	r2, r2, r3
 8000800:	f141 0100 	adc.w	r1, r1, #0
 8000804:	e9c0 2114 	strd	r2, r1, [r0, #80]	@ 0x50
        }
    }
}
 8000808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800080c:	4770      	bx	lr
    			osc->phase[i] = osc->phase[i] & 0x001111111;
 800080e:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8000812:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000816:	e7e6      	b.n	80007e6 <SineOsc9x_tick+0x1be>
 8000818:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 800081c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000820:	e7c7      	b.n	80007b2 <SineOsc9x_tick+0x18a>
 8000822:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8000826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800082a:	e7a8      	b.n	800077e <SineOsc9x_tick+0x156>
 800082c:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8000830:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000834:	e789      	b.n	800074a <SineOsc9x_tick+0x122>
 8000836:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 800083a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800083e:	e76a      	b.n	8000716 <SineOsc9x_tick+0xee>
 8000840:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8000844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000848:	e74a      	b.n	80006e0 <SineOsc9x_tick+0xb8>
 800084a:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 800084e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000852:	e72a      	b.n	80006aa <SineOsc9x_tick+0x82>
 8000854:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8000858:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800085c:	e70a      	b.n	8000674 <SineOsc9x_tick+0x4c>
 800085e:	f003 3311 	and.w	r3, r3, #286331153	@ 0x11111111
 8000862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000866:	e6ed      	b.n	8000644 <SineOsc9x_tick+0x1c>
	...

08000870 <SineOsc9x_init>:

void SineOsc9x_init(SineOsc9x *osc, uint16_t *sineTable){
 8000870:	b570      	push	{r4, r5, r6, lr}
	for(int i = 0; i < 9; i++){
		osc->phase[i] = 0;
 8000872:	2624      	movs	r6, #36	@ 0x24
void SineOsc9x_init(SineOsc9x *osc, uint16_t *sineTable){
 8000874:	4604      	mov	r4, r0
 8000876:	460d      	mov	r5, r1
		osc->phase[i] = 0;
 8000878:	2100      	movs	r1, #0
 800087a:	4632      	mov	r2, r6
 800087c:	4430      	add	r0, r6
 800087e:	f008 fb4f 	bl	8008f20 <memset>
		SineOsc9x_setFreq(osc, 440);
		osc->output = 0;
		osc->volume[i] = 0;
 8000882:	4632      	mov	r2, r6
 8000884:	2100      	movs	r1, #0
 8000886:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 800088a:	f008 fb49 	bl	8008f20 <memset>
}

void SineOsc9x_setVol(SineOsc9x *osc, volatile uint8_t params[]){
	int total = 0;
	for(int i = 0; i < 9; i++){
		osc->volume[i] = params[i];
 800088e:	4b3a      	ldr	r3, [pc, #232]	@ (8000978 <SineOsc9x_init+0x108>)
 8000890:	4a3a      	ldr	r2, [pc, #232]	@ (800097c <SineOsc9x_init+0x10c>)
		total += params[i];
	}
	total--;
	//osc->vol_scale = (uint16_t)(sqrt(0.4f*total));
	osc->vol_scale = (uint16_t)(0xFFFF * (float)(13 - (uint16_t)(sqrt(total))/13.0f));
 8000892:	eef2 7a0a 	vmov.f32	s15, #42	@ 0x41500000  13.0
 8000896:	64a5      	str	r5, [r4, #72]	@ 0x48
		osc->volume[i] = params[i];
 8000898:	f8c4 20a0 	str.w	r2, [r4, #160]	@ 0xa0
	osc->vol_scale = (uint16_t)(0xFFFF * (float)(13 - (uint16_t)(sqrt(total))/13.0f));
 800089c:	ed9f 4a38 	vldr	s8, [pc, #224]	@ 8000980 <SineOsc9x_init+0x110>
 80008a0:	eddf 4a38 	vldr	s9, [pc, #224]	@ 8000984 <SineOsc9x_init+0x114>
 80008a4:	a12c      	add	r1, pc, #176	@ (adr r1, 8000958 <SineOsc9x_init+0xe8>)
 80008a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80008aa:	e9c4 0100 	strd	r0, r1, [r4]
		osc->volume[i] = params[i];
 80008ae:	781d      	ldrb	r5, [r3, #0]
		total += params[i];
 80008b0:	7819      	ldrb	r1, [r3, #0]
		osc->volume[i] = params[i];
 80008b2:	785a      	ldrb	r2, [r3, #1]
 80008b4:	4834      	ldr	r0, [pc, #208]	@ (8000988 <SineOsc9x_init+0x118>)
 80008b6:	65e2      	str	r2, [r4, #92]	@ 0x5c
		total += params[i];
 80008b8:	785a      	ldrb	r2, [r3, #1]
 80008ba:	6220      	str	r0, [r4, #32]
 80008bc:	440a      	add	r2, r1
		osc->volume[i] = params[i];
 80008be:	7898      	ldrb	r0, [r3, #2]
		total += params[i];
 80008c0:	7899      	ldrb	r1, [r3, #2]
		osc->volume[i] = params[i];
 80008c2:	6620      	str	r0, [r4, #96]	@ 0x60
		total += params[i];
 80008c4:	4411      	add	r1, r2
		osc->volume[i] = params[i];
 80008c6:	78d8      	ldrb	r0, [r3, #3]
		total += params[i];
 80008c8:	78da      	ldrb	r2, [r3, #3]
		osc->volume[i] = params[i];
 80008ca:	6660      	str	r0, [r4, #100]	@ 0x64
		total += params[i];
 80008cc:	440a      	add	r2, r1
		osc->volume[i] = params[i];
 80008ce:	7918      	ldrb	r0, [r3, #4]
		total += params[i];
 80008d0:	7919      	ldrb	r1, [r3, #4]
		osc->volume[i] = params[i];
 80008d2:	66a0      	str	r0, [r4, #104]	@ 0x68
		total += params[i];
 80008d4:	4411      	add	r1, r2
		osc->volume[i] = params[i];
 80008d6:	7958      	ldrb	r0, [r3, #5]
		total += params[i];
 80008d8:	795a      	ldrb	r2, [r3, #5]
		osc->volume[i] = params[i];
 80008da:	66e0      	str	r0, [r4, #108]	@ 0x6c
		total += params[i];
 80008dc:	440a      	add	r2, r1
		osc->volume[i] = params[i];
 80008de:	7998      	ldrb	r0, [r3, #6]
		total += params[i];
 80008e0:	7999      	ldrb	r1, [r3, #6]
		osc->volume[i] = params[i];
 80008e2:	6720      	str	r0, [r4, #112]	@ 0x70
		total += params[i];
 80008e4:	4411      	add	r1, r2
		osc->volume[i] = params[i];
 80008e6:	79d8      	ldrb	r0, [r3, #7]
		total += params[i];
 80008e8:	79da      	ldrb	r2, [r3, #7]
		osc->volume[i] = params[i];
 80008ea:	6760      	str	r0, [r4, #116]	@ 0x74
		total += params[i];
 80008ec:	440a      	add	r2, r1
		osc->volume[i] = params[i];
 80008ee:	65a5      	str	r5, [r4, #88]	@ 0x58
 80008f0:	a11b      	add	r1, pc, #108	@ (adr r1, 8000960 <SineOsc9x_init+0xf0>)
 80008f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80008f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80008fa:	a11b      	add	r1, pc, #108	@ (adr r1, 8000968 <SineOsc9x_init+0xf8>)
 80008fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000900:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8000904:	a11a      	add	r1, pc, #104	@ (adr r1, 8000970 <SineOsc9x_init+0x100>)
 8000906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800090a:	e9c4 0106 	strd	r0, r1, [r4, #24]
 800090e:	2100      	movs	r1, #0
 8000910:	2000      	movs	r0, #0
 8000912:	e9c4 0114 	strd	r0, r1, [r4, #80]	@ 0x50
 8000916:	7a19      	ldrb	r1, [r3, #8]
		total += params[i];
 8000918:	7a1b      	ldrb	r3, [r3, #8]
		osc->volume[i] = params[i];
 800091a:	67a1      	str	r1, [r4, #120]	@ 0x78
		total += params[i];
 800091c:	4413      	add	r3, r2
	total--;
 800091e:	3b01      	subs	r3, #1
	osc->vol_scale = (uint16_t)(0xFFFF * (float)(13 - (uint16_t)(sqrt(total))/13.0f));
 8000920:	ee07 3a10 	vmov	s14, r3
 8000924:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8000928:	eeb1 6bc5 	vsqrt.f64	d6, d5
 800092c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000930:	ee16 3a10 	vmov	r3, s12
 8000934:	b29b      	uxth	r3, r3
 8000936:	ee06 3a10 	vmov	s12, r3
 800093a:	eeb8 7ac6 	vcvt.f32.s32	s14, s12
 800093e:	eee7 7a44 	vfms.f32	s15, s14, s8
 8000942:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8000946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094a:	ee17 3a90 	vmov	r3, s15
 800094e:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
}
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f3af 8000 	nop.w
 8000958:	00258bf2 	.word	0x00258bf2
 800095c:	004b17e4 	.word	0x004b17e4
 8000960:	0070a3d6 	.word	0x0070a3d6
 8000964:	00962fc8 	.word	0x00962fc8
 8000968:	00e147ac 	.word	0x00e147ac
 800096c:	012c5f90 	.word	0x012c5f90
 8000970:	01777774 	.word	0x01777774
 8000974:	01c28f58 	.word	0x01c28f58
 8000978:	24002054 	.word	0x24002054
 800097c:	43dc0000 	.word	0x43dc0000
 8000980:	3d9d89d9 	.word	0x3d9d89d9
 8000984:	477fff00 	.word	0x477fff00
 8000988:	0258bf20 	.word	0x0258bf20

0800098c <SineOsc9x_setFreq>:
	osc->phaseInc[0] = 0x10000 * frequency * (float)TABLE_SIZE / (float)SAMPLE_RATE;
 800098c:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8000a4c <SineOsc9x_setFreq+0xc0>
	osc->frequency = frequency;
 8000990:	ed80 0a28 	vstr	s0, [r0, #160]	@ 0xa0
	osc->phaseInc[0] = 0x10000 * frequency * (float)TABLE_SIZE / (float)SAMPLE_RATE;
 8000994:	ee60 7a27 	vmul.f32	s15, s0, s15
void SineOsc9x_setFreq(SineOsc9x *osc, float frequency){
 8000998:	b410      	push	{r4}
	osc->phaseInc[0] = 0x10000 * frequency * (float)TABLE_SIZE / (float)SAMPLE_RATE;
 800099a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800099e:	ee17 3a90 	vmov	r3, s15
 80009a2:	edc0 7a00 	vstr	s15, [r0]
	osc->phaseInc[1] = 2 * osc->phaseInc[0];
 80009a6:	005c      	lsls	r4, r3, #1
	osc->phaseInc[3] = 4 * osc->phaseInc[0];
 80009a8:	009a      	lsls	r2, r3, #2
	osc->phaseInc[2] = 3 * osc->phaseInc[0];
 80009aa:	18e1      	adds	r1, r4, r3
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 80009ac:	f1b4 6f00 	cmp.w	r4, #134217728	@ 0x8000000
	osc->phaseInc[1] = 2 * osc->phaseInc[0];
 80009b0:	6044      	str	r4, [r0, #4]
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 80009b2:	bf94      	ite	ls
 80009b4:	2400      	movls	r4, #0
 80009b6:	2401      	movhi	r4, #1
 80009b8:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 80009bc:	f8c0 4080 	str.w	r4, [r0, #128]	@ 0x80
 80009c0:	bf94      	ite	ls
 80009c2:	2400      	movls	r4, #0
 80009c4:	2401      	movhi	r4, #1
 80009c6:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
 80009ca:	f8c0 4084 	str.w	r4, [r0, #132]	@ 0x84
 80009ce:	bf94      	ite	ls
 80009d0:	2400      	movls	r4, #0
 80009d2:	2401      	movhi	r4, #1
	osc->phaseInc[3] = 4 * osc->phaseInc[0];
 80009d4:	e9c0 1202 	strd	r1, r2, [r0, #8]
	osc->phaseInc[6] = 10 * osc->phaseInc[0];
 80009d8:	441a      	add	r2, r3
 80009da:	f8c0 4088 	str.w	r4, [r0, #136]	@ 0x88
	osc->phaseInc[5] = 8 * osc->phaseInc[0];
 80009de:	00dc      	lsls	r4, r3, #3
	osc->phaseInc[6] = 10 * osc->phaseInc[0];
 80009e0:	0052      	lsls	r2, r2, #1
	osc->phaseInc[5] = 8 * osc->phaseInc[0];
 80009e2:	6144      	str	r4, [r0, #20]
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 80009e4:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
	osc->phaseInc[6] = 10 * osc->phaseInc[0];
 80009e8:	6182      	str	r2, [r0, #24]
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 80009ea:	bf94      	ite	ls
 80009ec:	2200      	movls	r2, #0
 80009ee:	2201      	movhi	r2, #1
 80009f0:	f8c0 2094 	str.w	r2, [r0, #148]	@ 0x94
	osc->phaseInc[4] = 6 * osc->phaseInc[0];
 80009f4:	004a      	lsls	r2, r1, #1
	osc->phaseInc[7] = 12 * osc->phaseInc[0];
 80009f6:	0089      	lsls	r1, r1, #2
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 80009f8:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
	osc->phaseInc[4] = 6 * osc->phaseInc[0];
 80009fc:	6102      	str	r2, [r0, #16]
	osc->phaseInc[7] = 12 * osc->phaseInc[0];
 80009fe:	61c1      	str	r1, [r0, #28]
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 8000a00:	bf94      	ite	ls
 8000a02:	2200      	movls	r2, #0
 8000a04:	2201      	movhi	r2, #1
 8000a06:	f1b4 6f00 	cmp.w	r4, #134217728	@ 0x8000000
 8000a0a:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c
 8000a0e:	bf94      	ite	ls
 8000a10:	2200      	movls	r2, #0
 8000a12:	2201      	movhi	r2, #1
 8000a14:	f1b1 6f00 	cmp.w	r1, #134217728	@ 0x8000000
 8000a18:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
	osc->phaseInc[8] = 16 * osc->phaseInc[0];
 8000a1c:	ea4f 1203 	mov.w	r2, r3, lsl #4
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 8000a20:	bf94      	ite	ls
 8000a22:	2400      	movls	r4, #0
 8000a24:	2401      	movhi	r4, #1
 8000a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
	osc->phaseInc[8] = 16 * osc->phaseInc[0];
 8000a2a:	6202      	str	r2, [r0, #32]
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 8000a2c:	f8c0 4098 	str.w	r4, [r0, #152]	@ 0x98
 8000a30:	bf94      	ite	ls
 8000a32:	2300      	movls	r3, #0
 8000a34:	2301      	movhi	r3, #1
 8000a36:	f1b2 6f00 	cmp.w	r2, #134217728	@ 0x8000000
}
 8000a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a3e:	67c3      	str	r3, [r0, #124]	@ 0x7c
		if(osc->phaseInc[i] > 0x10000 * 0.5 * (float)TABLE_SIZE){
 8000a40:	bf94      	ite	ls
 8000a42:	2100      	movls	r1, #0
 8000a44:	2101      	movhi	r1, #1
 8000a46:	f8c0 109c 	str.w	r1, [r0, #156]	@ 0x9c
}
 8000a4a:	4770      	bx	lr
 8000a4c:	45aec33e 	.word	0x45aec33e

08000a50 <SineOsc9x_setVol>:
		osc->volume[i] = params[i];
 8000a50:	780b      	ldrb	r3, [r1, #0]
	osc->vol_scale = (uint16_t)(0xFFFF * (float)(13 - (uint16_t)(sqrt(total))/13.0f));
 8000a52:	eef2 7a0a 	vmov.f32	s15, #42	@ 0x41500000  13.0
 8000a56:	eddf 4a22 	vldr	s9, [pc, #136]	@ 8000ae0 <SineOsc9x_setVol+0x90>
		osc->volume[i] = params[i];
 8000a5a:	6583      	str	r3, [r0, #88]	@ 0x58
		total += params[i];
 8000a5c:	780a      	ldrb	r2, [r1, #0]
		osc->volume[i] = params[i];
 8000a5e:	784b      	ldrb	r3, [r1, #1]
	osc->vol_scale = (uint16_t)(0xFFFF * (float)(13 - (uint16_t)(sqrt(total))/13.0f));
 8000a60:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8000ae4 <SineOsc9x_setVol+0x94>
		osc->volume[i] = params[i];
 8000a64:	65c3      	str	r3, [r0, #92]	@ 0x5c
void SineOsc9x_setVol(SineOsc9x *osc, volatile uint8_t params[]){
 8000a66:	b410      	push	{r4}
		total += params[i];
 8000a68:	784c      	ldrb	r4, [r1, #1]
		osc->volume[i] = params[i];
 8000a6a:	788b      	ldrb	r3, [r1, #2]
		total += params[i];
 8000a6c:	4422      	add	r2, r4
		osc->volume[i] = params[i];
 8000a6e:	6603      	str	r3, [r0, #96]	@ 0x60
		total += params[i];
 8000a70:	788b      	ldrb	r3, [r1, #2]
		osc->volume[i] = params[i];
 8000a72:	78cc      	ldrb	r4, [r1, #3]
		total += params[i];
 8000a74:	4413      	add	r3, r2
		osc->volume[i] = params[i];
 8000a76:	6644      	str	r4, [r0, #100]	@ 0x64
		total += params[i];
 8000a78:	78ca      	ldrb	r2, [r1, #3]
		osc->volume[i] = params[i];
 8000a7a:	790c      	ldrb	r4, [r1, #4]
		total += params[i];
 8000a7c:	441a      	add	r2, r3
		osc->volume[i] = params[i];
 8000a7e:	6684      	str	r4, [r0, #104]	@ 0x68
		total += params[i];
 8000a80:	790b      	ldrb	r3, [r1, #4]
		osc->volume[i] = params[i];
 8000a82:	794c      	ldrb	r4, [r1, #5]
		total += params[i];
 8000a84:	4413      	add	r3, r2
		osc->volume[i] = params[i];
 8000a86:	66c4      	str	r4, [r0, #108]	@ 0x6c
		total += params[i];
 8000a88:	794a      	ldrb	r2, [r1, #5]
		osc->volume[i] = params[i];
 8000a8a:	798c      	ldrb	r4, [r1, #6]
		total += params[i];
 8000a8c:	441a      	add	r2, r3
		osc->volume[i] = params[i];
 8000a8e:	6704      	str	r4, [r0, #112]	@ 0x70
		total += params[i];
 8000a90:	798b      	ldrb	r3, [r1, #6]
		osc->volume[i] = params[i];
 8000a92:	79cc      	ldrb	r4, [r1, #7]
		total += params[i];
 8000a94:	4413      	add	r3, r2
		osc->volume[i] = params[i];
 8000a96:	6744      	str	r4, [r0, #116]	@ 0x74
		total += params[i];
 8000a98:	79ca      	ldrb	r2, [r1, #7]
		osc->volume[i] = params[i];
 8000a9a:	7a0c      	ldrb	r4, [r1, #8]
		total += params[i];
 8000a9c:	441a      	add	r2, r3
		osc->volume[i] = params[i];
 8000a9e:	6784      	str	r4, [r0, #120]	@ 0x78
		total += params[i];
 8000aa0:	7a0b      	ldrb	r3, [r1, #8]
}
 8000aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
		total += params[i];
 8000aa6:	4413      	add	r3, r2
	total--;
 8000aa8:	3b01      	subs	r3, #1
	osc->vol_scale = (uint16_t)(0xFFFF * (float)(13 - (uint16_t)(sqrt(total))/13.0f));
 8000aaa:	ee06 3a90 	vmov	s13, r3
 8000aae:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8000ab2:	eeb1 6bc5 	vsqrt.f64	d6, d5
 8000ab6:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000aba:	ee16 3a10 	vmov	r3, s12
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	ee06 3a10 	vmov	s12, r3
 8000ac4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8000ac8:	eee6 7a64 	vfms.f32	s15, s12, s9
 8000acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad4:	ee17 3a90 	vmov	r3, s15
 8000ad8:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	3d9d89d9 	.word	0x3d9d89d9
 8000ae4:	477fff00 	.word	0x477fff00

08000ae8 <Envelope_tick>:

void Envelope_tick(Envelope env[], volatile voice voicePool[]) {
	for(int i = 0; i < VOICE_COUNT; i++){
		if(voicePool[i].on == 0){
 8000ae8:	784b      	ldrb	r3, [r1, #1]
		}
		if(voicePool[i].on){
 8000aea:	784a      	ldrb	r2, [r1, #1]
			if(env[i].value < 0xffff - env[i].attack){
 8000aec:	8883      	ldrh	r3, [r0, #4]
void Envelope_tick(Envelope env[], volatile voice voicePool[]) {
 8000aee:	b500      	push	{lr}
		if(voicePool[i].on){
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	f000 8081 	beq.w	8000bf8 <Envelope_tick+0x110>
			if(env[i].value < 0xffff - env[i].attack){
 8000af6:	8802      	ldrh	r2, [r0, #0]
 8000af8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8000afc:	ebac 0e02 	sub.w	lr, ip, r2
 8000b00:	459e      	cmp	lr, r3
 8000b02:	f340 8089 	ble.w	8000c18 <Envelope_tick+0x130>
				env[i].value += env[i].attack;
 8000b06:	4413      	add	r3, r2
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	8083      	strh	r3, [r0, #4]
				env[i].value -= env[i].release;
			}else{
				env[i].value = 0;
			}
		}
		if(env[i].value > 0){
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f040 8085 	bne.w	8000c1c <Envelope_tick+0x134>
			voicePool[i].notOver = 1;
		} else {
			voicePool[i].notOver = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	70cb      	strb	r3, [r1, #3]
		if(voicePool[i].on == 0){
 8000b16:	794b      	ldrb	r3, [r1, #5]
		if(voicePool[i].on){
 8000b18:	794a      	ldrb	r2, [r1, #5]
			if(env[i].value < 0xffff - env[i].attack){
 8000b1a:	8943      	ldrh	r3, [r0, #10]
		if(voicePool[i].on){
 8000b1c:	2a00      	cmp	r2, #0
 8000b1e:	f000 8085 	beq.w	8000c2c <Envelope_tick+0x144>
			if(env[i].value < 0xffff - env[i].attack){
 8000b22:	88c2      	ldrh	r2, [r0, #6]
 8000b24:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8000b28:	ebac 0e02 	sub.w	lr, ip, r2
 8000b2c:	4573      	cmp	r3, lr
 8000b2e:	f280 808c 	bge.w	8000c4a <Envelope_tick+0x162>
				env[i].value += env[i].attack;
 8000b32:	4413      	add	r3, r2
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	8143      	strh	r3, [r0, #10]
		if(env[i].value > 0){
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	f040 8088 	bne.w	8000c4e <Envelope_tick+0x166>
			voicePool[i].notOver = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71cb      	strb	r3, [r1, #7]
		if(voicePool[i].on == 0){
 8000b42:	7a4b      	ldrb	r3, [r1, #9]
		if(voicePool[i].on){
 8000b44:	7a4a      	ldrb	r2, [r1, #9]
			if(env[i].value < 0xffff - env[i].attack){
 8000b46:	8a03      	ldrh	r3, [r0, #16]
		if(voicePool[i].on){
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f000 8088 	beq.w	8000c5e <Envelope_tick+0x176>
			if(env[i].value < 0xffff - env[i].attack){
 8000b4e:	8982      	ldrh	r2, [r0, #12]
 8000b50:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8000b54:	ebac 0e02 	sub.w	lr, ip, r2
 8000b58:	4573      	cmp	r3, lr
 8000b5a:	f280 8090 	bge.w	8000c7e <Envelope_tick+0x196>
				env[i].value += env[i].attack;
 8000b5e:	4413      	add	r3, r2
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	8203      	strh	r3, [r0, #16]
		if(env[i].value > 0){
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f040 808c 	bne.w	8000c82 <Envelope_tick+0x19a>
			voicePool[i].notOver = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	72cb      	strb	r3, [r1, #11]
		if(voicePool[i].on == 0){
 8000b6e:	7b4b      	ldrb	r3, [r1, #13]
		if(voicePool[i].on){
 8000b70:	7b4a      	ldrb	r2, [r1, #13]
			if(env[i].value < 0xffff - env[i].attack){
 8000b72:	8ac3      	ldrh	r3, [r0, #22]
		if(voicePool[i].on){
 8000b74:	2a00      	cmp	r2, #0
 8000b76:	f000 808c 	beq.w	8000c92 <Envelope_tick+0x1aa>
			if(env[i].value < 0xffff - env[i].attack){
 8000b7a:	8a42      	ldrh	r2, [r0, #18]
 8000b7c:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8000b80:	ebac 0e02 	sub.w	lr, ip, r2
 8000b84:	4573      	cmp	r3, lr
 8000b86:	f280 8094 	bge.w	8000cb2 <Envelope_tick+0x1ca>
				env[i].value += env[i].attack;
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	82c3      	strh	r3, [r0, #22]
		if(env[i].value > 0){
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	f040 8090 	bne.w	8000cb6 <Envelope_tick+0x1ce>
			voicePool[i].notOver = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73cb      	strb	r3, [r1, #15]
		if(voicePool[i].on == 0){
 8000b9a:	7c4b      	ldrb	r3, [r1, #17]
		if(voicePool[i].on){
 8000b9c:	7c4a      	ldrb	r2, [r1, #17]
			if(env[i].value < 0xffff - env[i].attack){
 8000b9e:	8b83      	ldrh	r3, [r0, #28]
		if(voicePool[i].on){
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <Envelope_tick+0x1de>
			if(env[i].value < 0xffff - env[i].attack){
 8000ba6:	8b02      	ldrh	r2, [r0, #24]
 8000ba8:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8000bac:	ebac 0e02 	sub.w	lr, ip, r2
 8000bb0:	4573      	cmp	r3, lr
 8000bb2:	f280 8098 	bge.w	8000ce6 <Envelope_tick+0x1fe>
				env[i].value += env[i].attack;
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	8383      	strh	r3, [r0, #28]
		if(env[i].value > 0){
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 8094 	bne.w	8000cea <Envelope_tick+0x202>
			voicePool[i].notOver = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	74cb      	strb	r3, [r1, #19]
		if(voicePool[i].on == 0){
 8000bc6:	7d4b      	ldrb	r3, [r1, #21]
		if(voicePool[i].on){
 8000bc8:	7d4a      	ldrb	r2, [r1, #21]
			if(env[i].value < 0xffff - env[i].attack){
 8000bca:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
		if(voicePool[i].on){
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f000 8094 	beq.w	8000cfa <Envelope_tick+0x212>
			if(env[i].value < 0xffff - env[i].attack){
 8000bd2:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 8000bd6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bda:	eba2 0e0c 	sub.w	lr, r2, ip
 8000bde:	4573      	cmp	r3, lr
 8000be0:	f280 809b 	bge.w	8000d1a <Envelope_tick+0x232>
				env[i].value += env[i].attack;
 8000be4:	4463      	add	r3, ip
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	8443      	strh	r3, [r0, #34]	@ 0x22
		if(env[i].value > 0){
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f040 8096 	bne.w	8000d1c <Envelope_tick+0x234>
			voicePool[i].notOver = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	75cb      	strb	r3, [r1, #23]
		}
	}
}
 8000bf4:	f85d fb04 	ldr.w	pc, [sp], #4
		} else if(voicePool[i].on == 0){
 8000bf8:	784a      	ldrb	r2, [r1, #1]
 8000bfa:	f002 0cff 	and.w	ip, r2, #255	@ 0xff
 8000bfe:	2a00      	cmp	r2, #0
 8000c00:	d184      	bne.n	8000b0c <Envelope_tick+0x24>
			if(env[i].value >= env[i].release){
 8000c02:	8842      	ldrh	r2, [r0, #2]
 8000c04:	4293      	cmp	r3, r2
 8000c06:	f0c0 808d 	bcc.w	8000d24 <Envelope_tick+0x23c>
				env[i].value -= env[i].release;
 8000c0a:	1a9b      	subs	r3, r3, r2
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	8083      	strh	r3, [r0, #4]
		if(env[i].value > 0){
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f43f af7e 	beq.w	8000b12 <Envelope_tick+0x2a>
 8000c16:	e001      	b.n	8000c1c <Envelope_tick+0x134>
				env[i].value = 0xffff;
 8000c18:	f8a0 c004 	strh.w	ip, [r0, #4]
			voicePool[i].notOver = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	70cb      	strb	r3, [r1, #3]
		if(voicePool[i].on == 0){
 8000c20:	794b      	ldrb	r3, [r1, #5]
		if(voicePool[i].on){
 8000c22:	794a      	ldrb	r2, [r1, #5]
			if(env[i].value < 0xffff - env[i].attack){
 8000c24:	8943      	ldrh	r3, [r0, #10]
		if(voicePool[i].on){
 8000c26:	2a00      	cmp	r2, #0
 8000c28:	f47f af7b 	bne.w	8000b22 <Envelope_tick+0x3a>
		} else if(voicePool[i].on == 0){
 8000c2c:	794a      	ldrb	r2, [r1, #5]
 8000c2e:	f002 0cff 	and.w	ip, r2, #255	@ 0xff
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d180      	bne.n	8000b38 <Envelope_tick+0x50>
			if(env[i].value >= env[i].release){
 8000c36:	8902      	ldrh	r2, [r0, #8]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d376      	bcc.n	8000d2a <Envelope_tick+0x242>
				env[i].value -= env[i].release;
 8000c3c:	1a9b      	subs	r3, r3, r2
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	8143      	strh	r3, [r0, #10]
		if(env[i].value > 0){
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f43f af7b 	beq.w	8000b3e <Envelope_tick+0x56>
 8000c48:	e001      	b.n	8000c4e <Envelope_tick+0x166>
				env[i].value = 0xffff;
 8000c4a:	f8a0 c00a 	strh.w	ip, [r0, #10]
			voicePool[i].notOver = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	71cb      	strb	r3, [r1, #7]
		if(voicePool[i].on == 0){
 8000c52:	7a4b      	ldrb	r3, [r1, #9]
		if(voicePool[i].on){
 8000c54:	7a4a      	ldrb	r2, [r1, #9]
			if(env[i].value < 0xffff - env[i].attack){
 8000c56:	8a03      	ldrh	r3, [r0, #16]
		if(voicePool[i].on){
 8000c58:	2a00      	cmp	r2, #0
 8000c5a:	f47f af78 	bne.w	8000b4e <Envelope_tick+0x66>
		} else if(voicePool[i].on == 0){
 8000c5e:	7a4a      	ldrb	r2, [r1, #9]
 8000c60:	f002 0cff 	and.w	ip, r2, #255	@ 0xff
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f47f af7d 	bne.w	8000b64 <Envelope_tick+0x7c>
			if(env[i].value >= env[i].release){
 8000c6a:	89c2      	ldrh	r2, [r0, #14]
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d35f      	bcc.n	8000d30 <Envelope_tick+0x248>
				env[i].value -= env[i].release;
 8000c70:	1a9b      	subs	r3, r3, r2
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	8203      	strh	r3, [r0, #16]
		if(env[i].value > 0){
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f43f af77 	beq.w	8000b6a <Envelope_tick+0x82>
 8000c7c:	e001      	b.n	8000c82 <Envelope_tick+0x19a>
				env[i].value = 0xffff;
 8000c7e:	f8a0 c010 	strh.w	ip, [r0, #16]
			voicePool[i].notOver = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	72cb      	strb	r3, [r1, #11]
		if(voicePool[i].on == 0){
 8000c86:	7b4b      	ldrb	r3, [r1, #13]
		if(voicePool[i].on){
 8000c88:	7b4a      	ldrb	r2, [r1, #13]
			if(env[i].value < 0xffff - env[i].attack){
 8000c8a:	8ac3      	ldrh	r3, [r0, #22]
		if(voicePool[i].on){
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	f47f af74 	bne.w	8000b7a <Envelope_tick+0x92>
		} else if(voicePool[i].on == 0){
 8000c92:	7b4a      	ldrb	r2, [r1, #13]
 8000c94:	f002 0cff 	and.w	ip, r2, #255	@ 0xff
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f47f af79 	bne.w	8000b90 <Envelope_tick+0xa8>
			if(env[i].value >= env[i].release){
 8000c9e:	8a82      	ldrh	r2, [r0, #20]
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d348      	bcc.n	8000d36 <Envelope_tick+0x24e>
				env[i].value -= env[i].release;
 8000ca4:	1a9b      	subs	r3, r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	82c3      	strh	r3, [r0, #22]
		if(env[i].value > 0){
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f43f af73 	beq.w	8000b96 <Envelope_tick+0xae>
 8000cb0:	e001      	b.n	8000cb6 <Envelope_tick+0x1ce>
				env[i].value = 0xffff;
 8000cb2:	f8a0 c016 	strh.w	ip, [r0, #22]
			voicePool[i].notOver = 1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73cb      	strb	r3, [r1, #15]
		if(voicePool[i].on == 0){
 8000cba:	7c4b      	ldrb	r3, [r1, #17]
		if(voicePool[i].on){
 8000cbc:	7c4a      	ldrb	r2, [r1, #17]
			if(env[i].value < 0xffff - env[i].attack){
 8000cbe:	8b83      	ldrh	r3, [r0, #28]
		if(voicePool[i].on){
 8000cc0:	2a00      	cmp	r2, #0
 8000cc2:	f47f af70 	bne.w	8000ba6 <Envelope_tick+0xbe>
		} else if(voicePool[i].on == 0){
 8000cc6:	7c4a      	ldrb	r2, [r1, #17]
 8000cc8:	f002 0cff 	and.w	ip, r2, #255	@ 0xff
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f47f af75 	bne.w	8000bbc <Envelope_tick+0xd4>
			if(env[i].value >= env[i].release){
 8000cd2:	8b42      	ldrh	r2, [r0, #26]
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d331      	bcc.n	8000d3c <Envelope_tick+0x254>
				env[i].value -= env[i].release;
 8000cd8:	1a9b      	subs	r3, r3, r2
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	8383      	strh	r3, [r0, #28]
		if(env[i].value > 0){
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f43f af6f 	beq.w	8000bc2 <Envelope_tick+0xda>
 8000ce4:	e001      	b.n	8000cea <Envelope_tick+0x202>
				env[i].value = 0xffff;
 8000ce6:	f8a0 c01c 	strh.w	ip, [r0, #28]
			voicePool[i].notOver = 1;
 8000cea:	2301      	movs	r3, #1
 8000cec:	74cb      	strb	r3, [r1, #19]
		if(voicePool[i].on == 0){
 8000cee:	7d4b      	ldrb	r3, [r1, #21]
		if(voicePool[i].on){
 8000cf0:	7d4a      	ldrb	r2, [r1, #21]
			if(env[i].value < 0xffff - env[i].attack){
 8000cf2:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
		if(voicePool[i].on){
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f47f af6c 	bne.w	8000bd2 <Envelope_tick+0xea>
		} else if(voicePool[i].on == 0){
 8000cfa:	7d4a      	ldrb	r2, [r1, #21]
 8000cfc:	f002 0cff 	and.w	ip, r2, #255	@ 0xff
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f47f af72 	bne.w	8000bea <Envelope_tick+0x102>
			if(env[i].value >= env[i].release){
 8000d06:	8c02      	ldrh	r2, [r0, #32]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d81a      	bhi.n	8000d42 <Envelope_tick+0x25a>
				env[i].value -= env[i].release;
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	8443      	strh	r3, [r0, #34]	@ 0x22
		if(env[i].value > 0){
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f43f af6c 	beq.w	8000bf0 <Envelope_tick+0x108>
 8000d18:	e000      	b.n	8000d1c <Envelope_tick+0x234>
				env[i].value = 0xffff;
 8000d1a:	8442      	strh	r2, [r0, #34]	@ 0x22
			voicePool[i].notOver = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	75cb      	strb	r3, [r1, #23]
}
 8000d20:	f85d fb04 	ldr.w	pc, [sp], #4
				env[i].value = 0;
 8000d24:	f8a0 c004 	strh.w	ip, [r0, #4]
		if(env[i].value > 0){
 8000d28:	e6f3      	b.n	8000b12 <Envelope_tick+0x2a>
				env[i].value = 0;
 8000d2a:	f8a0 c00a 	strh.w	ip, [r0, #10]
		if(env[i].value > 0){
 8000d2e:	e706      	b.n	8000b3e <Envelope_tick+0x56>
				env[i].value = 0;
 8000d30:	f8a0 c010 	strh.w	ip, [r0, #16]
		if(env[i].value > 0){
 8000d34:	e719      	b.n	8000b6a <Envelope_tick+0x82>
				env[i].value = 0;
 8000d36:	f8a0 c016 	strh.w	ip, [r0, #22]
		if(env[i].value > 0){
 8000d3a:	e72c      	b.n	8000b96 <Envelope_tick+0xae>
				env[i].value = 0;
 8000d3c:	f8a0 c01c 	strh.w	ip, [r0, #28]
		if(env[i].value > 0){
 8000d40:	e73f      	b.n	8000bc2 <Envelope_tick+0xda>
				env[i].value = 0;
 8000d42:	f8a0 c022 	strh.w	ip, [r0, #34]	@ 0x22
		if(env[i].value > 0){
 8000d46:	e753      	b.n	8000bf0 <Envelope_tick+0x108>

08000d48 <Envelope_init>:

void Envelope_init(Envelope env[]) {
	for(int i = 0; i < VOICE_COUNT; i++){
		env[i].attack = 250;
 8000d48:	4906      	ldr	r1, [pc, #24]	@ (8000d64 <Envelope_init+0x1c>)
 8000d4a:	f44f 027a 	mov.w	r2, #16384000	@ 0xfa0000
 8000d4e:	23c8      	movs	r3, #200	@ 0xc8
 8000d50:	6001      	str	r1, [r0, #0]
 8000d52:	6042      	str	r2, [r0, #4]
 8000d54:	6083      	str	r3, [r0, #8]
 8000d56:	60c1      	str	r1, [r0, #12]
 8000d58:	6102      	str	r2, [r0, #16]
 8000d5a:	6143      	str	r3, [r0, #20]
 8000d5c:	6181      	str	r1, [r0, #24]
 8000d5e:	61c2      	str	r2, [r0, #28]
 8000d60:	6203      	str	r3, [r0, #32]
		env[i].release = 200;
		env[i].value = 0;
	}
}
 8000d62:	4770      	bx	lr
 8000d64:	00c800fa 	.word	0x00c800fa

08000d68 <Envelope_setSpeed>:

void Envelope_setSpeed(Envelope env[],int speed) {
 8000d68:	b510      	push	{r4, lr}
	if(speed == 0){
 8000d6a:	b959      	cbnz	r1, 8000d84 <Envelope_setSpeed+0x1c>
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <Envelope_setSpeed+0x20>)
 8000d6e:	469e      	mov	lr, r3
		for(int i = 0; i < VOICE_COUNT; i++){
			env[i].attack = 250;
 8000d70:	6003      	str	r3, [r0, #0]
 8000d72:	f8c0 3006 	str.w	r3, [r0, #6]
 8000d76:	60c3      	str	r3, [r0, #12]
 8000d78:	f8c0 3012 	str.w	r3, [r0, #18]
 8000d7c:	6183      	str	r3, [r0, #24]
 8000d7e:	f8c0 301e 	str.w	r3, [r0, #30]
		for(int i = 0; i < VOICE_COUNT; i++){
			env[i].attack = 4;
			env[i].release = 1;
		}
	}
}
 8000d82:	bd10      	pop	{r4, pc}
 8000d84:	4b01      	ldr	r3, [pc, #4]	@ (8000d8c <Envelope_setSpeed+0x24>)
 8000d86:	e7f2      	b.n	8000d6e <Envelope_setSpeed+0x6>
 8000d88:	00c800fa 	.word	0x00c800fa
 8000d8c:	00010004 	.word	0x00010004

08000d90 <stDelay_tick>:

void stDelay_tick(stDelay *delay, uint16_t inL, uint16_t inR){
    delay->in_index_l++;
 8000d90:	f500 5280 	add.w	r2, r0, #4096	@ 0x1000
 8000d94:	8893      	ldrh	r3, [r2, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	b29b      	uxth	r3, r3
    //delay->in_index_r++;
    if(delay->in_index_l > 2047) delay->in_index_l =0;
 8000d9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
void stDelay_tick(stDelay *delay, uint16_t inL, uint16_t inR){
 8000d9e:	b500      	push	{lr}
    if(delay->in_index_l > 2047) delay->in_index_l =0;
 8000da0:	f080 809c 	bcs.w	8000edc <stDelay_tick+0x14c>
    float o_inc_r = delay->samplerate_r/48000;
    delay->out_index_l+=o_inc_l;
    delay->out_index_r+=o_inc_r;
    if(delay->out_index_l > 2047) delay->out_index_l -=2048;
    if(delay->out_index_r > 2047) delay->out_index_r -=2048;
    delay->buffer_l[delay->in_index_l] = inL;
 8000da4:	469c      	mov	ip, r3
    delay->out_index_l+=o_inc_l;
 8000da6:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8000ee4 <stDelay_tick+0x154>
 8000daa:	edd2 7a02 	vldr	s15, [r2, #8]
 8000dae:	ed92 6a04 	vldr	s12, [r2, #16]
    delay->out_index_r+=o_inc_r;
 8000db2:	edd2 5a03 	vldr	s11, [r2, #12]
    delay->out_index_l+=o_inc_l;
 8000db6:	eee6 7a07 	vfma.f32	s15, s12, s14
    float o_inc_r = delay->samplerate_r/48000;
 8000dba:	ed92 5a05 	vldr	s10, [r2, #20]
    if(delay->out_index_l > 2047) delay->out_index_l -=2048;
 8000dbe:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8000ee8 <stDelay_tick+0x158>
    delay->out_index_r+=o_inc_r;
 8000dc2:	eee5 5a07 	vfma.f32	s11, s10, s14
 8000dc6:	8093      	strh	r3, [r2, #4]
    if(delay->out_index_l > 2047) delay->out_index_l -=2048;
 8000dc8:	eef4 7ae6 	vcmpe.f32	s15, s13
    delay->out_index_l+=o_inc_l;
 8000dcc:	edc2 7a02 	vstr	s15, [r2, #8]
    delay->out_index_r+=o_inc_r;
 8000dd0:	edc2 5a03 	vstr	s11, [r2, #12]
    if(delay->out_index_l > 2047) delay->out_index_l -=2048;
 8000dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd8:	dd05      	ble.n	8000de6 <stDelay_tick+0x56>
 8000dda:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8000eec <stDelay_tick+0x15c>
 8000dde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000de2:	edc2 7a02 	vstr	s15, [r2, #8]
    if(delay->out_index_r > 2047) delay->out_index_r -=2048;
 8000de6:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8000ee8 <stDelay_tick+0x158>
 8000dea:	eef4 5ac7 	vcmpe.f32	s11, s14
 8000dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df2:	dd05      	ble.n	8000e00 <stDelay_tick+0x70>
 8000df4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8000eec <stDelay_tick+0x15c>
 8000df8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8000dfc:	edc2 5a03 	vstr	s11, [r2, #12]

	uint16_t index_l = floor(delay->out_index_l);
 8000e00:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
    delay->buffer_l[delay->in_index_l] = inL;
 8000e04:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]
	uint16_t index_l = floor(delay->out_index_l);
 8000e08:	febb 6b46 	vrintm.f64	d6, d6
 8000e0c:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000e10:	ee16 3a10 	vmov	r3, s12
 8000e14:	b29b      	uxth	r3, r3
	float frac_l = delay->out_index_l - index_l;
	uint16_t nextIndex_l = index_l + 1;
 8000e16:	f103 0e01 	add.w	lr, r3, #1
	float frac_l = delay->out_index_l - index_l;
 8000e1a:	ee07 3a10 	vmov	s14, r3
	uint16_t nextIndex_l = index_l + 1;
 8000e1e:	fa1f fe8e 	uxth.w	lr, lr
	float frac_l = delay->out_index_l - index_l;
 8000e22:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
	if (nextIndex_l > 2047){
 8000e26:	f5be 6f00 	cmp.w	lr, #2048	@ 0x800
	float frac_l = delay->out_index_l - index_l;
 8000e2a:	ee37 3ac4 	vsub.f32	s6, s15, s8
	if (nextIndex_l > 2047){
 8000e2e:	d303      	bcc.n	8000e38 <stDelay_tick+0xa8>
		nextIndex_l -= 2048;
 8000e30:	f2a3 7eff 	subw	lr, r3, #2047	@ 0x7ff
 8000e34:	fa1f fe8e 	uxth.w	lr, lr
	}

	uint16_t index_r = floor(delay->out_index_r);
 8000e38:	eeb7 6ae5 	vcvt.f64.f32	d6, s11
 8000e3c:	febb 6b46 	vrintm.f64	d6, d6
 8000e40:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000e44:	ee16 1a10 	vmov	r1, s12
 8000e48:	b289      	uxth	r1, r1
	float frac_r = delay->out_index_r - index_r;
	uint16_t nextIndex_r = index_r + 1;
 8000e4a:	f101 0c01 	add.w	ip, r1, #1
	float frac_r = delay->out_index_r - index_r;
 8000e4e:	ee07 1a10 	vmov	s14, r1
	uint16_t nextIndex_r = index_r + 1;
 8000e52:	fa1f fc8c 	uxth.w	ip, ip
	float frac_r = delay->out_index_r - index_r;
 8000e56:	eef8 4ac7 	vcvt.f32.s32	s9, s14
	if (nextIndex_r > 2047){
 8000e5a:	f5bc 6f00 	cmp.w	ip, #2048	@ 0x800
	float frac_r = delay->out_index_r - index_r;
 8000e5e:	ee75 3ae4 	vsub.f32	s7, s11, s9
	if (nextIndex_r > 2047){
 8000e62:	d303      	bcc.n	8000e6c <stDelay_tick+0xdc>
	nextIndex_r -= 2048;
 8000e64:	f2a1 7cff 	subw	ip, r1, #2047	@ 0x7ff
 8000e68:	fa1f fc8c 	uxth.w	ip, ip
	}
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000e6c:	f830 e01e 	ldrh.w	lr, [r0, lr, lsl #1]
 8000e70:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000e74:	f830 c01c 	ldrh.w	ip, [r0, ip, lsl #1]
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000e78:	ee06 ea90 	vmov	s13, lr
 8000e7c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000e80:	ee07 ca10 	vmov	s14, ip
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000e84:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e88:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8000e8c:	ee05 3a10 	vmov	s10, r3
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000e90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000e94:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
 8000e98:	ee36 6a65 	vsub.f32	s12, s12, s11
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000e9c:	ee77 7a84 	vadd.f32	s15, s15, s8
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000ea0:	ee05 3a90 	vmov	s11, r3
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000ea4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8000ea8:	ee66 6a83 	vmul.f32	s13, s13, s6
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000eac:	ee27 7a23 	vmul.f32	s14, s14, s7
 8000eb0:	ee36 6a24 	vadd.f32	s12, s12, s9
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000eb4:	eee7 6a85 	vfma.f32	s13, s15, s10
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000eb8:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8000ebc:	eef0 7a47 	vmov.f32	s15, s14
 8000ec0:	eee6 7a25 	vfma.f32	s15, s12, s11
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000ec4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8000ec8:	ee16 3a90 	vmov	r3, s13
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	delay->out_l = (uint16_t)((1 - frac_l) * delay->buffer_l[index_l] + frac_l * delay->buffer_l[nextIndex_l]);
 8000ed0:	8013      	strh	r3, [r2, #0]
	delay->out_r = (uint16_t)((1 - frac_r) * delay->buffer_l[index_r] + frac_r * delay->buffer_l[nextIndex_r]);
 8000ed2:	ee17 3a90 	vmov	r3, s15
 8000ed6:	8053      	strh	r3, [r2, #2]
    //delay->out_l = delay->buffer_l[(uint16_t)(delay->out_index_l + 0.5)];
    //delay->out_r = delay->buffer_l[(uint16_t)(delay->out_index_r + 0.5)];

}
 8000ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000edc:	f04f 0c00 	mov.w	ip, #0
    if(delay->in_index_l > 2047) delay->in_index_l =0;
 8000ee0:	4663      	mov	r3, ip
 8000ee2:	e760      	b.n	8000da6 <stDelay_tick+0x16>
 8000ee4:	37aec33e 	.word	0x37aec33e
 8000ee8:	44ffe000 	.word	0x44ffe000
 8000eec:	45000000 	.word	0x45000000

08000ef0 <stDelay_init>:
void stDelay_init(stDelay *delay){
 8000ef0:	b510      	push	{r4, lr}
 8000ef2:	4604      	mov	r4, r0
	for(int i = 0; i < 2048; i++){
	    delay->buffer_l[i] = 0;
 8000ef4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f008 f811 	bl	8008f20 <memset>
	    //delay->buffer_r[i] = 0;
	}

    delay->in_index_l = 270;
 8000efe:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
    //delay->in_index_r = 1024;
    delay->out_index_l = 0;
 8000f02:	2100      	movs	r1, #0
    delay->out_index_r = 0;
    delay->samplerate_r = 48000;
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <stDelay_init+0x28>)
    delay->in_index_l = 270;
 8000f06:	f44f 7087 	mov.w	r0, #270	@ 0x10e
    delay->out_index_l = 0;
 8000f0a:	6099      	str	r1, [r3, #8]
    delay->in_index_l = 270;
 8000f0c:	8098      	strh	r0, [r3, #4]
    delay->out_index_r = 0;
 8000f0e:	60d9      	str	r1, [r3, #12]
    delay->samplerate_r = 48000;
 8000f10:	615a      	str	r2, [r3, #20]
    delay->samplerate_l = 48000;
 8000f12:	611a      	str	r2, [r3, #16]
}
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	bf00      	nop
 8000f18:	473b8000 	.word	0x473b8000

08000f1c <stDelay_timeMod>:
void stDelay_timeMod(stDelay *delay, int16_t mod){
	delay->samplerate_l = 48000 + mod;
 8000f1c:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8000f20:	f500 5080 	add.w	r0, r0, #4096	@ 0x1000
 8000f24:	18ca      	adds	r2, r1, r3
	delay->samplerate_r = 48000 - mod;
 8000f26:	1a5b      	subs	r3, r3, r1
	delay->samplerate_l = 48000 + mod;
 8000f28:	ee07 2a10 	vmov	s14, r2
	delay->samplerate_r = 48000 - mod;
 8000f2c:	ee07 3a90 	vmov	s15, r3
	delay->samplerate_l = 48000 + mod;
 8000f30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	delay->samplerate_r = 48000 - mod;
 8000f34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	delay->samplerate_l = 48000 + mod;
 8000f38:	ed80 7a04 	vstr	s14, [r0, #16]
	delay->samplerate_r = 48000 - mod;
 8000f3c:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <DSP_tick>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void DSP_tick(int i){
 8000f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			SineOsc9x_tick(&Sine9x_0);  //计算每复音输出
 8000f4c:	4e70      	ldr	r6, [pc, #448]	@ (8001110 <DSP_tick+0x1c8>)
void DSP_tick(int i){
 8000f4e:	4605      	mov	r5, r0
			SineOsc9x_tick(&Sine9x_1);
 8000f50:	f8df b1f0 	ldr.w	fp, [pc, #496]	@ 8001144 <DSP_tick+0x1fc>
			SineOsc9x_tick(&Sine9x_0);  //计算每复音输出
 8000f54:	4630      	mov	r0, r6
			SineOsc9x_tick(&Sine9x_2);
 8000f56:	f8df 91f0 	ldr.w	r9, [pc, #496]	@ 8001148 <DSP_tick+0x200>
			SineOsc9x_tick(&Sine9x_0);  //计算每复音输出
 8000f5a:	f7ff fb65 	bl	8000628 <SineOsc9x_tick>
			SineOsc9x_tick(&Sine9x_1);
 8000f5e:	4658      	mov	r0, fp
 8000f60:	f7ff fb62 	bl	8000628 <SineOsc9x_tick>
			SineOsc9x_tick(&Sine9x_3);
			SineOsc9x_tick(&Sine9x_4);
 8000f64:	f8df 81e4 	ldr.w	r8, [pc, #484]	@ 800114c <DSP_tick+0x204>
			SineOsc9x_tick(&Sine9x_2);
 8000f68:	4648      	mov	r0, r9
			SineOsc9x_tick(&Sine9x_5);
 8000f6a:	4f6a      	ldr	r7, [pc, #424]	@ (8001114 <DSP_tick+0x1cc>)
			SineOsc9x_tick(&Sine9x_2);
 8000f6c:	f7ff fb5c 	bl	8000628 <SineOsc9x_tick>
			SineOsc9x_tick(&Sine9x_3);
 8000f70:	4869      	ldr	r0, [pc, #420]	@ (8001118 <DSP_tick+0x1d0>)
 8000f72:	f7ff fb59 	bl	8000628 <SineOsc9x_tick>
			SineOsc9x_tick(&Sine9x_4);
 8000f76:	4640      	mov	r0, r8
 8000f78:	f7ff fb56 	bl	8000628 <SineOsc9x_tick>
			SineOsc9x_tick(&Sine9x_5);
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	f7ff fb53 	bl	8000628 <SineOsc9x_tick>

			SineOsc_setFreq(&LFO1, LFO1_Rate);	//更新LFO速率并计算
 8000f82:	f8df a1cc 	ldr.w	sl, [pc, #460]	@ 8001150 <DSP_tick+0x208>
 8000f86:	4b65      	ldr	r3, [pc, #404]	@ (800111c <DSP_tick+0x1d4>)
			SineOsc_tick(&LFO1);

			Envelope_tick(env, voicePool);
 8000f88:	4c65      	ldr	r4, [pc, #404]	@ (8001120 <DSP_tick+0x1d8>)
			SineOsc_setFreq(&LFO1, LFO1_Rate);	//更新LFO速率并计算
 8000f8a:	4650      	mov	r0, sl
 8000f8c:	ed93 0a00 	vldr	s0, [r3]
 8000f90:	f7ff fb3a 	bl	8000608 <SineOsc_setFreq>
			SineOsc_tick(&LFO1);
 8000f94:	4650      	mov	r0, sl
 8000f96:	f7ff fb17 	bl	80005c8 <SineOsc_tick>
			Envelope_tick(env, voicePool);
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4961      	ldr	r1, [pc, #388]	@ (8001124 <DSP_tick+0x1dc>)
 8000f9e:	f7ff fda3 	bl	8000ae8 <Envelope_tick>

			mixer = 0;
			mixer += ((Sine9x_0.output * env[0].value) >> 16); //开始计算每复音包络
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000fa2:	8960      	ldrh	r0, [r4, #10]
			mixer += ((Sine9x_0.output * env[0].value) >> 16); //开始计算每复音包络
 8000fa4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8000fa8:	6d31      	ldr	r1, [r6, #80]	@ 0x50
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000faa:	e9db 3e14 	ldrd	r3, lr, [fp, #80]	@ 0x50
			mixer += ((Sine9x_0.output * env[0].value) >> 16); //开始计算每复音包络
 8000fae:	fba1 120c 	umull	r1, r2, r1, ip
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000fb2:	fba3 3b00 	umull	r3, fp, r3, r0
			mixer += ((Sine9x_0.output * env[0].value) >> 16); //开始计算每复音包络
 8000fb6:	0c09      	lsrs	r1, r1, #16
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000fb8:	fb00 be0e 	mla	lr, r0, lr, fp
			mixer += ((Sine9x_0.output * env[0].value) >> 16); //开始计算每复音包络
 8000fbc:	6d70      	ldr	r0, [r6, #84]	@ 0x54
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000fbe:	0c1b      	lsrs	r3, r3, #16
			mixer += ((Sine9x_2.output * env[2].value) >> 16);
 8000fc0:	f8b4 b010 	ldrh.w	fp, [r4, #16]
			mixer += ((Sine9x_0.output * env[0].value) >> 16); //开始计算每复音包络
 8000fc4:	fb0c 2c00 	mla	ip, ip, r0, r2
			mixer += ((Sine9x_3.output * env[3].value) >> 16);
			mixer += ((Sine9x_4.output * env[4].value) >> 16);
			mixer += ((Sine9x_5.output * env[5].value) >> 16);

			mixer = (mixer * ADC_Value ) >> 16;	  //总音量控制
			mixer = (mixer * Sine9x_0.vol_scale) >> 16; //根据开启的振荡器数量平衡音量
 8000fc8:	f8b6 004c 	ldrh.w	r0, [r6, #76]	@ 0x4c
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000fcc:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
			mixer += ((Sine9x_3.output * env[3].value) >> 16);
 8000fd0:	4a51      	ldr	r2, [pc, #324]	@ (8001118 <DSP_tick+0x1d0>)
			mixer += ((Sine9x_0.output * env[0].value) >> 16); //开始计算每复音包络
 8000fd2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000fd6:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8000fda:	18cb      	adds	r3, r1, r3
			mixer += ((Sine9x_2.output * env[2].value) >> 16);
 8000fdc:	e9d9 6914 	ldrd	r6, r9, [r9, #80]	@ 0x50
			mixer += ((Sine9x_1.output * env[1].value) >> 16);
 8000fe0:	eb4e 4c1c 	adc.w	ip, lr, ip, lsr #16
			mixer += ((Sine9x_3.output * env[3].value) >> 16);
 8000fe4:	f8b4 e016 	ldrh.w	lr, [r4, #22]
			mixer += ((Sine9x_2.output * env[2].value) >> 16);
 8000fe8:	fba6 160b 	umull	r1, r6, r6, fp
 8000fec:	fb0b 6609 	mla	r6, fp, r9, r6
 8000ff0:	0c09      	lsrs	r1, r1, #16
 8000ff2:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
 8000ff6:	1859      	adds	r1, r3, r1
			mixer += ((Sine9x_3.output * env[3].value) >> 16);
 8000ff8:	e9d2 3214 	ldrd	r3, r2, [r2, #80]	@ 0x50
			mixer += ((Sine9x_2.output * env[2].value) >> 16);
 8000ffc:	eb4c 4c16 	adc.w	ip, ip, r6, lsr #16
			mixer += ((Sine9x_4.output * env[4].value) >> 16);
 8001000:	8ba6      	ldrh	r6, [r4, #28]
			mixer += ((Sine9x_3.output * env[3].value) >> 16);
 8001002:	fba3 390e 	umull	r3, r9, r3, lr
			mixer += ((Sine9x_5.output * env[5].value) >> 16);
 8001006:	8c64      	ldrh	r4, [r4, #34]	@ 0x22
			mixer += ((Sine9x_3.output * env[3].value) >> 16);
 8001008:	fb0e 9202 	mla	r2, lr, r2, r9
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001012:	18cb      	adds	r3, r1, r3
			mixer += ((Sine9x_4.output * env[4].value) >> 16);
 8001014:	e9d8 1814 	ldrd	r1, r8, [r8, #80]	@ 0x50
			mixer += ((Sine9x_3.output * env[3].value) >> 16);
 8001018:	eb4c 4c12 	adc.w	ip, ip, r2, lsr #16
			mixer += ((Sine9x_4.output * env[4].value) >> 16);
 800101c:	fba1 1e06 	umull	r1, lr, r1, r6
 8001020:	fb06 e608 	mla	r6, r6, r8, lr
 8001024:	0c09      	lsrs	r1, r1, #16
 8001026:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
			mixer += ((Sine9x_5.output * env[5].value) >> 16);
 800102a:	e9d7 2714 	ldrd	r2, r7, [r7, #80]	@ 0x50
			mixer += ((Sine9x_4.output * env[4].value) >> 16);
 800102e:	185b      	adds	r3, r3, r1
 8001030:	eb4c 4116 	adc.w	r1, ip, r6, lsr #16
			mixer += ((Sine9x_5.output * env[5].value) >> 16);
 8001034:	fba2 2604 	umull	r2, r6, r2, r4
 8001038:	fb04 6407 	mla	r4, r4, r7, r6
 800103c:	0c12      	lsrs	r2, r2, #16
 800103e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8001042:	189b      	adds	r3, r3, r2
			mixer = (mixer * ADC_Value ) >> 16;	  //总音量控制
 8001044:	4a38      	ldr	r2, [pc, #224]	@ (8001128 <DSP_tick+0x1e0>)
			mixer += ((Sine9x_5.output * env[5].value) >> 16);
 8001046:	eb41 4114 	adc.w	r1, r1, r4, lsr #16
			mixer = (mixer * ADC_Value ) >> 16;	  //总音量控制
 800104a:	8814      	ldrh	r4, [r2, #0]
			if(chorusOn){ //Chorus
 800104c:	4a37      	ldr	r2, [pc, #220]	@ (800112c <DSP_tick+0x1e4>)
 800104e:	7816      	ldrb	r6, [r2, #0]
			mixer = (mixer * ADC_Value ) >> 16;	  //总音量控制
 8001050:	fba3 3204 	umull	r3, r2, r3, r4
 8001054:	fb04 2201 	mla	r2, r4, r1, r2
 8001058:	0c1b      	lsrs	r3, r3, #16
			mixer = (mixer * Sine9x_0.vol_scale) >> 16; //根据开启的振荡器数量平衡音量
 800105a:	4c35      	ldr	r4, [pc, #212]	@ (8001130 <DSP_tick+0x1e8>)
			mixer = (mixer * ADC_Value ) >> 16;	  //总音量控制
 800105c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001060:	0c11      	lsrs	r1, r2, #16
			mixer = (mixer * Sine9x_0.vol_scale) >> 16; //根据开启的振荡器数量平衡音量
 8001062:	fba3 3200 	umull	r3, r2, r3, r0
 8001066:	fb00 2201 	mla	r2, r0, r1, r2
 800106a:	0c1b      	lsrs	r3, r3, #16
 800106c:	0c17      	lsrs	r7, r2, #16
 800106e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001072:	6067      	str	r7, [r4, #4]
 8001074:	6023      	str	r3, [r4, #0]
			if(chorusOn){ //Chorus
 8001076:	b94e      	cbnz	r6, 800108c <DSP_tick+0x144>
				uint32_t chorus_r = (3 * delay1.out_r + (uint16_t)(mixer >> 16))>>2;

				master_buffer_l[i] = chorus_l;
				master_buffer_r[i] = chorus_r;
			}else{
				master_buffer_l[i] = (uint16_t)(mixer >> 16);
 8001078:	b292      	uxth	r2, r2
 800107a:	4613      	mov	r3, r2
				master_buffer_l[i] = chorus_l;
 800107c:	482d      	ldr	r0, [pc, #180]	@ (8001134 <DSP_tick+0x1ec>)
				master_buffer_r[i] = chorus_r;
 800107e:	492e      	ldr	r1, [pc, #184]	@ (8001138 <DSP_tick+0x1f0>)
				master_buffer_l[i] = chorus_l;
 8001080:	f820 3015 	strh.w	r3, [r0, r5, lsl #1]
				master_buffer_r[i] = chorus_r;
 8001084:	f821 2015 	strh.w	r2, [r1, r5, lsl #1]
				master_buffer_r[i] = (uint16_t)(mixer >> 16);
			}
}
 8001088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				mixer = ((mixer * (uint64_t)(0xC003 + (LFO1.output <<2))) >> 16); //Tremolo
 800108c:	f8da 2008 	ldr.w	r2, [sl, #8]
				stDelay_timeMod(&delay1, 1000*((double)LFO1.output/4095.0f - 0.5));	//LFO调制振荡器以实现Chorus
 8001090:	eebe 7b00 	vmov.f64	d7, #224	@ 0xbf000000 -0.5
				mixer = ((mixer * (uint64_t)(0xC003 + (LFO1.output <<2))) >> 16); //Tremolo
 8001094:	f24c 0603 	movw	r6, #49155	@ 0xc003
				stDelay_timeMod(&delay1, 1000*((double)LFO1.output/4095.0f - 0.5));	//LFO调制振荡器以实现Chorus
 8001098:	4828      	ldr	r0, [pc, #160]	@ (800113c <DSP_tick+0x1f4>)
 800109a:	ee04 2a90 	vmov	s9, r2
				mixer = ((mixer * (uint64_t)(0xC003 + (LFO1.output <<2))) >> 16); //Tremolo
 800109e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
				stDelay_timeMod(&delay1, 1000*((double)LFO1.output/4095.0f - 0.5));	//LFO调制振荡器以实现Chorus
 80010a2:	eeb8 4b64 	vcvt.f64.u32	d4, s9
 80010a6:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 8001100 <DSP_tick+0x1b8>
 80010aa:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8001108 <DSP_tick+0x1c0>
 80010ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80010b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80010ba:	ee17 2a10 	vmov	r2, s14
 80010be:	b211      	sxth	r1, r2
				mixer = ((mixer * (uint64_t)(0xC003 + (LFO1.output <<2))) >> 16); //Tremolo
 80010c0:	fba6 3203 	umull	r3, r2, r6, r3
 80010c4:	fb06 2207 	mla	r2, r6, r7, r2
 80010c8:	0c1b      	lsrs	r3, r3, #16
 80010ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010ce:	0c12      	lsrs	r2, r2, #16
 80010d0:	6023      	str	r3, [r4, #0]
 80010d2:	6062      	str	r2, [r4, #4]
				stDelay_timeMod(&delay1, 1000*((double)LFO1.output/4095.0f - 0.5));	//LFO调制振荡器以实现Chorus
 80010d4:	f7ff ff22 	bl	8000f1c <stDelay_timeMod>
				stDelay_tick(&delay1, (uint16_t)(mixer>> 16), (uint16_t)(mixer>> 16));
 80010d8:	8862      	ldrh	r2, [r4, #2]
 80010da:	4818      	ldr	r0, [pc, #96]	@ (800113c <DSP_tick+0x1f4>)
 80010dc:	4611      	mov	r1, r2
 80010de:	f7ff fe57 	bl	8000d90 <stDelay_tick>
				uint32_t chorus_l = (3 * delay1.out_l + (uint16_t)(mixer >> 16))>>2;
 80010e2:	4a17      	ldr	r2, [pc, #92]	@ (8001140 <DSP_tick+0x1f8>)
 80010e4:	8861      	ldrh	r1, [r4, #2]
 80010e6:	8813      	ldrh	r3, [r2, #0]
				uint32_t chorus_r = (3 * delay1.out_r + (uint16_t)(mixer >> 16))>>2;
 80010e8:	8852      	ldrh	r2, [r2, #2]
				uint32_t chorus_l = (3 * delay1.out_l + (uint16_t)(mixer >> 16))>>2;
 80010ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
				uint32_t chorus_r = (3 * delay1.out_r + (uint16_t)(mixer >> 16))>>2;
 80010ee:	eb02 0242 	add.w	r2, r2, r2, lsl #1
				uint32_t chorus_l = (3 * delay1.out_l + (uint16_t)(mixer >> 16))>>2;
 80010f2:	440b      	add	r3, r1
				uint32_t chorus_r = (3 * delay1.out_r + (uint16_t)(mixer >> 16))>>2;
 80010f4:	440a      	add	r2, r1
				master_buffer_l[i] = chorus_l;
 80010f6:	f3c3 038f 	ubfx	r3, r3, #2, #16
				master_buffer_r[i] = chorus_r;
 80010fa:	f3c2 028f 	ubfx	r2, r2, #2, #16
 80010fe:	e7bd      	b.n	800107c <DSP_tick+0x134>
 8001100:	10010010 	.word	0x10010010
 8001104:	3f300100 	.word	0x3f300100
 8001108:	00000000 	.word	0x00000000
 800110c:	408f4000 	.word	0x408f4000
 8001110:	24003498 	.word	0x24003498
 8001114:	24003150 	.word	0x24003150
 8001118:	240032a0 	.word	0x240032a0
 800111c:	24002060 	.word	0x24002060
 8001120:	24002100 	.word	0x24002100
 8001124:	240020e8 	.word	0x240020e8
 8001128:	24003548 	.word	0x24003548
 800112c:	24003558 	.word	0x24003558
 8001130:	24003550 	.word	0x24003550
 8001134:	240037e4 	.word	0x240037e4
 8001138:	24003764 	.word	0x24003764
 800113c:	24002124 	.word	0x24002124
 8001140:	24003124 	.word	0x24003124
 8001144:	240033f0 	.word	0x240033f0
 8001148:	24003348 	.word	0x24003348
 800114c:	240031f8 	.word	0x240031f8
 8001150:	2400313c 	.word	0x2400313c

08001154 <HAL_TIM_PeriodElapsedCallback>:
	//if(htim == &htim7){										//但是发现放在主循环里效果也不差
		//trackTime++;
		//if(trackTime > 1 ) HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
		//midi_playFile_tick(track1);
	//}
}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <HAL_DAC_ConvHalfCpltCallbackCh1>:

//下方是DAC缓冲区传输的半传输和全传输中断，分别调用函数计算采样填充到缓冲区
//函数功能是一样的，只不过填充缓冲区的位置不同所以分两个函数处理
void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac1){
 8001158:	b510      	push	{r4, lr}
	  chorusOn = !chorusOn;
  }
}

void audio_frame_upper(){
	for (int i = 0; i < 0.5 * BUFFER_SIZE; i++)
 800115a:	2400      	movs	r4, #0
	  {
		DSP_tick(i);
 800115c:	4620      	mov	r0, r4
	for (int i = 0; i < 0.5 * BUFFER_SIZE; i++)
 800115e:	3401      	adds	r4, #1
		DSP_tick(i);
 8001160:	f7ff fef2 	bl	8000f48 <DSP_tick>
	for (int i = 0; i < 0.5 * BUFFER_SIZE; i++)
 8001164:	2c20      	cmp	r4, #32
 8001166:	d1f9      	bne.n	800115c <HAL_DAC_ConvHalfCpltCallbackCh1+0x4>
}
 8001168:	bd10      	pop	{r4, pc}
 800116a:	bf00      	nop

0800116c <HAL_DAC_ConvCpltCallbackCh1>:
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac1){
 800116c:	b510      	push	{r4, lr}
	  }
}
void audio_frame_lower(){
	for (int i = 0.5 * BUFFER_SIZE; i < BUFFER_SIZE; i++)
 800116e:	2420      	movs	r4, #32
	  {
		DSP_tick(i);
 8001170:	4620      	mov	r0, r4
	for (int i = 0.5 * BUFFER_SIZE; i < BUFFER_SIZE; i++)
 8001172:	3401      	adds	r4, #1
		DSP_tick(i);
 8001174:	f7ff fee8 	bl	8000f48 <DSP_tick>
	for (int i = 0.5 * BUFFER_SIZE; i < BUFFER_SIZE; i++)
 8001178:	2c40      	cmp	r4, #64	@ 0x40
 800117a:	d1f9      	bne.n	8001170 <HAL_DAC_ConvCpltCallbackCh1+0x4>
}
 800117c:	bd10      	pop	{r4, pc}
 800117e:	bf00      	nop

08001180 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001180:	b508      	push	{r3, lr}
    ADC_Value = 0xFFFF - HAL_ADC_GetValue(&hadc3);	//我电位器反着放的所以需要反转一下
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <HAL_ADC_ConvCpltCallback+0x10>)
 8001184:	f001 f9b4 	bl	80024f0 <HAL_ADC_GetValue>
 8001188:	4b02      	ldr	r3, [pc, #8]	@ (8001194 <HAL_ADC_ConvCpltCallback+0x14>)
 800118a:	43c0      	mvns	r0, r0
 800118c:	8018      	strh	r0, [r3, #0]
}
 800118e:	bd08      	pop	{r3, pc}
 8001190:	24003b1c 	.word	0x24003b1c
 8001194:	24003548 	.word	0x24003548

08001198 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == ENCODER_BTN_Pin) {
 8001198:	f5b0 6f00 	cmp.w	r0, #2048	@ 0x800
{
 800119c:	b510      	push	{r4, lr}
  if(GPIO_Pin == ENCODER_BTN_Pin) {
 800119e:	d04c      	beq.n	800123a <HAL_GPIO_EXTI_Callback+0xa2>
  }else if(GPIO_Pin == BTN_RIGHT_Pin) {
 80011a0:	f5b0 4f80 	cmp.w	r0, #16384	@ 0x4000
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_EXTI_Callback+0x1c>
  }else if(GPIO_Pin == BTN_LEFT_Pin) {
 80011a6:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 80011aa:	d05f      	beq.n	800126c <HAL_GPIO_EXTI_Callback+0xd4>
  } else if(GPIO_Pin == BTN_MID_Pin) {
 80011ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80011b0:	d055      	beq.n	800125e <HAL_GPIO_EXTI_Callback+0xc6>
}
 80011b2:	bd10      	pop	{r4, pc}
	currentPreset++;
 80011b4:	4833      	ldr	r0, [pc, #204]	@ (8001284 <HAL_GPIO_EXTI_Callback+0xec>)
 80011b6:	7802      	ldrb	r2, [r0, #0]
 80011b8:	1c53      	adds	r3, r2, #1
 80011ba:	b2db      	uxtb	r3, r3
	if(currentPreset > 8){
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d901      	bls.n	80011c4 <HAL_GPIO_EXTI_Callback+0x2c>
		currentPreset -= 8;
 80011c0:	3a07      	subs	r2, #7
 80011c2:	b2d3      	uxtb	r3, r2
		B3_OscVol[i] = oscPresets[currentPreset][i];
 80011c4:	4930      	ldr	r1, [pc, #192]	@ (8001288 <HAL_GPIO_EXTI_Callback+0xf0>)
 80011c6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
	currentPreset++;
 80011ca:	7003      	strb	r3, [r0, #0]
		B3_OscVol[i] = oscPresets[currentPreset][i];
 80011cc:	188b      	adds	r3, r1, r2
 80011ce:	5c8a      	ldrb	r2, [r1, r2]
 80011d0:	4c2e      	ldr	r4, [pc, #184]	@ (800128c <HAL_GPIO_EXTI_Callback+0xf4>)
 80011d2:	b2d2      	uxtb	r2, r2
	  }
}

void updateB3Vol(){
	SineOsc9x_setVol(&Sine9x_0, B3_OscVol);
 80011d4:	482e      	ldr	r0, [pc, #184]	@ (8001290 <HAL_GPIO_EXTI_Callback+0xf8>)
 80011d6:	4621      	mov	r1, r4
		B3_OscVol[i] = oscPresets[currentPreset][i];
 80011d8:	7022      	strb	r2, [r4, #0]
 80011da:	785a      	ldrb	r2, [r3, #1]
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	7062      	strb	r2, [r4, #1]
 80011e0:	789a      	ldrb	r2, [r3, #2]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	70a2      	strb	r2, [r4, #2]
 80011e6:	78da      	ldrb	r2, [r3, #3]
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	70e2      	strb	r2, [r4, #3]
 80011ec:	791a      	ldrb	r2, [r3, #4]
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	7122      	strb	r2, [r4, #4]
 80011f2:	795a      	ldrb	r2, [r3, #5]
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	7162      	strb	r2, [r4, #5]
 80011f8:	799a      	ldrb	r2, [r3, #6]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	71a2      	strb	r2, [r4, #6]
 80011fe:	79da      	ldrb	r2, [r3, #7]
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	71e2      	strb	r2, [r4, #7]
 8001204:	7a1b      	ldrb	r3, [r3, #8]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	7223      	strb	r3, [r4, #8]
	SineOsc9x_setVol(&Sine9x_0, B3_OscVol);
 800120a:	f7ff fc21 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_1, B3_OscVol);
 800120e:	4621      	mov	r1, r4
 8001210:	4820      	ldr	r0, [pc, #128]	@ (8001294 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001212:	f7ff fc1d 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_2, B3_OscVol);
 8001216:	4621      	mov	r1, r4
 8001218:	481f      	ldr	r0, [pc, #124]	@ (8001298 <HAL_GPIO_EXTI_Callback+0x100>)
 800121a:	f7ff fc19 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_3, B3_OscVol);
 800121e:	4621      	mov	r1, r4
 8001220:	481e      	ldr	r0, [pc, #120]	@ (800129c <HAL_GPIO_EXTI_Callback+0x104>)
 8001222:	f7ff fc15 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_4, B3_OscVol);
 8001226:	4621      	mov	r1, r4
 8001228:	481d      	ldr	r0, [pc, #116]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0x108>)
 800122a:	f7ff fc11 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_5, B3_OscVol);
 800122e:	4621      	mov	r1, r4
 8001230:	481c      	ldr	r0, [pc, #112]	@ (80012a4 <HAL_GPIO_EXTI_Callback+0x10c>)
}
 8001232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SineOsc9x_setVol(&Sine9x_5, B3_OscVol);
 8001236:	f7ff bc0b 	b.w	8000a50 <SineOsc9x_setVol>
    trackPlaying++;
 800123a:	4a1b      	ldr	r2, [pc, #108]	@ (80012a8 <HAL_GPIO_EXTI_Callback+0x110>)
 800123c:	7813      	ldrb	r3, [r2, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2db      	uxtb	r3, r3
 8001242:	7013      	strb	r3, [r2, #0]
    if(trackPlaying >=3) trackPlaying = 0;
 8001244:	7813      	ldrb	r3, [r2, #0]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d901      	bls.n	800124e <HAL_GPIO_EXTI_Callback+0xb6>
 800124a:	2300      	movs	r3, #0
 800124c:	7013      	strb	r3, [r2, #0]
    voicePool_panic();
 800124e:	f000 fcd3 	bl	8001bf8 <voicePool_panic>
    trackTime = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	4915      	ldr	r1, [pc, #84]	@ (80012ac <HAL_GPIO_EXTI_Callback+0x114>)
    trackIndex = 0;
 8001256:	4a16      	ldr	r2, [pc, #88]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x118>)
    trackTime = 0;
 8001258:	600b      	str	r3, [r1, #0]
    trackIndex = 0;
 800125a:	6013      	str	r3, [r2, #0]
}
 800125c:	bd10      	pop	{r4, pc}
	  chorusOn = !chorusOn;
 800125e:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0x11c>)
 8001260:	7813      	ldrb	r3, [r2, #0]
 8001262:	fab3 f383 	clz	r3, r3
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	7013      	strb	r3, [r2, #0]
}
 800126a:	bd10      	pop	{r4, pc}
	  envSpeed = !envSpeed;
 800126c:	4b12      	ldr	r3, [pc, #72]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0x120>)
	  Envelope_setSpeed(env,envSpeed);
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <HAL_GPIO_EXTI_Callback+0x124>)
	  envSpeed = !envSpeed;
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	fab1 f181 	clz	r1, r1
 8001276:	0949      	lsrs	r1, r1, #5
}
 8001278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	  envSpeed = !envSpeed;
 800127c:	6019      	str	r1, [r3, #0]
	  Envelope_setSpeed(env,envSpeed);
 800127e:	f7ff bd73 	b.w	8000d68 <Envelope_setSpeed>
 8001282:	bf00      	nop
 8001284:	240020e4 	.word	0x240020e4
 8001288:	24002000 	.word	0x24002000
 800128c:	24002054 	.word	0x24002054
 8001290:	24003498 	.word	0x24003498
 8001294:	240033f0 	.word	0x240033f0
 8001298:	24003348 	.word	0x24003348
 800129c:	240032a0 	.word	0x240032a0
 80012a0:	240031f8 	.word	0x240031f8
 80012a4:	24003150 	.word	0x24003150
 80012a8:	24003559 	.word	0x24003559
 80012ac:	24003544 	.word	0x24003544
 80012b0:	24003540 	.word	0x24003540
 80012b4:	24003558 	.word	0x24003558
 80012b8:	2400355c 	.word	0x2400355c
 80012bc:	24002100 	.word	0x24002100

080012c0 <updateB3Freq>:
}

void updateB3Freq(){
 80012c0:	b538      	push	{r3, r4, r5, lr}
	SineOsc9x_setFreq(&Sine9x_0, noteToHz[voicePool[0].note]);
 80012c2:	4d1a      	ldr	r5, [pc, #104]	@ (800132c <updateB3Freq+0x6c>)
 80012c4:	4c1a      	ldr	r4, [pc, #104]	@ (8001330 <updateB3Freq+0x70>)
 80012c6:	782b      	ldrb	r3, [r5, #0]
 80012c8:	481a      	ldr	r0, [pc, #104]	@ (8001334 <updateB3Freq+0x74>)
 80012ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80012ce:	ed93 0a00 	vldr	s0, [r3]
 80012d2:	f7ff fb5b 	bl	800098c <SineOsc9x_setFreq>
	SineOsc9x_setFreq(&Sine9x_1, noteToHz[voicePool[1].note]);
 80012d6:	792b      	ldrb	r3, [r5, #4]
 80012d8:	4817      	ldr	r0, [pc, #92]	@ (8001338 <updateB3Freq+0x78>)
 80012da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80012de:	ed93 0a00 	vldr	s0, [r3]
 80012e2:	f7ff fb53 	bl	800098c <SineOsc9x_setFreq>
	SineOsc9x_setFreq(&Sine9x_2, noteToHz[voicePool[2].note]);
 80012e6:	7a2b      	ldrb	r3, [r5, #8]
 80012e8:	4814      	ldr	r0, [pc, #80]	@ (800133c <updateB3Freq+0x7c>)
 80012ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80012ee:	ed93 0a00 	vldr	s0, [r3]
 80012f2:	f7ff fb4b 	bl	800098c <SineOsc9x_setFreq>
	SineOsc9x_setFreq(&Sine9x_3, noteToHz[voicePool[3].note]);
 80012f6:	7b2b      	ldrb	r3, [r5, #12]
 80012f8:	4811      	ldr	r0, [pc, #68]	@ (8001340 <updateB3Freq+0x80>)
 80012fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80012fe:	ed93 0a00 	vldr	s0, [r3]
 8001302:	f7ff fb43 	bl	800098c <SineOsc9x_setFreq>
	SineOsc9x_setFreq(&Sine9x_4, noteToHz[voicePool[4].note]);
 8001306:	7c2b      	ldrb	r3, [r5, #16]
 8001308:	480e      	ldr	r0, [pc, #56]	@ (8001344 <updateB3Freq+0x84>)
 800130a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800130e:	ed93 0a00 	vldr	s0, [r3]
 8001312:	f7ff fb3b 	bl	800098c <SineOsc9x_setFreq>
	SineOsc9x_setFreq(&Sine9x_5, noteToHz[voicePool[5].note]);
 8001316:	7d2b      	ldrb	r3, [r5, #20]
 8001318:	480b      	ldr	r0, [pc, #44]	@ (8001348 <updateB3Freq+0x88>)
 800131a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800131e:	ed94 0a00 	vldr	s0, [r4]
}
 8001322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SineOsc9x_setFreq(&Sine9x_5, noteToHz[voicePool[5].note]);
 8001326:	f7ff bb31 	b.w	800098c <SineOsc9x_setFreq>
 800132a:	bf00      	nop
 800132c:	240020e8 	.word	0x240020e8
 8001330:	24003560 	.word	0x24003560
 8001334:	24003498 	.word	0x24003498
 8001338:	240033f0 	.word	0x240033f0
 800133c:	24003348 	.word	0x24003348
 8001340:	240032a0 	.word	0x240032a0
 8001344:	240031f8 	.word	0x240031f8
 8001348:	24003150 	.word	0x24003150

0800134c <HAL_UART_RxCpltCallback>:
	midiBuffer[0] =UART4_rxBuffer[0];//目的是防止中断完成前传入了新的MIDI数据导致被覆盖
 800134c:	4922      	ldr	r1, [pc, #136]	@ (80013d8 <HAL_UART_RxCpltCallback+0x8c>)
	HAL_UART_Receive_IT (&huart4, UART4_rxBuffer, 3);
 800134e:	2203      	movs	r2, #3
 8001350:	4822      	ldr	r0, [pc, #136]	@ (80013dc <HAL_UART_RxCpltCallback+0x90>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){	//处理MIDI输入信息
 8001352:	b570      	push	{r4, r5, r6, lr}
	midiBuffer[0] =UART4_rxBuffer[0];//目的是防止中断完成前传入了新的MIDI数据导致被覆盖
 8001354:	780c      	ldrb	r4, [r1, #0]
	midiBuffer[1] =UART4_rxBuffer[1];
 8001356:	784d      	ldrb	r5, [r1, #1]
	midiBuffer[2] =UART4_rxBuffer[2];
 8001358:	788e      	ldrb	r6, [r1, #2]
	HAL_UART_Receive_IT (&huart4, UART4_rxBuffer, 3);
 800135a:	f006 fca7 	bl	8007cac <HAL_UART_Receive_IT>
	if ((midiBuffer[0] & 0xF0) == 0x90){
 800135e:	f004 03f0 	and.w	r3, r4, #240	@ 0xf0
 8001362:	2b90      	cmp	r3, #144	@ 0x90
 8001364:	d007      	beq.n	8001376 <HAL_UART_RxCpltCallback+0x2a>
	    else if ((midiBuffer[0] & 0xF0) == 0x80){	// 检查是否为Note Off消息
 8001366:	2b80      	cmp	r3, #128	@ 0x80
 8001368:	d00e      	beq.n	8001388 <HAL_UART_RxCpltCallback+0x3c>
	    }else if((midiBuffer[0] & 0xF0) == 0xB0){ 	// 0xB0是Control Change的状态字节
 800136a:	2bb0      	cmp	r3, #176	@ 0xb0
 800136c:	d014      	beq.n	8001398 <HAL_UART_RxCpltCallback+0x4c>
}
 800136e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	updateB3Freq();
 8001372:	f7ff bfa5 	b.w	80012c0 <updateB3Freq>
			voicePool_noteOn(midiBuffer[1], voicePool); //分配新音符并返回编
 8001376:	491a      	ldr	r1, [pc, #104]	@ (80013e0 <HAL_UART_RxCpltCallback+0x94>)
 8001378:	4628      	mov	r0, r5
		if (midiBuffer[2] != 0){  						// 非零速度表示Note On
 800137a:	b13e      	cbz	r6, 800138c <HAL_UART_RxCpltCallback+0x40>
			voicePool_noteOn(midiBuffer[1], voicePool); //分配新音符并返回编
 800137c:	f000 fb54 	bl	8001a28 <voicePool_noteOn>
}
 8001380:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	updateB3Freq();
 8001384:	f7ff bf9c 	b.w	80012c0 <updateB3Freq>
	    	voicePool_noteOff(midiBuffer[1], voicePool);
 8001388:	4915      	ldr	r1, [pc, #84]	@ (80013e0 <HAL_UART_RxCpltCallback+0x94>)
 800138a:	4628      	mov	r0, r5
 800138c:	f000 fbec 	bl	8001b68 <voicePool_noteOff>
}
 8001390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	updateB3Freq();
 8001394:	f7ff bf94 	b.w	80012c0 <updateB3Freq>
	        midi_cc(midiBuffer[1], midiBuffer[2]);  // 调用处理函数，第一个字节是CC编号，第二个字节是值
 8001398:	4631      	mov	r1, r6
 800139a:	4628      	mov	r0, r5
 800139c:	f000 fc3e 	bl	8001c1c <midi_cc>
	SineOsc9x_setVol(&Sine9x_0, B3_OscVol);
 80013a0:	4910      	ldr	r1, [pc, #64]	@ (80013e4 <HAL_UART_RxCpltCallback+0x98>)
 80013a2:	4811      	ldr	r0, [pc, #68]	@ (80013e8 <HAL_UART_RxCpltCallback+0x9c>)
 80013a4:	f7ff fb54 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_1, B3_OscVol);
 80013a8:	490e      	ldr	r1, [pc, #56]	@ (80013e4 <HAL_UART_RxCpltCallback+0x98>)
 80013aa:	4810      	ldr	r0, [pc, #64]	@ (80013ec <HAL_UART_RxCpltCallback+0xa0>)
 80013ac:	f7ff fb50 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_2, B3_OscVol);
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <HAL_UART_RxCpltCallback+0x98>)
 80013b2:	480f      	ldr	r0, [pc, #60]	@ (80013f0 <HAL_UART_RxCpltCallback+0xa4>)
 80013b4:	f7ff fb4c 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_3, B3_OscVol);
 80013b8:	490a      	ldr	r1, [pc, #40]	@ (80013e4 <HAL_UART_RxCpltCallback+0x98>)
 80013ba:	480e      	ldr	r0, [pc, #56]	@ (80013f4 <HAL_UART_RxCpltCallback+0xa8>)
 80013bc:	f7ff fb48 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_4, B3_OscVol);
 80013c0:	4908      	ldr	r1, [pc, #32]	@ (80013e4 <HAL_UART_RxCpltCallback+0x98>)
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <HAL_UART_RxCpltCallback+0xac>)
 80013c4:	f7ff fb44 	bl	8000a50 <SineOsc9x_setVol>
	SineOsc9x_setVol(&Sine9x_5, B3_OscVol);
 80013c8:	4906      	ldr	r1, [pc, #24]	@ (80013e4 <HAL_UART_RxCpltCallback+0x98>)
 80013ca:	480c      	ldr	r0, [pc, #48]	@ (80013fc <HAL_UART_RxCpltCallback+0xb0>)
 80013cc:	f7ff fb40 	bl	8000a50 <SineOsc9x_setVol>
}
 80013d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	updateB3Freq();
 80013d4:	f7ff bf74 	b.w	80012c0 <updateB3Freq>
 80013d8:	24003760 	.word	0x24003760
 80013dc:	24003864 	.word	0x24003864
 80013e0:	240020e8 	.word	0x240020e8
 80013e4:	24002054 	.word	0x24002054
 80013e8:	24003498 	.word	0x24003498
 80013ec:	240033f0 	.word	0x240033f0
 80013f0:	24003348 	.word	0x24003348
 80013f4:	240032a0 	.word	0x240032a0
 80013f8:	240031f8 	.word	0x240031f8
 80013fc:	24003150 	.word	0x24003150

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b530      	push	{r4, r5, lr}
 8001402:	b0a1      	sub	sp, #132	@ 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001404:	224c      	movs	r2, #76	@ 0x4c
 8001406:	2100      	movs	r1, #0
 8001408:	a80c      	add	r0, sp, #48	@ 0x30
 800140a:	f007 fd89 	bl	8008f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140e:	2220      	movs	r2, #32
 8001410:	2100      	movs	r1, #0
 8001412:	a804      	add	r0, sp, #16
 8001414:	f007 fd84 	bl	8008f20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001418:	2002      	movs	r0, #2
 800141a:	f003 ff53 	bl	80052c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141e:	4b38      	ldr	r3, [pc, #224]	@ (8001500 <SystemClock_Config+0x100>)
 8001420:	2100      	movs	r1, #0
 8001422:	4a38      	ldr	r2, [pc, #224]	@ (8001504 <SystemClock_Config+0x104>)
 8001424:	9101      	str	r1, [sp, #4]
 8001426:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001428:	f021 0101 	bic.w	r1, r1, #1
 800142c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800142e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	6993      	ldr	r3, [r2, #24]
 8001438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800143c:	6193      	str	r3, [r2, #24]
 800143e:	6993      	ldr	r3, [r2, #24]
 8001440:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001448:	6993      	ldr	r3, [r2, #24]
 800144a:	0498      	lsls	r0, r3, #18
 800144c:	d5fc      	bpl.n	8001448 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <SystemClock_Config+0x108>)
 8001450:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8001454:	f041 0102 	orr.w	r1, r1, #2
 8001458:	f8c3 10f4 	str.w	r1, [r3, #244]	@ 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800145c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	9302      	str	r3, [sp, #8]
 8001468:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800146a:	9103      	str	r1, [sp, #12]
 800146c:	6991      	ldr	r1, [r2, #24]
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <SystemClock_Config+0x100>)
 8001470:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8001474:	6191      	str	r1, [r2, #24]
 8001476:	6992      	ldr	r2, [r2, #24]
 8001478:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800147c:	9203      	str	r2, [sp, #12]
 800147e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001480:	4a20      	ldr	r2, [pc, #128]	@ (8001504 <SystemClock_Config+0x104>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001482:	f041 0101 	orr.w	r1, r1, #1
 8001486:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8001488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	9303      	str	r3, [sp, #12]
 8001490:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001492:	6993      	ldr	r3, [r2, #24]
 8001494:	0499      	lsls	r1, r3, #18
 8001496:	d5fc      	bpl.n	8001492 <SystemClock_Config+0x92>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001498:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800149a:	2200      	movs	r2, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800149c:	2003      	movs	r0, #3
 800149e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a2:	9315      	str	r3, [sp, #84]	@ 0x54
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014a4:	2440      	movs	r4, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014a6:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80014a8:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014aa:	9319      	str	r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014ac:	9410      	str	r4, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80014ae:	951c      	str	r5, [sp, #112]	@ 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014b4:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014b8:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014ba:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	a80c      	add	r0, sp, #48	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80014be:	910f      	str	r1, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014c0:	e9cd 221d 	strd	r2, r2, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL.PLLN = 192;
 80014c4:	2205      	movs	r2, #5
 80014c6:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f003 ff91 	bl	80053f0 <HAL_RCC_OscConfig>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b108      	cbz	r0, 80014d6 <SystemClock_Config+0xd6>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d2:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <SystemClock_Config+0xd4>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d6:	223f      	movs	r2, #63	@ 0x3f
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014de:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014e4:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80014e6:	940b      	str	r4, [sp, #44]	@ 0x2c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80014ea:	e9cd 5407 	strd	r5, r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80014ee:	e9cd 4309 	strd	r4, r3, [sp, #36]	@ 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014f2:	f004 fafd 	bl	8005af0 <HAL_RCC_ClockConfig>
 80014f6:	b108      	cbz	r0, 80014fc <SystemClock_Config+0xfc>
 80014f8:	b672      	cpsid	i
  while (1)
 80014fa:	e7fe      	b.n	80014fa <SystemClock_Config+0xfa>
}
 80014fc:	b021      	add	sp, #132	@ 0x84
 80014fe:	bd30      	pop	{r4, r5, pc}
 8001500:	58000400 	.word	0x58000400
 8001504:	58024800 	.word	0x58024800
 8001508:	58024400 	.word	0x58024400

0800150c <PeriphCommonClock_Config>:
{
 800150c:	b500      	push	{lr}
 800150e:	b0b1      	sub	sp, #196	@ 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001510:	22b8      	movs	r2, #184	@ 0xb8
 8001512:	2100      	movs	r1, #0
 8001514:	a802      	add	r0, sp, #8
 8001516:	f007 fd03 	bl	8008f20 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800151a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800151e:	2300      	movs	r3, #0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001520:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8001522:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f004 fdc1 	bl	80060ac <HAL_RCCEx_PeriphCLKConfig>
 800152a:	b108      	cbz	r0, 8001530 <PeriphCommonClock_Config+0x24>
 800152c:	b672      	cpsid	i
  while (1)
 800152e:	e7fe      	b.n	800152e <PeriphCommonClock_Config+0x22>
}
 8001530:	b031      	add	sp, #196	@ 0xc4
 8001532:	f85d fb04 	ldr.w	pc, [sp], #4
 8001536:	bf00      	nop

08001538 <main>:
{
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SineOsc9x_init(&Sine9x_0, SineLut);
 800153c:	49bc      	ldr	r1, [pc, #752]	@ (8001830 <main+0x2f8>)
		noteToHz[note] = 440.0f * powf(2.0f, (note - 69) / 12.0f);
 800153e:	f06f 0543 	mvn.w	r5, #67	@ 0x43
	SineOsc9x_init(&Sine9x_0, SineLut);
 8001542:	48bc      	ldr	r0, [pc, #752]	@ (8001834 <main+0x2fc>)
		noteToHz[note] = 440.0f * powf(2.0f, (note - 69) / 12.0f);
 8001544:	4cbc      	ldr	r4, [pc, #752]	@ (8001838 <main+0x300>)
{
 8001546:	ed2d 8b02 	vpush	{d8}
 800154a:	b092      	sub	sp, #72	@ 0x48
		noteToHz[note] = 440.0f * powf(2.0f, (note - 69) / 12.0f);
 800154c:	eddf 8abb 	vldr	s17, [pc, #748]	@ 800183c <main+0x304>
	SineOsc9x_init(&Sine9x_0, SineLut);
 8001550:	f7ff f98e 	bl	8000870 <SineOsc9x_init>
	SineOsc9x_init(&Sine9x_1, SineLut);
 8001554:	49b6      	ldr	r1, [pc, #728]	@ (8001830 <main+0x2f8>)
 8001556:	48ba      	ldr	r0, [pc, #744]	@ (8001840 <main+0x308>)
 8001558:	f504 7600 	add.w	r6, r4, #512	@ 0x200
 800155c:	f7ff f988 	bl	8000870 <SineOsc9x_init>
	SineOsc9x_init(&Sine9x_2, SineLut);
 8001560:	49b3      	ldr	r1, [pc, #716]	@ (8001830 <main+0x2f8>)
 8001562:	48b8      	ldr	r0, [pc, #736]	@ (8001844 <main+0x30c>)
 8001564:	f7ff f984 	bl	8000870 <SineOsc9x_init>
	SineOsc9x_init(&Sine9x_3, SineLut);
 8001568:	49b1      	ldr	r1, [pc, #708]	@ (8001830 <main+0x2f8>)
 800156a:	48b7      	ldr	r0, [pc, #732]	@ (8001848 <main+0x310>)
 800156c:	f7ff f980 	bl	8000870 <SineOsc9x_init>
	SineOsc9x_init(&Sine9x_4, SineLut);
 8001570:	49af      	ldr	r1, [pc, #700]	@ (8001830 <main+0x2f8>)
 8001572:	48b6      	ldr	r0, [pc, #728]	@ (800184c <main+0x314>)
 8001574:	f7ff f97c 	bl	8000870 <SineOsc9x_init>
	SineOsc9x_init(&Sine9x_5, SineLut);
 8001578:	49ad      	ldr	r1, [pc, #692]	@ (8001830 <main+0x2f8>)
 800157a:	48b5      	ldr	r0, [pc, #724]	@ (8001850 <main+0x318>)
 800157c:	f7ff f978 	bl	8000870 <SineOsc9x_init>
	SineOsc_init(&LFO1, SineLut);
 8001580:	49ab      	ldr	r1, [pc, #684]	@ (8001830 <main+0x2f8>)
 8001582:	48b4      	ldr	r0, [pc, #720]	@ (8001854 <main+0x31c>)
 8001584:	f7ff f832 	bl	80005ec <SineOsc_init>
	Envelope_init(env);
 8001588:	48b3      	ldr	r0, [pc, #716]	@ (8001858 <main+0x320>)
 800158a:	f7ff fbdd 	bl	8000d48 <Envelope_init>
	stDelay_init(&delay1);
 800158e:	48b3      	ldr	r0, [pc, #716]	@ (800185c <main+0x324>)
 8001590:	f7ff fcae 	bl	8000ef0 <stDelay_init>
		noteToHz[note] = 440.0f * powf(2.0f, (note - 69) / 12.0f);
 8001594:	ed9f 8ab2 	vldr	s16, [pc, #712]	@ 8001860 <main+0x328>
 8001598:	4bb2      	ldr	r3, [pc, #712]	@ (8001864 <main+0x32c>)
 800159a:	f844 3b04 	str.w	r3, [r4], #4
 800159e:	ee07 5a90 	vmov	s15, r5
 80015a2:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80015a6:	3501      	adds	r5, #1
 80015a8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80015ac:	ee60 0aa8 	vmul.f32	s1, s1, s17
 80015b0:	f007 fd02 	bl	8008fb8 <powf>
 80015b4:	ee20 0a08 	vmul.f32	s0, s0, s16
 80015b8:	eca4 0a01 	vstmia	r4!, {s0}
	for (int note = 0; note < 128; note++) {	//计算midi和频率对应表
 80015bc:	42a6      	cmp	r6, r4
 80015be:	d1ee      	bne.n	800159e <main+0x66>
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015c0:	2400      	movs	r4, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015c2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c4:	4da8      	ldr	r5, [pc, #672]	@ (8001868 <main+0x330>)
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|GPIO_PIN_2;
 80015c6:	2707      	movs	r7, #7
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80015c8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 80015cc:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  HAL_MPU_Disable();
 80015d0:	f001 fe3a 	bl	8003248 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015d4:	f248 731f 	movw	r3, #34591	@ 0x871f
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015d8:	a809      	add	r0, sp, #36	@ 0x24
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80015da:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80015de:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
 80015e2:	f240 1301 	movw	r3, #257	@ 0x101
 80015e6:	930c      	str	r3, [sp, #48]	@ 0x30
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80015e8:	f001 fe4c 	bl	8003284 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80015ec:	2004      	movs	r0, #4
 80015ee:	f001 fe39 	bl	8003264 <HAL_MPU_Enable>
  HAL_Init();
 80015f2:	f000 ff19 	bl	8002428 <HAL_Init>
  SystemClock_Config();
 80015f6:	f7ff ff03 	bl	8001400 <SystemClock_Config>
  PeriphCommonClock_Config();
 80015fa:	f7ff ff87 	bl	800150c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001600:	4622      	mov	r2, r4
 8001602:	2108      	movs	r1, #8
 8001604:	4899      	ldr	r0, [pc, #612]	@ (800186c <main+0x334>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
 800160a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800160e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001612:	f043 0310 	orr.w	r3, r3, #16
 8001616:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800161a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800161e:	f003 0310 	and.w	r3, r3, #16
 8001622:	9303      	str	r3, [sp, #12]
 8001624:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800162a:	f043 0304 	orr.w	r3, r3, #4
 800162e:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001632:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001646:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800164a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800164e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001652:	9305      	str	r3, [sp, #20]
 8001654:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800165a:	4333      	orrs	r3, r6
 800165c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001660:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001664:	4033      	ands	r3, r6
 8001666:	9306      	str	r3, [sp, #24]
 8001668:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8001676:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	9307      	str	r3, [sp, #28]
 8001680:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001682:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001686:	f043 0308 	orr.w	r3, r3, #8
 800168a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800168e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	9308      	str	r3, [sp, #32]
 8001698:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 800169a:	f003 fe01 	bl	80052a0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CS_Pin|DC_Pin|GPIO_PIN_2, GPIO_PIN_RESET);
 800169e:	4622      	mov	r2, r4
 80016a0:	2107      	movs	r1, #7
 80016a2:	4873      	ldr	r0, [pc, #460]	@ (8001870 <main+0x338>)
 80016a4:	f003 fdfc 	bl	80052a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016a8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016aa:	a909      	add	r1, sp, #36	@ 0x24
 80016ac:	486f      	ldr	r0, [pc, #444]	@ (800186c <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ae:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b0:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b6:	f003 fcb1 	bl	800501c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ba:	a909      	add	r1, sp, #36	@ 0x24
 80016bc:	486c      	ldr	r0, [pc, #432]	@ (8001870 <main+0x338>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	940c      	str	r4, [sp, #48]	@ 0x30
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|GPIO_PIN_2;
 80016c0:	9709      	str	r7, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	e9cd 640a 	strd	r6, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f003 fca9 	bl	800501c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016ce:	f44f 404c 	mov.w	r0, #52224	@ 0xcc00
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016d2:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d6:	e9cd 0309 	strd	r0, r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016da:	4866      	ldr	r0, [pc, #408]	@ (8001874 <main+0x33c>)
 80016dc:	f003 fc9e 	bl	800501c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1
 80016e0:	f243 031f 	movw	r3, #12319	@ 0x301f
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e4:	4863      	ldr	r0, [pc, #396]	@ (8001874 <main+0x33c>)
 80016e6:	a909      	add	r1, sp, #36	@ 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1
 80016e8:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ee:	f003 fc95 	bl	800501c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f2:	4622      	mov	r2, r4
 80016f4:	4621      	mov	r1, r4
 80016f6:	2028      	movs	r0, #40	@ 0x28
 80016f8:	f001 fd46 	bl	8003188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016fc:	2028      	movs	r0, #40	@ 0x28
 80016fe:	f001 fd7f 	bl	8003200 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001702:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 4, 0);
 8001706:	4622      	mov	r2, r4
 8001708:	2104      	movs	r1, #4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170a:	4333      	orrs	r3, r6
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 4, 0);
 800170c:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800170e:	f8c5 30d8 	str.w	r3, [r5, #216]	@ 0xd8
 8001712:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
  htim6.Instance = TIM6;
 8001716:	4d58      	ldr	r5, [pc, #352]	@ (8001878 <main+0x340>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001718:	4033      	ands	r3, r6
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 4, 0);
 800171e:	f001 fd33 	bl	8003188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001722:	200b      	movs	r0, #11
 8001724:	f001 fd6c 	bl	8003200 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 4, 0);
 8001728:	4622      	mov	r2, r4
 800172a:	2104      	movs	r1, #4
 800172c:	200c      	movs	r0, #12
 800172e:	f001 fd2b 	bl	8003188 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001732:	200c      	movs	r0, #12
 8001734:	f001 fd64 	bl	8003200 <HAL_NVIC_EnableIRQ>
  htim6.Init.Prescaler = 100-1;
 8001738:	2363      	movs	r3, #99	@ 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	940b      	str	r4, [sp, #44]	@ 0x2c
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800173c:	4628      	mov	r0, r5
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	60ac      	str	r4, [r5, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001740:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
  htim6.Init.Prescaler = 100-1;
 8001746:	4c4d      	ldr	r4, [pc, #308]	@ (800187c <main+0x344>)
 8001748:	e9c5 4300 	strd	r4, r3, [r5]
  htim6.Init.Period = 50-1;
 800174c:	2331      	movs	r3, #49	@ 0x31
 800174e:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001750:	f006 f886 	bl	8007860 <HAL_TIM_Base_Init>
 8001754:	b108      	cbz	r0, 800175a <main+0x222>
 8001756:	b672      	cpsid	i
  while (1)
 8001758:	e7fe      	b.n	8001758 <main+0x220>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800175a:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800175c:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800175e:	a909      	add	r1, sp, #36	@ 0x24
 8001760:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001762:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001764:	f006 fa42 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 8001768:	b9b0      	cbnz	r0, 8001798 <main+0x260>
  huart4.Instance = UART4;
 800176a:	4c45      	ldr	r4, [pc, #276]	@ (8001880 <main+0x348>)
  huart4.Init.BaudRate = 31250;
 800176c:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8001770:	4944      	ldr	r1, [pc, #272]	@ (8001884 <main+0x34c>)
  huart4.Init.Parity = UART_PARITY_NONE;
 8001772:	6120      	str	r0, [r4, #16]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	62a0      	str	r0, [r4, #40]	@ 0x28
  huart4.Init.BaudRate = 31250;
 8001776:	e9c4 1300 	strd	r1, r3, [r4]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800177a:	230c      	movs	r3, #12
  huart4.Init.StopBits = UART_STOPBITS_1;
 800177c:	e9c4 0002 	strd	r0, r0, [r4, #8]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001780:	e9c4 0006 	strd	r0, r0, [r4, #24]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001784:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001788:	4620      	mov	r0, r4
  huart4.Init.Mode = UART_MODE_TX_RX;
 800178a:	6163      	str	r3, [r4, #20]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800178c:	f007 faec 	bl	8008d68 <HAL_UART_Init>
 8001790:	4601      	mov	r1, r0
 8001792:	b118      	cbz	r0, 800179c <main+0x264>
 8001794:	b672      	cpsid	i
  while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x25e>
 8001798:	b672      	cpsid	i
 800179a:	e7fe      	b.n	800179a <main+0x262>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800179c:	4620      	mov	r0, r4
 800179e:	f007 fb3b 	bl	8008e18 <HAL_UARTEx_SetTxFifoThreshold>
 80017a2:	4601      	mov	r1, r0
 80017a4:	b108      	cbz	r0, 80017aa <main+0x272>
 80017a6:	b672      	cpsid	i
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <main+0x270>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017aa:	4620      	mov	r0, r4
 80017ac:	f007 fb76 	bl	8008e9c <HAL_UARTEx_SetRxFifoThreshold>
 80017b0:	b108      	cbz	r0, 80017b6 <main+0x27e>
 80017b2:	b672      	cpsid	i
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <main+0x27c>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80017b6:	4620      	mov	r0, r4
 80017b8:	f007 fb10 	bl	8008ddc <HAL_UARTEx_DisableFifoMode>
 80017bc:	4603      	mov	r3, r0
 80017be:	b108      	cbz	r0, 80017c4 <main+0x28c>
 80017c0:	b672      	cpsid	i
  while (1)
 80017c2:	e7fe      	b.n	80017c2 <main+0x28a>
  hspi2.Instance = SPI2;
 80017c4:	4830      	ldr	r0, [pc, #192]	@ (8001888 <main+0x350>)
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80017ca:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017cc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80017d0:	6083      	str	r3, [r0, #8]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017d2:	61c2      	str	r2, [r0, #28]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d8:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80017da:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017dc:	60c7      	str	r7, [r0, #12]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017de:	e9c0 230d 	strd	r2, r3, [r0, #52]	@ 0x34
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4a29      	ldr	r2, [pc, #164]	@ (800188c <main+0x354>)
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e8:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017ec:	e9c0 330f 	strd	r3, r3, [r0, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017f0:	e9c0 3311 	strd	r3, r3, [r0, #68]	@ 0x44
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f4:	e9c0 3313 	strd	r3, r3, [r0, #76]	@ 0x4c
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017f8:	e9c0 3315 	strd	r3, r3, [r0, #84]	@ 0x54
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017fc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001800:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001804:	f005 ff54 	bl	80076b0 <HAL_SPI_Init>
 8001808:	4601      	mov	r1, r0
 800180a:	b108      	cbz	r0, 8001810 <main+0x2d8>
 800180c:	b672      	cpsid	i
  while (1)
 800180e:	e7fe      	b.n	800180e <main+0x2d6>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001810:	2224      	movs	r2, #36	@ 0x24
  hdac1.Instance = DAC1;
 8001812:	4c1f      	ldr	r4, [pc, #124]	@ (8001890 <main+0x358>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8001814:	eb0d 0002 	add.w	r0, sp, r2
 8001818:	f007 fb82 	bl	8008f20 <memset>
  hdac1.Instance = DAC1;
 800181c:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <main+0x35c>)
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800181e:	4620      	mov	r0, r4
  hdac1.Instance = DAC1;
 8001820:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001822:	f001 fd5f 	bl	80032e4 <HAL_DAC_Init>
 8001826:	4602      	mov	r2, r0
 8001828:	b3b0      	cbz	r0, 8001898 <main+0x360>
 800182a:	b672      	cpsid	i
  while (1)
 800182c:	e7fe      	b.n	800182c <main+0x2f4>
 800182e:	bf00      	nop
 8001830:	24000000 	.word	0x24000000
 8001834:	24003498 	.word	0x24003498
 8001838:	24003560 	.word	0x24003560
 800183c:	3daaaaab 	.word	0x3daaaaab
 8001840:	240033f0 	.word	0x240033f0
 8001844:	24003348 	.word	0x24003348
 8001848:	240032a0 	.word	0x240032a0
 800184c:	240031f8 	.word	0x240031f8
 8001850:	24003150 	.word	0x24003150
 8001854:	2400313c 	.word	0x2400313c
 8001858:	24002100 	.word	0x24002100
 800185c:	24002124 	.word	0x24002124
 8001860:	43dc0000 	.word	0x43dc0000
 8001864:	4102d012 	.word	0x4102d012
 8001868:	58024400 	.word	0x58024400
 800186c:	58021000 	.word	0x58021000
 8001870:	58020400 	.word	0x58020400
 8001874:	58020c00 	.word	0x58020c00
 8001878:	24003944 	.word	0x24003944
 800187c:	40001000 	.word	0x40001000
 8001880:	24003864 	.word	0x24003864
 8001884:	40004c00 	.word	0x40004c00
 8001888:	24003990 	.word	0x24003990
 800188c:	40003800 	.word	0x40003800
 8001890:	24003b08 	.word	0x24003b08
 8001894:	40007400 	.word	0x40007400
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001898:	2316      	movs	r3, #22
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800189a:	4620      	mov	r0, r4
 800189c:	a909      	add	r1, sp, #36	@ 0x24
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800189e:	9209      	str	r2, [sp, #36]	@ 0x24
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80018a0:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80018a2:	2302      	movs	r3, #2
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80018a4:	960c      	str	r6, [sp, #48]	@ 0x30
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80018a6:	920d      	str	r2, [sp, #52]	@ 0x34
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80018a8:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018aa:	f001 fdc7 	bl	800343c <HAL_DAC_ConfigChannel>
 80018ae:	b108      	cbz	r0, 80018b4 <main+0x37c>
 80018b0:	b672      	cpsid	i
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <main+0x37a>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80018b4:	2210      	movs	r2, #16
 80018b6:	a909      	add	r1, sp, #36	@ 0x24
 80018b8:	484c      	ldr	r0, [pc, #304]	@ (80019ec <main+0x4b4>)
 80018ba:	f001 fdbf 	bl	800343c <HAL_DAC_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	b108      	cbz	r0, 80018c6 <main+0x38e>
 80018c2:	b672      	cpsid	i
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <main+0x38c>
  htim7.Instance = TIM7;
 80018c6:	4c4a      	ldr	r4, [pc, #296]	@ (80019f0 <main+0x4b8>)
  htim7.Init.Prescaler = 240 - 1;
 80018c8:	22ef      	movs	r2, #239	@ 0xef
  htim7.Instance = TIM7;
 80018ca:	494a      	ldr	r1, [pc, #296]	@ (80019f4 <main+0x4bc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018cc:	900b      	str	r0, [sp, #44]	@ 0x2c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	60a3      	str	r3, [r4, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	61a3      	str	r3, [r4, #24]
  htim7.Init.Prescaler = 240 - 1;
 80018d2:	e9c4 1200 	strd	r1, r2, [r4]
  htim7.Init.Period = 5208;
 80018d6:	f241 4258 	movw	r2, #5208	@ 0x1458
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018da:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018de:	4620      	mov	r0, r4
  htim7.Init.Period = 5208;
 80018e0:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018e2:	f005 ffbd 	bl	8007860 <HAL_TIM_Base_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	b108      	cbz	r0, 80018ee <main+0x3b6>
 80018ea:	b672      	cpsid	i
  while (1)
 80018ec:	e7fe      	b.n	80018ec <main+0x3b4>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018ee:	a909      	add	r1, sp, #36	@ 0x24
 80018f0:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f2:	9309      	str	r3, [sp, #36]	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018f6:	f006 f979 	bl	8007bec <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	b108      	cbz	r0, 8001900 <main+0x3c8>
 80018fc:	b672      	cpsid	i
  while (1)
 80018fe:	e7fe      	b.n	80018fe <main+0x3c6>
  hadc3.Instance = ADC3;
 8001900:	4c3d      	ldr	r4, [pc, #244]	@ (80019f8 <main+0x4c0>)
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001902:	2504      	movs	r5, #4
  hadc3.Instance = ADC3;
 8001904:	4a3d      	ldr	r2, [pc, #244]	@ (80019fc <main+0x4c4>)
  hadc3.Init.NbrOfConversion = 1;
 8001906:	2601      	movs	r6, #1
  ADC_ChannelConfTypeDef sConfig = {0};
 8001908:	900f      	str	r0, [sp, #60]	@ 0x3c
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800190a:	82a0      	strh	r0, [r4, #20]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800190c:	7720      	strb	r0, [r4, #28]
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800190e:	6360      	str	r0, [r4, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001910:	f884 0038 	strb.w	r0, [r4, #56]	@ 0x38
  hadc3.Instance = ADC3;
 8001914:	6022      	str	r2, [r4, #0]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001916:	6125      	str	r5, [r4, #16]
  hadc3.Init.NbrOfConversion = 1;
 8001918:	61a6      	str	r6, [r4, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800191a:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800191e:	e9cd 000b 	strd	r0, r0, [sp, #44]	@ 0x2c
 8001922:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001926:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800192a:	e9c4 0009 	strd	r0, r0, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800192e:	e9c4 000b 	strd	r0, r0, [r4, #44]	@ 0x2c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001932:	4620      	mov	r0, r4
 8001934:	f001 fb00 	bl	8002f38 <HAL_ADC_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	b108      	cbz	r0, 8001940 <main+0x408>
 800193c:	b672      	cpsid	i
  while (1)
 800193e:	e7fe      	b.n	800193e <main+0x406>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001940:	2206      	movs	r2, #6
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001942:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001944:	a909      	add	r1, sp, #36	@ 0x24
 8001946:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001948:	920a      	str	r2, [sp, #40]	@ 0x28
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800194a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800194e:	950d      	str	r5, [sp, #52]	@ 0x34
  sConfig.Channel = ADC_CHANNEL_0;
 8001950:	9609      	str	r6, [sp, #36]	@ 0x24
  sConfig.Offset = 0;
 8001952:	930e      	str	r3, [sp, #56]	@ 0x38
  sConfig.OffsetSignedSaturation = DISABLE;
 8001954:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001958:	920c      	str	r2, [sp, #48]	@ 0x30
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800195a:	f000 ff0d 	bl	8002778 <HAL_ADC_ConfigChannel>
 800195e:	4605      	mov	r5, r0
 8001960:	b108      	cbz	r0, 8001966 <main+0x42e>
 8001962:	b672      	cpsid	i
  while (1)
 8001964:	e7fe      	b.n	8001964 <main+0x42c>
  HAL_UART_Receive_IT (&huart4, UART4_rxBuffer, 3);
 8001966:	2203      	movs	r2, #3
 8001968:	4925      	ldr	r1, [pc, #148]	@ (8001a00 <main+0x4c8>)
 800196a:	4826      	ldr	r0, [pc, #152]	@ (8001a04 <main+0x4cc>)
 800196c:	f006 f99e 	bl	8007cac <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001970:	4825      	ldr	r0, [pc, #148]	@ (8001a08 <main+0x4d0>)
 8001972:	f006 f81b 	bl	80079ac <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) master_buffer_l, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001976:	4629      	mov	r1, r5
 8001978:	2340      	movs	r3, #64	@ 0x40
 800197a:	4a24      	ldr	r2, [pc, #144]	@ (8001a0c <main+0x4d4>)
 800197c:	9500      	str	r5, [sp, #0]
 800197e:	481b      	ldr	r0, [pc, #108]	@ (80019ec <main+0x4b4>)
 8001980:	f001 fcc6 	bl	8003310 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t*) master_buffer_r, BUFFER_SIZE, DAC_ALIGN_12B_R);
 8001984:	2340      	movs	r3, #64	@ 0x40
 8001986:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <main+0x4d8>)
 8001988:	2110      	movs	r1, #16
 800198a:	9500      	str	r5, [sp, #0]
 800198c:	4817      	ldr	r0, [pc, #92]	@ (80019ec <main+0x4b4>)
 800198e:	f001 fcbf 	bl	8003310 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_IT(&hadc3);
 8001992:	4620      	mov	r0, r4
 8001994:	4e1f      	ldr	r6, [pc, #124]	@ (8001a14 <main+0x4dc>)
 8001996:	f001 f95f 	bl	8002c58 <HAL_ADC_Start_IT>
 800199a:	4d1f      	ldr	r5, [pc, #124]	@ (8001a18 <main+0x4e0>)
		  midi_playFile_tick(track2);
 800199c:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 8001a20 <main+0x4e8>
		  midi_playFile_tick(track1);
 80019a0:	4f1e      	ldr	r7, [pc, #120]	@ (8001a1c <main+0x4e4>)
 80019a2:	e005      	b.n	80019b0 <main+0x478>
	  }else if (trackPlaying == 2){
 80019a4:	7833      	ldrb	r3, [r6, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d014      	beq.n	80019d4 <main+0x49c>
	   HAL_ADC_Start_IT(&hadc3); 					//这个ADC采样率比较低，对于旋钮足够了
 80019aa:	4620      	mov	r0, r4
 80019ac:	f001 f954 	bl	8002c58 <HAL_ADC_Start_IT>
	  if(trackPlaying == 0){
 80019b0:	7833      	ldrb	r3, [r6, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f9      	beq.n	80019aa <main+0x472>
	  }else if (trackPlaying == 1){
 80019b6:	7833      	ldrb	r3, [r6, #0]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d1f3      	bne.n	80019a4 <main+0x46c>
		  midi_playFile_tick(track1);
 80019bc:	4638      	mov	r0, r7
 80019be:	f000 f99b 	bl	8001cf8 <midi_playFile_tick>
		  trackTime++;
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	602b      	str	r3, [r5, #0]
		  updateB3Freq();
 80019c8:	f7ff fc7a 	bl	80012c0 <updateB3Freq>
		  HAL_Delay(4);									//这个Delay影响播放速度，由于只能用毫秒所以定时器方案会更好一些
 80019cc:	2004      	movs	r0, #4
 80019ce:	f000 fd6d 	bl	80024ac <HAL_Delay>
 80019d2:	e7ea      	b.n	80019aa <main+0x472>
		  midi_playFile_tick(track2);
 80019d4:	4640      	mov	r0, r8
 80019d6:	f000 f98f 	bl	8001cf8 <midi_playFile_tick>
		  trackTime++;
 80019da:	682b      	ldr	r3, [r5, #0]
 80019dc:	3301      	adds	r3, #1
 80019de:	602b      	str	r3, [r5, #0]
		  updateB3Freq();
 80019e0:	f7ff fc6e 	bl	80012c0 <updateB3Freq>
		  HAL_Delay(3);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 fd61 	bl	80024ac <HAL_Delay>
 80019ea:	e7de      	b.n	80019aa <main+0x472>
 80019ec:	24003b08 	.word	0x24003b08
 80019f0:	240038f8 	.word	0x240038f8
 80019f4:	40001400 	.word	0x40001400
 80019f8:	24003b1c 	.word	0x24003b1c
 80019fc:	58026000 	.word	0x58026000
 8001a00:	24003760 	.word	0x24003760
 8001a04:	24003864 	.word	0x24003864
 8001a08:	24003944 	.word	0x24003944
 8001a0c:	240037e4 	.word	0x240037e4
 8001a10:	24003764 	.word	0x24003764
 8001a14:	24003559 	.word	0x24003559
 8001a18:	24003544 	.word	0x24003544
 8001a1c:	0800ba08 	.word	0x0800ba08
 8001a20:	08009330 	.word	0x08009330

08001a24 <Error_Handler>:
 8001a24:	b672      	cpsid	i
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <Error_Handler+0x2>

08001a28 <voicePool_noteOn>:
#include "midi.h"
extern volatile uint32_t trackTime;
extern volatile uint32_t trackIndex;
extern const midi_file track1[];
// 在新音符被演奏时调用
int voicePool_noteOn(uint8_t note, volatile voice voicePool[]) {
 8001a28:	b570      	push	{r4, r5, r6, lr}
    uint8_t maxTime = 0;

    // 遍历voicePool中所有的voice
    for (i = 0; i < 6; i++) {	//尝试分配当前未发声的voice
        // 如果复音正在使用，则time++
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a2a:	78cb      	ldrb	r3, [r1, #3]
int voicePool_noteOn(uint8_t note, volatile voice voicePool[]) {
 8001a2c:	4602      	mov	r2, r0
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d003      	beq.n	8001a3a <voicePool_noteOn+0x12>
 8001a32:	784b      	ldrb	r3, [r1, #1]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	f040 8088 	bne.w	8001b4a <voicePool_noteOn+0x122>
            voicePool[i].time++;
 8001a3a:	788b      	ldrb	r3, [r1, #2]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a3c:	f101 0c04 	add.w	ip, r1, #4
            voicePool[i].time++;
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	708b      	strb	r3, [r1, #2]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a46:	79cb      	ldrb	r3, [r1, #7]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d002      	beq.n	8001a52 <voicePool_noteOn+0x2a>
 8001a4c:	794b      	ldrb	r3, [r1, #5]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d17d      	bne.n	8001b4e <voicePool_noteOn+0x126>
            voicePool[i].time++;
 8001a52:	798b      	ldrb	r3, [r1, #6]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a54:	f101 0e08 	add.w	lr, r1, #8
            voicePool[i].time++;
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	718b      	strb	r3, [r1, #6]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a5e:	7acb      	ldrb	r3, [r1, #11]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d002      	beq.n	8001a6a <voicePool_noteOn+0x42>
 8001a64:	7a4b      	ldrb	r3, [r1, #9]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d174      	bne.n	8001b54 <voicePool_noteOn+0x12c>
            voicePool[i].time++;
 8001a6a:	7a8b      	ldrb	r3, [r1, #10]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a6c:	f101 000c 	add.w	r0, r1, #12
            voicePool[i].time++;
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	728b      	strb	r3, [r1, #10]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a76:	7bcb      	ldrb	r3, [r1, #15]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d002      	beq.n	8001a82 <voicePool_noteOn+0x5a>
 8001a7c:	7b4b      	ldrb	r3, [r1, #13]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d16b      	bne.n	8001b5a <voicePool_noteOn+0x132>
            voicePool[i].time++;
 8001a82:	7b8b      	ldrb	r3, [r1, #14]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a84:	f101 0410 	add.w	r4, r1, #16
            voicePool[i].time++;
 8001a88:	3301      	adds	r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	738b      	strb	r3, [r1, #14]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a8e:	7ccb      	ldrb	r3, [r1, #19]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d002      	beq.n	8001a9a <voicePool_noteOn+0x72>
 8001a94:	7c4b      	ldrb	r3, [r1, #17]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d162      	bne.n	8001b60 <voicePool_noteOn+0x138>
            voicePool[i].time++;
 8001a9a:	7c8b      	ldrb	r3, [r1, #18]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001a9c:	f101 0514 	add.w	r5, r1, #20
            voicePool[i].time++;
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	748b      	strb	r3, [r1, #18]
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001aa6:	7dcb      	ldrb	r3, [r1, #23]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d002      	beq.n	8001ab2 <voicePool_noteOn+0x8a>
 8001aac:	7d4b      	ldrb	r3, [r1, #21]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d143      	bne.n	8001b3a <voicePool_noteOn+0x112>
            voicePool[i].time++;
 8001ab2:	7d8b      	ldrb	r3, [r1, #22]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	758b      	strb	r3, [r1, #22]
        }
    }

    for (i = 0; i < 6; i++) {//尝试分配当前未使用的voice
        // 如果复音正在使用，则time++
        if (voicePool[i].on != 1) {// 未使用的复音
 8001aba:	784b      	ldrb	r3, [r1, #1]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d144      	bne.n	8001b4a <voicePool_noteOn+0x122>
 8001ac0:	794b      	ldrb	r3, [r1, #5]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d143      	bne.n	8001b4e <voicePool_noteOn+0x126>
 8001ac6:	7a4b      	ldrb	r3, [r1, #9]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d143      	bne.n	8001b54 <voicePool_noteOn+0x12c>
 8001acc:	7b4b      	ldrb	r3, [r1, #13]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d143      	bne.n	8001b5a <voicePool_noteOn+0x132>
 8001ad2:	7c4b      	ldrb	r3, [r1, #17]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d143      	bne.n	8001b60 <voicePool_noteOn+0x138>
 8001ad8:	7d4b      	ldrb	r3, [r1, #21]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d12d      	bne.n	8001b3a <voicePool_noteOn+0x112>
        	return i;
        }
    }
    // 如果没有未使用的复音，则找到time值最大的复音
    for (i = 0; i < 6; i++) {
        if (voicePool[i].time > maxTime) {
 8001ade:	7888      	ldrb	r0, [r1, #2]
 8001ae0:	f000 03ff 	and.w	r3, r0, #255	@ 0xff
 8001ae4:	b108      	cbz	r0, 8001aea <voicePool_noteOn+0xc2>
            maxTime = voicePool[i].time;
 8001ae6:	788b      	ldrb	r3, [r1, #2]
 8001ae8:	b2db      	uxtb	r3, r3
        if (voicePool[i].time > maxTime) {
 8001aea:	7988      	ldrb	r0, [r1, #6]
 8001aec:	4283      	cmp	r3, r0
 8001aee:	d320      	bcc.n	8001b32 <voicePool_noteOn+0x10a>
 8001af0:	2000      	movs	r0, #0
 8001af2:	7a8c      	ldrb	r4, [r1, #10]
 8001af4:	42a3      	cmp	r3, r4
 8001af6:	d202      	bcs.n	8001afe <voicePool_noteOn+0xd6>
            maxTime = voicePool[i].time;
 8001af8:	7a8b      	ldrb	r3, [r1, #10]
    for (i = 0; i < 6; i++) {
 8001afa:	2002      	movs	r0, #2
            maxTime = voicePool[i].time;
 8001afc:	b2db      	uxtb	r3, r3
        if (voicePool[i].time > maxTime) {
 8001afe:	7b8c      	ldrb	r4, [r1, #14]
 8001b00:	42a3      	cmp	r3, r4
 8001b02:	d202      	bcs.n	8001b0a <voicePool_noteOn+0xe2>
            maxTime = voicePool[i].time;
 8001b04:	7b8b      	ldrb	r3, [r1, #14]
    for (i = 0; i < 6; i++) {
 8001b06:	2003      	movs	r0, #3
            maxTime = voicePool[i].time;
 8001b08:	b2db      	uxtb	r3, r3
        if (voicePool[i].time > maxTime) {
 8001b0a:	7c8c      	ldrb	r4, [r1, #18]
 8001b0c:	42a3      	cmp	r3, r4
 8001b0e:	d202      	bcs.n	8001b16 <voicePool_noteOn+0xee>
            maxTime = voicePool[i].time;
 8001b10:	7c8b      	ldrb	r3, [r1, #18]
    for (i = 0; i < 6; i++) {
 8001b12:	2004      	movs	r0, #4
            maxTime = voicePool[i].time;
 8001b14:	b2db      	uxtb	r3, r3
        if (voicePool[i].time > maxTime) {
 8001b16:	7d8c      	ldrb	r4, [r1, #22]
 8001b18:	429c      	cmp	r4, r3
 8001b1a:	d901      	bls.n	8001b20 <voicePool_noteOn+0xf8>
            maxTime = voicePool[i].time;
 8001b1c:	7d8b      	ldrb	r3, [r1, #22]
    for (i = 0; i < 6; i++) {
 8001b1e:	2005      	movs	r0, #5
            maxTimeIndex = i;
        }
    }

    // 替换time值最大的复音
    voicePool[maxTimeIndex].note = note;
 8001b20:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
 8001b24:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    voicePool[maxTimeIndex].on = 1;
 8001b28:	2401      	movs	r4, #1
    voicePool[maxTimeIndex].time = 0; // 新音符的时间戳归零
 8001b2a:	2200      	movs	r2, #0
    voicePool[maxTimeIndex].on = 1;
 8001b2c:	705c      	strb	r4, [r3, #1]
    voicePool[maxTimeIndex].time = 0; // 新音符的时间戳归零
 8001b2e:	709a      	strb	r2, [r3, #2]
    return maxTimeIndex;
}
 8001b30:	bd70      	pop	{r4, r5, r6, pc}
            maxTime = voicePool[i].time;
 8001b32:	798b      	ldrb	r3, [r1, #6]
    for (i = 0; i < 6; i++) {
 8001b34:	2001      	movs	r0, #1
            maxTime = voicePool[i].time;
 8001b36:	b2db      	uxtb	r3, r3
            maxTimeIndex = i;
 8001b38:	e7db      	b.n	8001af2 <voicePool_noteOn+0xca>
        if (voicePool[i].on != 1) {// 未使用的复音
 8001b3a:	4629      	mov	r1, r5
    for (i = 0; i < 6; i++) {//尝试分配当前未使用的voice
 8001b3c:	2005      	movs	r0, #5
        	voicePool[i].on = 1;
 8001b3e:	2401      	movs	r4, #1
        	voicePool[i].time = 0; // 新音符的时间戳归零
 8001b40:	2300      	movs	r3, #0
        	voicePool[i].note = note;
 8001b42:	700a      	strb	r2, [r1, #0]
        	voicePool[i].on = 1;
 8001b44:	704c      	strb	r4, [r1, #1]
        	voicePool[i].time = 0; // 新音符的时间戳归零
 8001b46:	708b      	strb	r3, [r1, #2]
}
 8001b48:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < 6; i++) {//尝试分配当前未使用的voice
 8001b4a:	2000      	movs	r0, #0
 8001b4c:	e7f7      	b.n	8001b3e <voicePool_noteOn+0x116>
        if (voicePool[i].notOver == 1 || voicePool[i].on == 1) {
 8001b4e:	4661      	mov	r1, ip
    for (i = 0; i < 6; i++) {	//尝试分配当前未发声的voice
 8001b50:	2001      	movs	r0, #1
 8001b52:	e7f4      	b.n	8001b3e <voicePool_noteOn+0x116>
        if (voicePool[i].on != 1) {// 未使用的复音
 8001b54:	4671      	mov	r1, lr
    for (i = 0; i < 6; i++) {//尝试分配当前未使用的voice
 8001b56:	2002      	movs	r0, #2
 8001b58:	e7f1      	b.n	8001b3e <voicePool_noteOn+0x116>
        if (voicePool[i].on != 1) {// 未使用的复音
 8001b5a:	4601      	mov	r1, r0
    for (i = 0; i < 6; i++) {//尝试分配当前未使用的voice
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	e7ee      	b.n	8001b3e <voicePool_noteOn+0x116>
        if (voicePool[i].on != 1) {// 未使用的复音
 8001b60:	4621      	mov	r1, r4
    for (i = 0; i < 6; i++) {//尝试分配当前未使用的voice
 8001b62:	2004      	movs	r0, #4
 8001b64:	e7eb      	b.n	8001b3e <voicePool_noteOn+0x116>
 8001b66:	bf00      	nop

08001b68 <voicePool_noteOff>:

// 在音符停止演奏时调用，遍历voicePool，找到note值与传入note值相同的voice停止
void voicePool_noteOff(uint8_t note, volatile voice voicePool[]) {
    int i;
    for (i = 0; i < 6; i++) {
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001b68:	780b      	ldrb	r3, [r1, #0]
 8001b6a:	4298      	cmp	r0, r3
 8001b6c:	d00f      	beq.n	8001b8e <voicePool_noteOff+0x26>
 8001b6e:	790b      	ldrb	r3, [r1, #4]
 8001b70:	4298      	cmp	r0, r3
 8001b72:	d015      	beq.n	8001ba0 <voicePool_noteOff+0x38>
 8001b74:	7a0b      	ldrb	r3, [r1, #8]
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d01b      	beq.n	8001bb2 <voicePool_noteOff+0x4a>
 8001b7a:	7b0b      	ldrb	r3, [r1, #12]
 8001b7c:	4298      	cmp	r0, r3
 8001b7e:	d021      	beq.n	8001bc4 <voicePool_noteOff+0x5c>
 8001b80:	7c0b      	ldrb	r3, [r1, #16]
 8001b82:	4298      	cmp	r0, r3
 8001b84:	d027      	beq.n	8001bd6 <voicePool_noteOff+0x6e>
 8001b86:	7d0b      	ldrb	r3, [r1, #20]
 8001b88:	4283      	cmp	r3, r0
 8001b8a:	d02d      	beq.n	8001be8 <voicePool_noteOff+0x80>
            voicePool[i].on = 0;
            voicePool[i].time = 0; // 停止演奏后time归零
        }
    }
}
 8001b8c:	4770      	bx	lr
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001b8e:	784b      	ldrb	r3, [r1, #1]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d1ec      	bne.n	8001b6e <voicePool_noteOff+0x6>
            voicePool[i].on = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	704b      	strb	r3, [r1, #1]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001b98:	708b      	strb	r3, [r1, #2]
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001b9a:	790b      	ldrb	r3, [r1, #4]
 8001b9c:	4298      	cmp	r0, r3
 8001b9e:	d1e9      	bne.n	8001b74 <voicePool_noteOff+0xc>
 8001ba0:	794b      	ldrb	r3, [r1, #5]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d1e6      	bne.n	8001b74 <voicePool_noteOff+0xc>
            voicePool[i].on = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	714b      	strb	r3, [r1, #5]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001baa:	718b      	strb	r3, [r1, #6]
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001bac:	7a0b      	ldrb	r3, [r1, #8]
 8001bae:	4298      	cmp	r0, r3
 8001bb0:	d1e3      	bne.n	8001b7a <voicePool_noteOff+0x12>
 8001bb2:	7a4b      	ldrb	r3, [r1, #9]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d1e0      	bne.n	8001b7a <voicePool_noteOff+0x12>
            voicePool[i].on = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	724b      	strb	r3, [r1, #9]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001bbc:	728b      	strb	r3, [r1, #10]
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001bbe:	7b0b      	ldrb	r3, [r1, #12]
 8001bc0:	4298      	cmp	r0, r3
 8001bc2:	d1dd      	bne.n	8001b80 <voicePool_noteOff+0x18>
 8001bc4:	7b4b      	ldrb	r3, [r1, #13]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d1da      	bne.n	8001b80 <voicePool_noteOff+0x18>
            voicePool[i].on = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	734b      	strb	r3, [r1, #13]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001bce:	738b      	strb	r3, [r1, #14]
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001bd0:	7c0b      	ldrb	r3, [r1, #16]
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d1d7      	bne.n	8001b86 <voicePool_noteOff+0x1e>
 8001bd6:	7c4b      	ldrb	r3, [r1, #17]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d1d4      	bne.n	8001b86 <voicePool_noteOff+0x1e>
            voicePool[i].on = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	744b      	strb	r3, [r1, #17]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001be0:	748b      	strb	r3, [r1, #18]
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001be2:	7d0b      	ldrb	r3, [r1, #20]
 8001be4:	4283      	cmp	r3, r0
 8001be6:	d1d1      	bne.n	8001b8c <voicePool_noteOff+0x24>
 8001be8:	7d4b      	ldrb	r3, [r1, #21]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d1ce      	bne.n	8001b8c <voicePool_noteOff+0x24>
            voicePool[i].on = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	754b      	strb	r3, [r1, #21]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001bf2:	758b      	strb	r3, [r1, #22]
}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop

08001bf8 <voicePool_panic>:
void voicePool_panic(){				//一键停止所有音符
    for (int i = 0; i < 6; i++) {
            voicePool[i].on = 0;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <voicePool_panic+0x20>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	705a      	strb	r2, [r3, #1]
            voicePool[i].time = 0;
 8001bfe:	709a      	strb	r2, [r3, #2]
            voicePool[i].on = 0;
 8001c00:	715a      	strb	r2, [r3, #5]
            voicePool[i].time = 0;
 8001c02:	719a      	strb	r2, [r3, #6]
            voicePool[i].on = 0;
 8001c04:	725a      	strb	r2, [r3, #9]
            voicePool[i].time = 0;
 8001c06:	729a      	strb	r2, [r3, #10]
            voicePool[i].on = 0;
 8001c08:	735a      	strb	r2, [r3, #13]
            voicePool[i].time = 0;
 8001c0a:	739a      	strb	r2, [r3, #14]
            voicePool[i].on = 0;
 8001c0c:	745a      	strb	r2, [r3, #17]
            voicePool[i].time = 0;
 8001c0e:	749a      	strb	r2, [r3, #18]
            voicePool[i].on = 0;
 8001c10:	755a      	strb	r2, [r3, #21]
            voicePool[i].time = 0;
 8001c12:	759a      	strb	r2, [r3, #22]
    }
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	240020e8 	.word	0x240020e8

08001c1c <midi_cc>:
void midi_cc(uint8_t cc, uint8_t value){
	switch(cc){
 8001c1c:	3801      	subs	r0, #1
 8001c1e:	2815      	cmp	r0, #21
 8001c20:	d813      	bhi.n	8001c4a <midi_cc+0x2e>
 8001c22:	e8df f000 	tbb	[pc, r0]
 8001c26:	1213      	.short	0x1213
 8001c28:	12121212 	.word	0x12121212
 8001c2c:	12121212 	.word	0x12121212
 8001c30:	21121212 	.word	0x21121212
 8001c34:	41393129 	.word	0x41393129
 8001c38:	0b595149 	.word	0x0b595149
	case 17: B3_OscVol[3] = (uint8_t)(value/14);break;
	case 18: B3_OscVol[4] = (uint8_t)(value/14);break;
	case 19: B3_OscVol[5] = (uint8_t)(value/14);break;
	case 20: B3_OscVol[6] = (uint8_t)(value/14);break;
	case 21: B3_OscVol[7] = (uint8_t)(value/14);break;
	case 22: B3_OscVol[8] = (uint8_t)(value/14);break;
 8001c3c:	0849      	lsrs	r1, r1, #1
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce8 <midi_cc+0xcc>)
 8001c40:	4a2a      	ldr	r2, [pc, #168]	@ (8001cec <midi_cc+0xd0>)
 8001c42:	fba3 3101 	umull	r3, r1, r3, r1
 8001c46:	0889      	lsrs	r1, r1, #2
 8001c48:	7211      	strb	r1, [r2, #8]
	}
}
 8001c4a:	4770      	bx	lr
	case 1: LFO1_Rate = (float)(0.5 + 10.0f * value/127.0f);break;
 8001c4c:	ee07 1a90 	vmov	s15, r1
 8001c50:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c54:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001cf0 <midi_cc+0xd4>
 8001c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5c:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <midi_cc+0xd8>)
 8001c5e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001c62:	ed83 7a00 	vstr	s14, [r3]
 8001c66:	4770      	bx	lr
	case 14: B3_OscVol[0] = (uint8_t)(value/14);break;
 8001c68:	0849      	lsrs	r1, r1, #1
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce8 <midi_cc+0xcc>)
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <midi_cc+0xd0>)
 8001c6e:	fba3 3101 	umull	r3, r1, r3, r1
 8001c72:	0889      	lsrs	r1, r1, #2
 8001c74:	7011      	strb	r1, [r2, #0]
 8001c76:	4770      	bx	lr
	case 15: B3_OscVol[1] = (uint8_t)(value/14);break;
 8001c78:	0849      	lsrs	r1, r1, #1
 8001c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ce8 <midi_cc+0xcc>)
 8001c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <midi_cc+0xd0>)
 8001c7e:	fba3 3101 	umull	r3, r1, r3, r1
 8001c82:	0889      	lsrs	r1, r1, #2
 8001c84:	7051      	strb	r1, [r2, #1]
 8001c86:	4770      	bx	lr
	case 16: B3_OscVol[2] = (uint8_t)(value/14);break;
 8001c88:	0849      	lsrs	r1, r1, #1
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <midi_cc+0xcc>)
 8001c8c:	4a17      	ldr	r2, [pc, #92]	@ (8001cec <midi_cc+0xd0>)
 8001c8e:	fba3 3101 	umull	r3, r1, r3, r1
 8001c92:	0889      	lsrs	r1, r1, #2
 8001c94:	7091      	strb	r1, [r2, #2]
 8001c96:	4770      	bx	lr
	case 17: B3_OscVol[3] = (uint8_t)(value/14);break;
 8001c98:	0849      	lsrs	r1, r1, #1
 8001c9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ce8 <midi_cc+0xcc>)
 8001c9c:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <midi_cc+0xd0>)
 8001c9e:	fba3 3101 	umull	r3, r1, r3, r1
 8001ca2:	0889      	lsrs	r1, r1, #2
 8001ca4:	70d1      	strb	r1, [r2, #3]
 8001ca6:	4770      	bx	lr
	case 18: B3_OscVol[4] = (uint8_t)(value/14);break;
 8001ca8:	0849      	lsrs	r1, r1, #1
 8001caa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <midi_cc+0xcc>)
 8001cac:	4a0f      	ldr	r2, [pc, #60]	@ (8001cec <midi_cc+0xd0>)
 8001cae:	fba3 3101 	umull	r3, r1, r3, r1
 8001cb2:	0889      	lsrs	r1, r1, #2
 8001cb4:	7111      	strb	r1, [r2, #4]
 8001cb6:	4770      	bx	lr
	case 19: B3_OscVol[5] = (uint8_t)(value/14);break;
 8001cb8:	0849      	lsrs	r1, r1, #1
 8001cba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce8 <midi_cc+0xcc>)
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cec <midi_cc+0xd0>)
 8001cbe:	fba3 3101 	umull	r3, r1, r3, r1
 8001cc2:	0889      	lsrs	r1, r1, #2
 8001cc4:	7151      	strb	r1, [r2, #5]
 8001cc6:	4770      	bx	lr
	case 20: B3_OscVol[6] = (uint8_t)(value/14);break;
 8001cc8:	0849      	lsrs	r1, r1, #1
 8001cca:	4b07      	ldr	r3, [pc, #28]	@ (8001ce8 <midi_cc+0xcc>)
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <midi_cc+0xd0>)
 8001cce:	fba3 3101 	umull	r3, r1, r3, r1
 8001cd2:	0889      	lsrs	r1, r1, #2
 8001cd4:	7191      	strb	r1, [r2, #6]
 8001cd6:	4770      	bx	lr
	case 21: B3_OscVol[7] = (uint8_t)(value/14);break;
 8001cd8:	0849      	lsrs	r1, r1, #1
 8001cda:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <midi_cc+0xcc>)
 8001cdc:	4a03      	ldr	r2, [pc, #12]	@ (8001cec <midi_cc+0xd0>)
 8001cde:	fba3 3101 	umull	r3, r1, r3, r1
 8001ce2:	0889      	lsrs	r1, r1, #2
 8001ce4:	71d1      	strb	r1, [r2, #7]
 8001ce6:	4770      	bx	lr
 8001ce8:	92492493 	.word	0x92492493
 8001cec:	24002054 	.word	0x24002054
 8001cf0:	3da14285 	.word	0x3da14285
 8001cf4:	24002060 	.word	0x24002060

08001cf8 <midi_playFile_tick>:
void midi_playFile(const midi_file track[]){
	midi_setTiming(96, 500000);
	HAL_TIM_Base_Start_IT(&htim7);
}

void midi_playFile_tick(const midi_file track1[]){
 8001cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(track1[trackIndex].time <= trackTime){
 8001cfc:	4c56      	ldr	r4, [pc, #344]	@ (8001e58 <midi_playFile_tick+0x160>)
 8001cfe:	f8df 9160 	ldr.w	r9, [pc, #352]	@ 8001e60 <midi_playFile_tick+0x168>
 8001d02:	6823      	ldr	r3, [r4, #0]
 8001d04:	f8d9 2000 	ldr.w	r2, [r9]
 8001d08:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d34a      	bcc.n	8001da6 <midi_playFile_tick+0xae>
 8001d10:	4605      	mov	r5, r0
			trackIndex++;
		}else if(track1[trackIndex].msg == Note_off_c){
			voicePool_noteOff(track1[trackIndex].note, voicePool);
			trackIndex++;
		}else if(track1[trackIndex].msg == End_track){
			HAL_TIM_Base_Stop_IT(&htim7);
 8001d12:	4f52      	ldr	r7, [pc, #328]	@ (8001e5c <midi_playFile_tick+0x164>)
			trackIndex = 0;
 8001d14:	2600      	movs	r6, #0
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001d16:	f8df 814c 	ldr.w	r8, [pc, #332]	@ 8001e64 <midi_playFile_tick+0x16c>
 8001d1a:	e012      	b.n	8001d42 <midi_playFile_tick+0x4a>
		}else if(track1[trackIndex].msg == End_track){
 8001d1c:	6823      	ldr	r3, [r4, #0]
 8001d1e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001d22:	791b      	ldrb	r3, [r3, #4]
 8001d24:	2b09      	cmp	r3, #9
 8001d26:	d04a      	beq.n	8001dbe <midi_playFile_tick+0xc6>
			trackTime = 0;
		}else if(track1[trackIndex].msg == Control_c){
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d04b      	beq.n	8001dcc <midi_playFile_tick+0xd4>
	if(track1[trackIndex].time <= trackTime){
 8001d34:	6822      	ldr	r2, [r4, #0]
 8001d36:	f8d9 3000 	ldr.w	r3, [r9]
 8001d3a:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d831      	bhi.n	8001da6 <midi_playFile_tick+0xae>
		if(track1[trackIndex].msg == Note_on_c){
 8001d42:	6823      	ldr	r3, [r4, #0]
 8001d44:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001d48:	791b      	ldrb	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
			voicePool_noteOn(track1[trackIndex].note, voicePool);
 8001d4c:	6823      	ldr	r3, [r4, #0]
		if(track1[trackIndex].msg == Note_on_c){
 8001d4e:	d02c      	beq.n	8001daa <midi_playFile_tick+0xb2>
		}else if(track1[trackIndex].msg == Note_off_c){
 8001d50:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001d54:	791b      	ldrb	r3, [r3, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1e0      	bne.n	8001d1c <midi_playFile_tick+0x24>
			voicePool_noteOff(track1[trackIndex].note, voicePool);
 8001d5a:	6822      	ldr	r2, [r4, #0]
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001d5c:	f898 1000 	ldrb.w	r1, [r8]
			voicePool_noteOff(track1[trackIndex].note, voicePool);
 8001d60:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8001d64:	7992      	ldrb	r2, [r2, #6]
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001d66:	428a      	cmp	r2, r1
 8001d68:	d06d      	beq.n	8001e46 <midi_playFile_tick+0x14e>
 8001d6a:	f898 3004 	ldrb.w	r3, [r8, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d05f      	beq.n	8001e32 <midi_playFile_tick+0x13a>
 8001d72:	f898 3008 	ldrb.w	r3, [r8, #8]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d051      	beq.n	8001e1e <midi_playFile_tick+0x126>
 8001d7a:	f898 300c 	ldrb.w	r3, [r8, #12]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d043      	beq.n	8001e0a <midi_playFile_tick+0x112>
 8001d82:	f898 3010 	ldrb.w	r3, [r8, #16]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d035      	beq.n	8001df6 <midi_playFile_tick+0xfe>
 8001d8a:	f898 3014 	ldrb.w	r3, [r8, #20]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d027      	beq.n	8001de2 <midi_playFile_tick+0xea>
			midi_cc(track1[trackIndex].note, track1[trackIndex].velocity);
			trackIndex++;
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	3301      	adds	r3, #1
 8001d96:	6023      	str	r3, [r4, #0]
	if(track1[trackIndex].time <= trackTime){
 8001d98:	6822      	ldr	r2, [r4, #0]
 8001d9a:	f8d9 3000 	ldr.w	r3, [r9]
 8001d9e:	f855 2032 	ldr.w	r2, [r5, r2, lsl #3]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d9cd      	bls.n	8001d42 <midi_playFile_tick+0x4a>
		}
		midi_playFile_tick(track1);
	} else{
		return;
	}
}
 8001da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			voicePool_noteOn(track1[trackIndex].note, voicePool);
 8001daa:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001dae:	4641      	mov	r1, r8
 8001db0:	7998      	ldrb	r0, [r3, #6]
 8001db2:	f7ff fe39 	bl	8001a28 <voicePool_noteOn>
			trackIndex++;
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	6023      	str	r3, [r4, #0]
 8001dbc:	e7ba      	b.n	8001d34 <midi_playFile_tick+0x3c>
			HAL_TIM_Base_Stop_IT(&htim7);
 8001dbe:	4638      	mov	r0, r7
 8001dc0:	f005 fe46 	bl	8007a50 <HAL_TIM_Base_Stop_IT>
			trackIndex = 0;
 8001dc4:	6026      	str	r6, [r4, #0]
			trackTime = 0;
 8001dc6:	f8c9 6000 	str.w	r6, [r9]
 8001dca:	e7b3      	b.n	8001d34 <midi_playFile_tick+0x3c>
			midi_cc(track1[trackIndex].note, track1[trackIndex].velocity);
 8001dcc:	6823      	ldr	r3, [r4, #0]
 8001dce:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001dd2:	7998      	ldrb	r0, [r3, #6]
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 8001dda:	79d9      	ldrb	r1, [r3, #7]
 8001ddc:	f7ff ff1e 	bl	8001c1c <midi_cc>
 8001de0:	e7d7      	b.n	8001d92 <midi_playFile_tick+0x9a>
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001de2:	f898 3015 	ldrb.w	r3, [r8, #21]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d1d3      	bne.n	8001d92 <midi_playFile_tick+0x9a>
            voicePool[i].on = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f888 3015 	strb.w	r3, [r8, #21]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001df0:	f888 3016 	strb.w	r3, [r8, #22]
			trackIndex++;
 8001df4:	e7cd      	b.n	8001d92 <midi_playFile_tick+0x9a>
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001df6:	f898 3011 	ldrb.w	r3, [r8, #17]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d1c5      	bne.n	8001d8a <midi_playFile_tick+0x92>
            voicePool[i].on = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	f888 3011 	strb.w	r3, [r8, #17]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001e04:	f888 3012 	strb.w	r3, [r8, #18]
 8001e08:	e7bf      	b.n	8001d8a <midi_playFile_tick+0x92>
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001e0a:	f898 300d 	ldrb.w	r3, [r8, #13]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d1b7      	bne.n	8001d82 <midi_playFile_tick+0x8a>
            voicePool[i].on = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f888 300d 	strb.w	r3, [r8, #13]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001e18:	f888 300e 	strb.w	r3, [r8, #14]
 8001e1c:	e7b1      	b.n	8001d82 <midi_playFile_tick+0x8a>
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001e1e:	f898 3009 	ldrb.w	r3, [r8, #9]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d1a9      	bne.n	8001d7a <midi_playFile_tick+0x82>
            voicePool[i].on = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f888 3009 	strb.w	r3, [r8, #9]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001e2c:	f888 300a 	strb.w	r3, [r8, #10]
 8001e30:	e7a3      	b.n	8001d7a <midi_playFile_tick+0x82>
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001e32:	f898 3005 	ldrb.w	r3, [r8, #5]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d19b      	bne.n	8001d72 <midi_playFile_tick+0x7a>
            voicePool[i].on = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f888 3005 	strb.w	r3, [r8, #5]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001e40:	f888 3006 	strb.w	r3, [r8, #6]
 8001e44:	e795      	b.n	8001d72 <midi_playFile_tick+0x7a>
        if (voicePool[i].note == note && voicePool[i].on == 1) {
 8001e46:	f898 1001 	ldrb.w	r1, [r8, #1]
 8001e4a:	2901      	cmp	r1, #1
 8001e4c:	d18d      	bne.n	8001d6a <midi_playFile_tick+0x72>
            voicePool[i].on = 0;
 8001e4e:	f888 3001 	strb.w	r3, [r8, #1]
            voicePool[i].time = 0; // 停止演奏后time归零
 8001e52:	f888 3002 	strb.w	r3, [r8, #2]
 8001e56:	e788      	b.n	8001d6a <midi_playFile_tick+0x72>
 8001e58:	24003540 	.word	0x24003540
 8001e5c:	240038f8 	.word	0x240038f8
 8001e60:	24003544 	.word	0x24003544
 8001e64:	240020e8 	.word	0x240020e8

08001e68 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e68:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <HAL_MspInit+0x20>)
{
 8001e6a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e6c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001e70:	f042 0202 	orr.w	r2, r2, #2
 8001e74:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001e78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e84:	b002      	add	sp, #8
 8001e86:	4770      	bx	lr
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	00000000 	.word	0x00000000

08001e90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e90:	b510      	push	{r4, lr}
 8001e92:	b0b2      	sub	sp, #200	@ 0xc8
 8001e94:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e96:	22c0      	movs	r2, #192	@ 0xc0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	a802      	add	r0, sp, #8
 8001e9c:	f007 f840 	bl	8008f20 <memset>
  if(hadc->Instance==ADC3)
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <HAL_ADC_MspInit+0x90>)
 8001ea2:	6822      	ldr	r2, [r4, #0]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d001      	beq.n	8001eac <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ea8:	b032      	add	sp, #200	@ 0xc8
 8001eaa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eac:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 8001f18 <HAL_ADC_MspInit+0x88>
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb4:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001eb6:	ed8d 7b02 	vstr	d7, [sp, #8]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001eba:	932b      	str	r3, [sp, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ebc:	f004 f8f6 	bl	80060ac <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	bb38      	cbnz	r0, 8001f12 <HAL_ADC_MspInit+0x82>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ec2:	4b18      	ldr	r3, [pc, #96]	@ (8001f24 <HAL_ADC_MspInit+0x94>)
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001ec4:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ec8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001ecc:	4608      	mov	r0, r1
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001ece:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001ed2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001ed6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001eda:	f002 7280 	and.w	r2, r2, #16777216	@ 0x1000000
 8001ede:	9200      	str	r2, [sp, #0]
 8001ee0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001ee6:	f042 0204 	orr.w	r2, r2, #4
 8001eea:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	9b01      	ldr	r3, [sp, #4]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001efa:	f000 faef 	bl	80024dc <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	207f      	movs	r0, #127	@ 0x7f
 8001f02:	4611      	mov	r1, r2
 8001f04:	f001 f940 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001f08:	207f      	movs	r0, #127	@ 0x7f
 8001f0a:	f001 f979 	bl	8003200 <HAL_NVIC_EnableIRQ>
}
 8001f0e:	b032      	add	sp, #200	@ 0xc8
 8001f10:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001f12:	f7ff fd87 	bl	8001a24 <Error_Handler>
 8001f16:	e7d4      	b.n	8001ec2 <HAL_ADC_MspInit+0x32>
 8001f18:	00080000 	.word	0x00080000
 8001f1c:	00000000 	.word	0x00000000
 8001f20:	58026000 	.word	0x58026000
 8001f24:	58024400 	.word	0x58024400

08001f28 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 8001f28:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_DAC_MspInit+0xec>)
 8001f2a:	6802      	ldr	r2, [r0, #0]
{
 8001f2c:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC1)
 8001f2e:	429a      	cmp	r2, r3
{
 8001f30:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f32:	f04f 0400 	mov.w	r4, #0
 8001f36:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001f3a:	9404      	str	r4, [sp, #16]
 8001f3c:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC1)
 8001f40:	d001      	beq.n	8001f46 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001f42:	b008      	add	sp, #32
 8001f44:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001f46:	4b34      	ldr	r3, [pc, #208]	@ (8002018 <HAL_DAC_MspInit+0xf0>)
 8001f48:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	a902      	add	r1, sp, #8
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001f4c:	4e33      	ldr	r6, [pc, #204]	@ (800201c <HAL_DAC_MspInit+0xf4>)
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001f4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001f52:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8001f56:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001f5a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001f5e:	f002 5200 	and.w	r2, r2, #536870912	@ 0x20000000
 8001f62:	9200      	str	r2, [sp, #0]
 8001f64:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f66:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f72:	2230      	movs	r2, #48	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f7e:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f80:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	4827      	ldr	r0, [pc, #156]	@ (8002020 <HAL_DAC_MspInit+0xf8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f84:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f003 f848 	bl	800501c <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001f8c:	4a25      	ldr	r2, [pc, #148]	@ (8002024 <HAL_DAC_MspInit+0xfc>)
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f8e:	2343      	movs	r3, #67	@ 0x43
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001f90:	4630      	mov	r0, r6
    hdma_dac1_ch1.Instance = DMA1_Stream0;
 8001f92:	6032      	str	r2, [r6, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f94:	2240      	movs	r2, #64	@ 0x40
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8001f96:	6073      	str	r3, [r6, #4]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001f98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f9c:	60b2      	str	r2, [r6, #8]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001fa2:	6133      	str	r3, [r6, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa8:	60f4      	str	r4, [r6, #12]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001faa:	6274      	str	r4, [r6, #36]	@ 0x24
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fac:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001fb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb8:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001fbc:	f001 fbf0 	bl	80037a0 <HAL_DMA_Init>
 8001fc0:	bb10      	cbnz	r0, 8002008 <HAL_DAC_MspInit+0xe0>
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001fc2:	4c19      	ldr	r4, [pc, #100]	@ (8002028 <HAL_DAC_MspInit+0x100>)
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001fc4:	2244      	movs	r2, #68	@ 0x44
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fc6:	2300      	movs	r3, #0
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001fc8:	60ae      	str	r6, [r5, #8]
    hdma_dac1_ch2.Init.Request = DMA_REQUEST_DAC2;
 8001fca:	6062      	str	r2, [r4, #4]
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001fd0:	4916      	ldr	r1, [pc, #88]	@ (800202c <HAL_DAC_MspInit+0x104>)
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001fd2:	4620      	mov	r0, r4
    hdma_dac1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd4:	60e3      	str	r3, [r4, #12]
    hdma_dac1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd6:	6263      	str	r3, [r4, #36]	@ 0x24
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    hdma_dac1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001fdc:	6122      	str	r2, [r4, #16]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    hdma_dac1_ch2.Instance = DMA1_Stream1;
 8001fe2:	6021      	str	r1, [r4, #0]
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe4:	2140      	movs	r1, #64	@ 0x40
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001fe6:	63b5      	str	r5, [r6, #56]	@ 0x38
    hdma_dac1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fe8:	60a1      	str	r1, [r4, #8]
    hdma_dac1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fea:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_dac1_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001fee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ff6:	e9c4 2307 	strd	r2, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch2) != HAL_OK)
 8001ffa:	f001 fbd1 	bl	80037a0 <HAL_DMA_Init>
 8001ffe:	b930      	cbnz	r0, 800200e <HAL_DAC_MspInit+0xe6>
    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac1_ch2);
 8002000:	60ec      	str	r4, [r5, #12]
 8002002:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8002004:	b008      	add	sp, #32
 8002006:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8002008:	f7ff fd0c 	bl	8001a24 <Error_Handler>
 800200c:	e7d9      	b.n	8001fc2 <HAL_DAC_MspInit+0x9a>
      Error_Handler();
 800200e:	f7ff fd09 	bl	8001a24 <Error_Handler>
 8002012:	e7f5      	b.n	8002000 <HAL_DAC_MspInit+0xd8>
 8002014:	40007400 	.word	0x40007400
 8002018:	58024400 	.word	0x58024400
 800201c:	24003a90 	.word	0x24003a90
 8002020:	58020000 	.word	0x58020000
 8002024:	40020010 	.word	0x40020010
 8002028:	24003a18 	.word	0x24003a18
 800202c:	40020028 	.word	0x40020028

08002030 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002030:	b5d0      	push	{r4, r6, r7, lr}
 8002032:	b0ba      	sub	sp, #232	@ 0xe8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	2100      	movs	r1, #0
{
 8002036:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002038:	22c0      	movs	r2, #192	@ 0xc0
 800203a:	a80a      	add	r0, sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	9108      	str	r1, [sp, #32]
 800203e:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8002042:	e9cd 1106 	strd	r1, r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002046:	f006 ff6b 	bl	8008f20 <memset>
  if(hspi->Instance==SPI2)
 800204a:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <HAL_SPI_MspInit+0xc8>)
 800204c:	6822      	ldr	r2, [r4, #0]
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_SPI_MspInit+0x26>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002052:	b03a      	add	sp, #232	@ 0xe8
 8002054:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002056:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800205a:	2700      	movs	r7, #0
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800205c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002060:	a80a      	add	r0, sp, #40	@ 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002062:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002066:	9322      	str	r3, [sp, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002068:	f004 f820 	bl	80060ac <HAL_RCCEx_PeriphCLKConfig>
 800206c:	2800      	cmp	r0, #0
 800206e:	d140      	bne.n	80020f2 <HAL_SPI_MspInit+0xc2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002070:	4b22      	ldr	r3, [pc, #136]	@ (80020fc <HAL_SPI_MspInit+0xcc>)
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002072:	2002      	movs	r0, #2
 8002074:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002076:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002078:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800207c:	2600      	movs	r6, #0
 800207e:	2703      	movs	r7, #3
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002084:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8002088:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 800208c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002090:	9201      	str	r2, [sp, #4]
 8002092:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002094:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8002098:	f042 0204 	orr.w	r2, r2, #4
 800209c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80020a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80020a4:	f002 0204 	and.w	r2, r2, #4
 80020a8:	9202      	str	r2, [sp, #8]
 80020aa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80020b0:	f042 0202 	orr.w	r2, r2, #2
 80020b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020bc:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020be:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c8:	a904      	add	r1, sp, #16
 80020ca:	480d      	ldr	r0, [pc, #52]	@ (8002100 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020cc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80020ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020d2:	f002 ffa3 	bl	800501c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80020d6:	f44f 4288 	mov.w	r2, #17408	@ 0x4400
 80020da:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020dc:	a904      	add	r1, sp, #16
 80020de:	4809      	ldr	r0, [pc, #36]	@ (8002104 <HAL_SPI_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020e0:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14;
 80020e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80020e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f002 ff97 	bl	800501c <HAL_GPIO_Init>
}
 80020ee:	b03a      	add	sp, #232	@ 0xe8
 80020f0:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80020f2:	f7ff fc97 	bl	8001a24 <Error_Handler>
 80020f6:	e7bb      	b.n	8002070 <HAL_SPI_MspInit+0x40>
 80020f8:	40003800 	.word	0x40003800
 80020fc:	58024400 	.word	0x58024400
 8002100:	58020800 	.word	0x58020800
 8002104:	58020400 	.word	0x58020400

08002108 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM6)
 8002108:	4a18      	ldr	r2, [pc, #96]	@ (800216c <HAL_TIM_Base_MspInit+0x64>)
 800210a:	6803      	ldr	r3, [r0, #0]
 800210c:	4293      	cmp	r3, r2
{
 800210e:	b510      	push	{r4, lr}
 8002110:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM6)
 8002112:	d004      	beq.n	800211e <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8002114:	4a16      	ldr	r2, [pc, #88]	@ (8002170 <HAL_TIM_Base_MspInit+0x68>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d010      	beq.n	800213c <HAL_TIM_Base_MspInit+0x34>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800211a:	b002      	add	sp, #8
 800211c:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 800211e:	4b15      	ldr	r3, [pc, #84]	@ (8002174 <HAL_TIM_Base_MspInit+0x6c>)
 8002120:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8002124:	f042 0210 	orr.w	r2, r2, #16
 8002128:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800212c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002130:	f003 0310 	and.w	r3, r3, #16
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	9b00      	ldr	r3, [sp, #0]
}
 8002138:	b002      	add	sp, #8
 800213a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 800213c:	4b0d      	ldr	r3, [pc, #52]	@ (8002174 <HAL_TIM_Base_MspInit+0x6c>)
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2037      	movs	r0, #55	@ 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002142:	f8d3 40e8 	ldr.w	r4, [r3, #232]	@ 0xe8
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002146:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002148:	f044 0420 	orr.w	r4, r4, #32
 800214c:	f8c3 40e8 	str.w	r4, [r3, #232]	@ 0xe8
 8002150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002154:	f003 0320 	and.w	r3, r3, #32
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800215c:	f001 f814 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002160:	2037      	movs	r0, #55	@ 0x37
}
 8002162:	b002      	add	sp, #8
 8002164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002168:	f001 b84a 	b.w	8003200 <HAL_NVIC_EnableIRQ>
 800216c:	40001000 	.word	0x40001000
 8002170:	40001400 	.word	0x40001400
 8002174:	58024400 	.word	0x58024400

08002178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002178:	b510      	push	{r4, lr}
 800217a:	b0b8      	sub	sp, #224	@ 0xe0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	2100      	movs	r1, #0
{
 800217e:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002180:	22c0      	movs	r2, #192	@ 0xc0
 8002182:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002184:	9106      	str	r1, [sp, #24]
 8002186:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800218a:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800218e:	f006 fec7 	bl	8008f20 <memset>
  if(huart->Instance==UART4)
 8002192:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_UART_MspInit+0xb0>)
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d001      	beq.n	800219e <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800219a:	b038      	add	sp, #224	@ 0xe0
 800219c:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800219e:	2202      	movs	r2, #2
 80021a0:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a2:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80021a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021a8:	f003 ff80 	bl	80060ac <HAL_RCCEx_PeriphCLKConfig>
 80021ac:	bb88      	cbnz	r0, 8002212 <HAL_UART_MspInit+0x9a>
    __HAL_RCC_UART4_CLK_ENABLE();
 80021ae:	4b1f      	ldr	r3, [pc, #124]	@ (800222c <HAL_UART_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021b0:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	481f      	ldr	r0, [pc, #124]	@ (8002230 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80021b4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b8:	eb0d 0104 	add.w	r1, sp, r4
    __HAL_RCC_UART4_CLK_ENABLE();
 80021bc:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80021c0:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80021c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80021c8:	f402 2200 	and.w	r2, r2, #524288	@ 0x80000
 80021cc:	9200      	str	r2, [sp, #0]
 80021ce:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80021d4:	f042 0201 	orr.w	r2, r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021d8:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8002218 <HAL_UART_MspInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021e4:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e6:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80021ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8002220 <HAL_UART_MspInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021f6:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fa:	f002 ff0f 	bl	800501c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	2034      	movs	r0, #52	@ 0x34
 8002202:	4611      	mov	r1, r2
 8002204:	f000 ffc0 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002208:	2034      	movs	r0, #52	@ 0x34
 800220a:	f000 fff9 	bl	8003200 <HAL_NVIC_EnableIRQ>
}
 800220e:	b038      	add	sp, #224	@ 0xe0
 8002210:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002212:	f7ff fc07 	bl	8001a24 <Error_Handler>
 8002216:	e7ca      	b.n	80021ae <HAL_UART_MspInit+0x36>
 8002218:	00000003 	.word	0x00000003
 800221c:	00000002 	.word	0x00000002
	...
 8002228:	40004c00 	.word	0x40004c00
 800222c:	58024400 	.word	0x58024400
 8002230:	58020000 	.word	0x58020000

08002234 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002234:	e7fe      	b.n	8002234 <NMI_Handler>
 8002236:	bf00      	nop

08002238 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <HardFault_Handler>
 800223a:	bf00      	nop

0800223c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler>
 800223e:	bf00      	nop

08002240 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <BusFault_Handler>
 8002242:	bf00      	nop

08002244 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler>
 8002246:	bf00      	nop

08002248 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop

0800224c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop

08002250 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop

08002254 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002254:	f000 b918 	b.w	8002488 <HAL_IncTick>

08002258 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002258:	4801      	ldr	r0, [pc, #4]	@ (8002260 <DMA1_Stream0_IRQHandler+0x8>)
 800225a:	f002 bb8b 	b.w	8004974 <HAL_DMA_IRQHandler>
 800225e:	bf00      	nop
 8002260:	24003a90 	.word	0x24003a90

08002264 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch2);
 8002264:	4801      	ldr	r0, [pc, #4]	@ (800226c <DMA1_Stream1_IRQHandler+0x8>)
 8002266:	f002 bb85 	b.w	8004974 <HAL_DMA_IRQHandler>
 800226a:	bf00      	nop
 800226c:	24003a18 	.word	0x24003a18

08002270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002270:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_LEFT_Pin);
 8002272:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002276:	f003 f817 	bl	80052a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENCODER_BTN_Pin);
 800227a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800227e:	f003 f813 	bl	80052a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_RIGHT_Pin);
 8002282:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002286:	f003 f80f 	bl	80052a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_MID_Pin);
 800228a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800228e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(BTN_MID_Pin);
 8002292:	f003 b809 	b.w	80052a8 <HAL_GPIO_EXTI_IRQHandler>
 8002296:	bf00      	nop

08002298 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002298:	4801      	ldr	r0, [pc, #4]	@ (80022a0 <UART4_IRQHandler+0x8>)
 800229a:	f005 bddf 	b.w	8007e5c <HAL_UART_IRQHandler>
 800229e:	bf00      	nop
 80022a0:	24003864 	.word	0x24003864

080022a4 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80022a4:	4801      	ldr	r0, [pc, #4]	@ (80022ac <TIM7_IRQHandler+0x8>)
 80022a6:	f005 bbf5 	b.w	8007a94 <HAL_TIM_IRQHandler>
 80022aa:	bf00      	nop
 80022ac:	240038f8 	.word	0x240038f8

080022b0 <ADC3_IRQHandler>:
void ADC3_IRQHandler(void)
{
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80022b0:	4801      	ldr	r0, [pc, #4]	@ (80022b8 <ADC3_IRQHandler+0x8>)
 80022b2:	f000 b925 	b.w	8002500 <HAL_ADC_IRQHandler>
 80022b6:	bf00      	nop
 80022b8:	24003b1c 	.word	0x24003b1c

080022bc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022bc:	4927      	ldr	r1, [pc, #156]	@ (800235c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022be:	4a28      	ldr	r2, [pc, #160]	@ (8002360 <SystemInit+0xa4>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022c0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80022c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
{
 80022c8:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022ce:	6813      	ldr	r3, [r2, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	2b06      	cmp	r3, #6
 80022d6:	d805      	bhi.n	80022e4 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80022d8:	6813      	ldr	r3, [r2, #0]
 80022da:	f023 030f 	bic.w	r3, r3, #15
 80022de:	f043 0307 	orr.w	r3, r3, #7
 80022e2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80022e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022e6:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80022e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 80022ea:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022ec:	481c      	ldr	r0, [pc, #112]	@ (8002360 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 80022ee:	f041 0101 	orr.w	r1, r1, #1
 80022f2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 80022f4:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80022fc:	6803      	ldr	r3, [r0, #0]
 80022fe:	071b      	lsls	r3, r3, #28
 8002300:	d505      	bpl.n	800230e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002302:	6803      	ldr	r3, [r0, #0]
 8002304:	f023 030f 	bic.w	r3, r3, #15
 8002308:	f043 0307 	orr.w	r3, r3, #7
 800230c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800230e:	4b15      	ldr	r3, [pc, #84]	@ (8002364 <SystemInit+0xa8>)
 8002310:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002312:	4916      	ldr	r1, [pc, #88]	@ (800236c <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8002314:	4c16      	ldr	r4, [pc, #88]	@ (8002370 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8002316:	4817      	ldr	r0, [pc, #92]	@ (8002374 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8002318:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800231a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800231c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800231e:	629c      	str	r4, [r3, #40]	@ 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8002320:	62d8      	str	r0, [r3, #44]	@ 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8002322:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002324:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002326:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002328:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800232a:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800232c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800232e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002330:	4c11      	ldr	r4, [pc, #68]	@ (8002378 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8002332:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002336:	4911      	ldr	r1, [pc, #68]	@ (800237c <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8002338:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800233a:	661a      	str	r2, [r3, #96]	@ 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	4019      	ands	r1, r3
 8002340:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8002344:	d203      	bcs.n	800234e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <SystemInit+0xc4>)
 8002348:	2201      	movs	r2, #1
 800234a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <SystemInit+0xc8>)
 8002350:	f243 02d2 	movw	r2, #12498	@ 0x30d2
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002354:	f85d 4b04 	ldr.w	r4, [sp], #4
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002358:	601a      	str	r2, [r3, #0]
}
 800235a:	4770      	bx	lr
 800235c:	e000ed00 	.word	0xe000ed00
 8002360:	52002000 	.word	0x52002000
 8002364:	58024400 	.word	0x58024400
 8002368:	eaf6ed7f 	.word	0xeaf6ed7f
 800236c:	01010280 	.word	0x01010280
 8002370:	02020200 	.word	0x02020200
 8002374:	01ff0000 	.word	0x01ff0000
 8002378:	5c001000 	.word	0x5c001000
 800237c:	ffff0000 	.word	0xffff0000
 8002380:	51008000 	.word	0x51008000
 8002384:	52004000 	.word	0x52004000

08002388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002388:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80023c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800238c:	f7ff ff96 	bl	80022bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002390:	480c      	ldr	r0, [pc, #48]	@ (80023c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002392:	490d      	ldr	r1, [pc, #52]	@ (80023c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002394:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023a8:	4c0a      	ldr	r4, [pc, #40]	@ (80023d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023b6:	f006 fdc1 	bl	8008f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ba:	f7ff f8bd 	bl	8001538 <main>
  bx  lr
 80023be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80023c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80023c8:	240020c4 	.word	0x240020c4
  ldr r2, =_sidata
 80023cc:	0800e3f0 	.word	0x0800e3f0
  ldr r2, =_sbss
 80023d0:	240020c8 	.word	0x240020c8
  ldr r4, =_ebss
 80023d4:	24003cbc 	.word	0x24003cbc

080023d8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC_IRQHandler>
	...

080023dc <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_InitTick+0x40>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b90b      	cbnz	r3, 80023e6 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80023e2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80023e4:	4770      	bx	lr
{
 80023e6:	b510      	push	{r4, lr}
 80023e8:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80023ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023ee:	4a0c      	ldr	r2, [pc, #48]	@ (8002420 <HAL_InitTick+0x44>)
 80023f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f4:	6810      	ldr	r0, [r2, #0]
 80023f6:	fbb0 f0f3 	udiv	r0, r0, r3
 80023fa:	f000 ff0f 	bl	800321c <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023fe:	b908      	cbnz	r0, 8002404 <HAL_InitTick+0x28>
 8002400:	2c0f      	cmp	r4, #15
 8002402:	d901      	bls.n	8002408 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8002404:	2001      	movs	r0, #1
}
 8002406:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	4621      	mov	r1, r4
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f000 feba 	bl	8003188 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002414:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <HAL_InitTick+0x48>)
 8002416:	2000      	movs	r0, #0
 8002418:	601c      	str	r4, [r3, #0]
}
 800241a:	bd10      	pop	{r4, pc}
 800241c:	2400206c 	.word	0x2400206c
 8002420:	24002068 	.word	0x24002068
 8002424:	24002070 	.word	0x24002070

08002428 <HAL_Init>:
{
 8002428:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242a:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800242c:	4c12      	ldr	r4, [pc, #72]	@ (8002478 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242e:	f000 fe99 	bl	8003164 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002432:	f003 facf 	bl	80059d4 <HAL_RCC_GetSysClockFreq>
 8002436:	4b11      	ldr	r3, [pc, #68]	@ (800247c <HAL_Init+0x54>)
 8002438:	4911      	ldr	r1, [pc, #68]	@ (8002480 <HAL_Init+0x58>)
 800243a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800243c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800243e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002442:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002446:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002448:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800244a:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800244e:	490d      	ldr	r1, [pc, #52]	@ (8002484 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002450:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002454:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002456:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 800245a:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800245c:	200f      	movs	r0, #15
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800245e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002460:	f7ff ffbc 	bl	80023dc <HAL_InitTick>
 8002464:	b110      	cbz	r0, 800246c <HAL_Init+0x44>
    return HAL_ERROR;
 8002466:	2401      	movs	r4, #1
}
 8002468:	4620      	mov	r0, r4
 800246a:	bd10      	pop	{r4, pc}
 800246c:	4604      	mov	r4, r0
  HAL_MspInit();
 800246e:	f7ff fcfb 	bl	8001e68 <HAL_MspInit>
}
 8002472:	4620      	mov	r0, r4
 8002474:	bd10      	pop	{r4, pc}
 8002476:	bf00      	nop
 8002478:	24002064 	.word	0x24002064
 800247c:	58024400 	.word	0x58024400
 8002480:	0800e130 	.word	0x0800e130
 8002484:	24002068 	.word	0x24002068

08002488 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002488:	4a03      	ldr	r2, [pc, #12]	@ (8002498 <HAL_IncTick+0x10>)
 800248a:	4b04      	ldr	r3, [pc, #16]	@ (800249c <HAL_IncTick+0x14>)
 800248c:	6811      	ldr	r1, [r2, #0]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	440b      	add	r3, r1
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	24003b80 	.word	0x24003b80
 800249c:	2400206c 	.word	0x2400206c

080024a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80024a0:	4b01      	ldr	r3, [pc, #4]	@ (80024a8 <HAL_GetTick+0x8>)
 80024a2:	6818      	ldr	r0, [r3, #0]
}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	24003b80 	.word	0x24003b80

080024ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80024b0:	f7ff fff6 	bl	80024a0 <HAL_GetTick>
 80024b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024b6:	1c63      	adds	r3, r4, #1
 80024b8:	d002      	beq.n	80024c0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <HAL_Delay+0x20>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024c0:	f7ff ffee 	bl	80024a0 <HAL_GetTick>
 80024c4:	1b40      	subs	r0, r0, r5
 80024c6:	42a0      	cmp	r0, r4
 80024c8:	d3fa      	bcc.n	80024c0 <HAL_Delay+0x14>
  {
  }
}
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	2400206c 	.word	0x2400206c

080024d0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80024d0:	4b01      	ldr	r3, [pc, #4]	@ (80024d8 <HAL_GetREVID+0x8>)
 80024d2:	6818      	ldr	r0, [r3, #0]
}
 80024d4:	0c00      	lsrs	r0, r0, #16
 80024d6:	4770      	bx	lr
 80024d8:	5c001000 	.word	0x5c001000

080024dc <HAL_SYSCFG_AnalogSwitchConfig>:
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80024dc:	4a03      	ldr	r2, [pc, #12]	@ (80024ec <HAL_SYSCFG_AnalogSwitchConfig+0x10>)
 80024de:	6853      	ldr	r3, [r2, #4]
 80024e0:	ea23 0300 	bic.w	r3, r3, r0
 80024e4:	430b      	orrs	r3, r1
 80024e6:	6053      	str	r3, [r2, #4]
}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	58000400 	.word	0x58000400

080024f0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80024f0:	6803      	ldr	r3, [r0, #0]
 80024f2:	6c18      	ldr	r0, [r3, #64]	@ 0x40
}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop

080024f8 <HAL_ADC_LevelOutOfWindowCallback>:
/**
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop

080024fc <HAL_ADC_ErrorCallback>:
  *           "HAL_ADC_Start_DMA()"
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop

08002500 <HAL_ADC_IRQHandler>:
{
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002502:	4a8e      	ldr	r2, [pc, #568]	@ (800273c <HAL_ADC_IRQHandler+0x23c>)
{
 8002504:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002506:	6803      	ldr	r3, [r0, #0]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002508:	4293      	cmp	r3, r2
  uint32_t tmp_isr = hadc->Instance->ISR;
 800250a:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 800250c:	685e      	ldr	r6, [r3, #4]
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800250e:	f000 8095 	beq.w	800263c <HAL_ADC_IRQHandler+0x13c>
 8002512:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002516:	4293      	cmp	r3, r2
 8002518:	f000 8090 	beq.w	800263c <HAL_ADC_IRQHandler+0x13c>
 800251c:	4a88      	ldr	r2, [pc, #544]	@ (8002740 <HAL_ADC_IRQHandler+0x240>)
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800251e:	6897      	ldr	r7, [r2, #8]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002520:	07a9      	lsls	r1, r5, #30
 8002522:	f007 071f 	and.w	r7, r7, #31
 8002526:	d502      	bpl.n	800252e <HAL_ADC_IRQHandler+0x2e>
 8002528:	07b2      	lsls	r2, r6, #30
 800252a:	f100 80aa 	bmi.w	8002682 <HAL_ADC_IRQHandler+0x182>
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800252e:	0769      	lsls	r1, r5, #29
 8002530:	d579      	bpl.n	8002626 <HAL_ADC_IRQHandler+0x126>
 8002532:	0772      	lsls	r2, r6, #29
 8002534:	d577      	bpl.n	8002626 <HAL_ADC_IRQHandler+0x126>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002536:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002538:	06d2      	lsls	r2, r2, #27
 800253a:	d403      	bmi.n	8002544 <HAL_ADC_IRQHandler+0x44>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800253c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800253e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002542:	6562      	str	r2, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800254a:	d11c      	bne.n	8002586 <HAL_ADC_IRQHandler+0x86>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800254c:	4a7d      	ldr	r2, [pc, #500]	@ (8002744 <HAL_ADC_IRQHandler+0x244>)
 800254e:	4293      	cmp	r3, r2
 8002550:	f000 80e7 	beq.w	8002722 <HAL_ADC_IRQHandler+0x222>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002554:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002556:	0491      	lsls	r1, r2, #18
 8002558:	d415      	bmi.n	8002586 <HAL_ADC_IRQHandler+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	0712      	lsls	r2, r2, #28
 800255e:	d512      	bpl.n	8002586 <HAL_ADC_IRQHandler+0x86>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	0750      	lsls	r0, r2, #29
 8002564:	f100 80f2 	bmi.w	800274c <HAL_ADC_IRQHandler+0x24c>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	f022 020c 	bic.w	r2, r2, #12
 800256e:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002570:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002572:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002576:	6563      	str	r3, [r4, #84]	@ 0x54
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002578:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800257a:	04d9      	lsls	r1, r3, #19
 800257c:	d403      	bmi.n	8002586 <HAL_ADC_IRQHandler+0x86>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800257e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8002586:	4620      	mov	r0, r4
 8002588:	f7fe fdfa 	bl	8001180 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002592:	06aa      	lsls	r2, r5, #26
 8002594:	d54d      	bpl.n	8002632 <HAL_ADC_IRQHandler+0x132>
 8002596:	06b0      	lsls	r0, r6, #26
 8002598:	d54b      	bpl.n	8002632 <HAL_ADC_IRQHandler+0x132>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800259c:	06d0      	lsls	r0, r2, #27
 800259e:	d403      	bmi.n	80025a8 <HAL_ADC_IRQHandler+0xa8>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80025a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80025a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80025a6:	6562      	str	r2, [r4, #84]	@ 0x54
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025a8:	4966      	ldr	r1, [pc, #408]	@ (8002744 <HAL_ADC_IRQHandler+0x244>)
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80025aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025ac:	428b      	cmp	r3, r1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80025ae:	68d8      	ldr	r0, [r3, #12]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80025b0:	f402 72c0 	and.w	r2, r2, #384	@ 0x180
 80025b4:	d073      	beq.n	800269e <HAL_ADC_IRQHandler+0x19e>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025b6:	68d9      	ldr	r1, [r3, #12]
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80025b8:	b9d2      	cbnz	r2, 80025f0 <HAL_ADC_IRQHandler+0xf0>
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80025ba:	018a      	lsls	r2, r1, #6
 80025bc:	f100 80a9 	bmi.w	8002712 <HAL_ADC_IRQHandler+0x212>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	0650      	lsls	r0, r2, #25
 80025c4:	d514      	bpl.n	80025f0 <HAL_ADC_IRQHandler+0xf0>
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80025c6:	0289      	lsls	r1, r1, #10
 80025c8:	d412      	bmi.n	80025f0 <HAL_ADC_IRQHandler+0xf0>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	0712      	lsls	r2, r2, #28
 80025ce:	f100 80c8 	bmi.w	8002762 <HAL_ADC_IRQHandler+0x262>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025d8:	605a      	str	r2, [r3, #4]
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80025da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80025dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025e0:	6563      	str	r3, [r4, #84]	@ 0x54
              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80025e2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80025e4:	05d8      	lsls	r0, r3, #23
 80025e6:	d403      	bmi.n	80025f0 <HAL_ADC_IRQHandler+0xf0>
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025e8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025f0:	4620      	mov	r0, r4
 80025f2:	f000 fdad 	bl	8003150 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	2260      	movs	r2, #96	@ 0x60
 80025fa:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025fc:	0629      	lsls	r1, r5, #24
 80025fe:	d501      	bpl.n	8002604 <HAL_ADC_IRQHandler+0x104>
 8002600:	0632      	lsls	r2, r6, #24
 8002602:	d45f      	bmi.n	80026c4 <HAL_ADC_IRQHandler+0x1c4>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002604:	05e8      	lsls	r0, r5, #23
 8002606:	d501      	bpl.n	800260c <HAL_ADC_IRQHandler+0x10c>
 8002608:	05f1      	lsls	r1, r6, #23
 800260a:	d466      	bmi.n	80026da <HAL_ADC_IRQHandler+0x1da>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800260c:	05aa      	lsls	r2, r5, #22
 800260e:	d501      	bpl.n	8002614 <HAL_ADC_IRQHandler+0x114>
 8002610:	05b0      	lsls	r0, r6, #22
 8002612:	d44b      	bmi.n	80026ac <HAL_ADC_IRQHandler+0x1ac>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002614:	06e9      	lsls	r1, r5, #27
 8002616:	d501      	bpl.n	800261c <HAL_ADC_IRQHandler+0x11c>
 8002618:	06f2      	lsls	r2, r6, #27
 800261a:	d411      	bmi.n	8002640 <HAL_ADC_IRQHandler+0x140>
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800261c:	0569      	lsls	r1, r5, #21
 800261e:	d501      	bpl.n	8002624 <HAL_ADC_IRQHandler+0x124>
 8002620:	0572      	lsls	r2, r6, #21
 8002622:	d466      	bmi.n	80026f2 <HAL_ADC_IRQHandler+0x1f2>
}
 8002624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002626:	0728      	lsls	r0, r5, #28
 8002628:	d5b3      	bpl.n	8002592 <HAL_ADC_IRQHandler+0x92>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800262a:	0731      	lsls	r1, r6, #28
 800262c:	d483      	bmi.n	8002536 <HAL_ADC_IRQHandler+0x36>
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800262e:	06aa      	lsls	r2, r5, #26
 8002630:	d4b1      	bmi.n	8002596 <HAL_ADC_IRQHandler+0x96>
 8002632:	0669      	lsls	r1, r5, #25
 8002634:	d5e2      	bpl.n	80025fc <HAL_ADC_IRQHandler+0xfc>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002636:	0672      	lsls	r2, r6, #25
 8002638:	d5e0      	bpl.n	80025fc <HAL_ADC_IRQHandler+0xfc>
 800263a:	e7ae      	b.n	800259a <HAL_ADC_IRQHandler+0x9a>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800263c:	4a42      	ldr	r2, [pc, #264]	@ (8002748 <HAL_ADC_IRQHandler+0x248>)
 800263e:	e76e      	b.n	800251e <HAL_ADC_IRQHandler+0x1e>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002640:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002642:	b17a      	cbz	r2, 8002664 <HAL_ADC_IRQHandler+0x164>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002644:	2f00      	cmp	r7, #0
 8002646:	d075      	beq.n	8002734 <HAL_ADC_IRQHandler+0x234>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002648:	4a3c      	ldr	r2, [pc, #240]	@ (800273c <HAL_ADC_IRQHandler+0x23c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	f000 8087 	beq.w	800275e <HAL_ADC_IRQHandler+0x25e>
 8002650:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002654:	4293      	cmp	r3, r2
 8002656:	f000 8082 	beq.w	800275e <HAL_ADC_IRQHandler+0x25e>
 800265a:	4a39      	ldr	r2, [pc, #228]	@ (8002740 <HAL_ADC_IRQHandler+0x240>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800265c:	6892      	ldr	r2, [r2, #8]
 800265e:	f412 4f40 	tst.w	r2, #49152	@ 0xc000
 8002662:	d00b      	beq.n	800267c <HAL_ADC_IRQHandler+0x17c>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002664:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_ADC_ErrorCallback(hadc);
 8002666:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002668:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800266c:	6563      	str	r3, [r4, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800266e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	65a3      	str	r3, [r4, #88]	@ 0x58
      HAL_ADC_ErrorCallback(hadc);
 8002676:	f7ff ff41 	bl	80024fc <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	2210      	movs	r2, #16
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	e7cc      	b.n	800261c <HAL_ADC_IRQHandler+0x11c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002682:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002684:	06d8      	lsls	r0, r3, #27
 8002686:	d403      	bmi.n	8002690 <HAL_ADC_IRQHandler+0x190>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002688:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800268a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800268e:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002690:	4620      	mov	r0, r4
 8002692:	f000 fd65 	bl	8003160 <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	2202      	movs	r2, #2
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	e747      	b.n	800252e <HAL_ADC_IRQHandler+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800269e:	21c1      	movs	r1, #193	@ 0xc1
 80026a0:	40f9      	lsrs	r1, r7
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80026a2:	07c9      	lsls	r1, r1, #31
 80026a4:	d487      	bmi.n	80025b6 <HAL_ADC_IRQHandler+0xb6>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026a6:	4925      	ldr	r1, [pc, #148]	@ (800273c <HAL_ADC_IRQHandler+0x23c>)
 80026a8:	68c9      	ldr	r1, [r1, #12]
 80026aa:	e785      	b.n	80025b8 <HAL_ADC_IRQHandler+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026ac:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026ae:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b4:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026b6:	f000 fd51 	bl	800315c <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026ba:	6823      	ldr	r3, [r4, #0]
 80026bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	e7a7      	b.n	8002614 <HAL_ADC_IRQHandler+0x114>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026c6:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026cc:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80026ce:	f7ff ff13 	bl	80024f8 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	2280      	movs	r2, #128	@ 0x80
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	e794      	b.n	8002604 <HAL_ADC_IRQHandler+0x104>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026da:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026dc:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80026de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e2:	6563      	str	r3, [r4, #84]	@ 0x54
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80026e4:	f000 fd38 	bl	8003158 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e78c      	b.n	800260c <HAL_ADC_IRQHandler+0x10c>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80026f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80026f8:	4620      	mov	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026fe:	6562      	str	r2, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002700:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002702:	f042 0208 	orr.w	r2, r2, #8
 8002706:	65a2      	str	r2, [r4, #88]	@ 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002708:	6019      	str	r1, [r3, #0]
}
 800270a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800270e:	f000 bd21 	b.w	8003154 <HAL_ADCEx_InjectedQueueOverflowCallback>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002712:	f400 6040 	and.w	r0, r0, #3072	@ 0xc00
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002716:	f401 5200 	and.w	r2, r1, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800271a:	4302      	orrs	r2, r0
 800271c:	f47f af68 	bne.w	80025f0 <HAL_ADC_IRQHandler+0xf0>
 8002720:	e74e      	b.n	80025c0 <HAL_ADC_IRQHandler+0xc0>
 8002722:	f240 2221 	movw	r2, #545	@ 0x221
 8002726:	40fa      	lsrs	r2, r7
 8002728:	07d0      	lsls	r0, r2, #31
 800272a:	f53f af13 	bmi.w	8002554 <HAL_ADC_IRQHandler+0x54>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800272e:	4a03      	ldr	r2, [pc, #12]	@ (800273c <HAL_ADC_IRQHandler+0x23c>)
 8002730:	68d2      	ldr	r2, [r2, #12]
 8002732:	e710      	b.n	8002556 <HAL_ADC_IRQHandler+0x56>
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	0790      	lsls	r0, r2, #30
 8002738:	d0a0      	beq.n	800267c <HAL_ADC_IRQHandler+0x17c>
 800273a:	e793      	b.n	8002664 <HAL_ADC_IRQHandler+0x164>
 800273c:	40022000 	.word	0x40022000
 8002740:	58026300 	.word	0x58026300
 8002744:	40022100 	.word	0x40022100
 8002748:	40022300 	.word	0x40022300
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800274e:	f043 0310 	orr.w	r3, r3, #16
 8002752:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002754:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800275c:	e713      	b.n	8002586 <HAL_ADC_IRQHandler+0x86>
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800275e:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <HAL_ADC_IRQHandler+0x274>)
 8002760:	e77c      	b.n	800265c <HAL_ADC_IRQHandler+0x15c>
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002764:	f043 0310 	orr.w	r3, r3, #16
 8002768:	6563      	str	r3, [r4, #84]	@ 0x54
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002772:	e73d      	b.n	80025f0 <HAL_ADC_IRQHandler+0xf0>
 8002774:	40022300 	.word	0x40022300

08002778 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002778:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800277a:	2200      	movs	r2, #0
{
 800277c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800277e:	9201      	str	r2, [sp, #4]
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002780:	f890 2050 	ldrb.w	r2, [r0, #80]	@ 0x50
 8002784:	2a01      	cmp	r2, #1
 8002786:	f000 8138 	beq.w	80029fa <HAL_ADC_ConfigChannel+0x282>
 800278a:	2401      	movs	r4, #1
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800278c:	6802      	ldr	r2, [r0, #0]
 800278e:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8002790:	f880 4050 	strb.w	r4, [r0, #80]	@ 0x50
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002794:	6890      	ldr	r0, [r2, #8]
 8002796:	0745      	lsls	r5, r0, #29
 8002798:	d509      	bpl.n	80027ae <HAL_ADC_ConfigChannel+0x36>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
 800279c:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800279e:	f042 0220 	orr.w	r2, r2, #32
 80027a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
}
 80027aa:	b003      	add	sp, #12
 80027ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80027ae:	680d      	ldr	r5, [r1, #0]
 80027b0:	2d00      	cmp	r5, #0
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027b2:	ea4f 6095 	mov.w	r0, r5, lsr #26
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80027b6:	db0d      	blt.n	80027d4 <HAL_ADC_ConfigChannel+0x5c>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80027b8:	f3c5 0613 	ubfx	r6, r5, #0, #20
 80027bc:	2e00      	cmp	r6, #0
 80027be:	f000 809a 	beq.w	80028f6 <HAL_ADC_ConfigChannel+0x17e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	fa95 f5a5 	rbit	r5, r5
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027c6:	b115      	cbz	r5, 80027ce <HAL_ADC_ConfigChannel+0x56>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80027c8:	fab5 f585 	clz	r5, r5
 80027cc:	40ac      	lsls	r4, r5
 80027ce:	69d5      	ldr	r5, [r2, #28]
 80027d0:	432c      	orrs	r4, r5
 80027d2:	61d4      	str	r4, [r2, #28]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80027d4:	684c      	ldr	r4, [r1, #4]
  MODIFY_REG(*preg,
 80027d6:	f04f 0c1f 	mov.w	ip, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027da:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 80027de:	f000 001f 	and.w	r0, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027e2:	09a5      	lsrs	r5, r4, #6
  MODIFY_REG(*preg,
 80027e4:	ea04 040c 	and.w	r4, r4, ip
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80027e8:	f005 050c 	and.w	r5, r5, #12
  MODIFY_REG(*preg,
 80027ec:	fa0c fc04 	lsl.w	ip, ip, r4
 80027f0:	40a0      	lsls	r0, r4
 80027f2:	f85e 4005 	ldr.w	r4, [lr, r5]
 80027f6:	ea24 0c0c 	bic.w	ip, r4, ip
 80027fa:	ea4c 0000 	orr.w	r0, ip, r0
 80027fe:	f84e 0005 	str.w	r0, [lr, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002802:	6890      	ldr	r0, [r2, #8]
 8002804:	f010 0f04 	tst.w	r0, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002808:	6890      	ldr	r0, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800280c:	0700      	lsls	r0, r0, #28
 800280e:	d51a      	bpl.n	8002846 <HAL_ADC_ConfigChannel+0xce>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002810:	6890      	ldr	r0, [r2, #8]
 8002812:	07c7      	lsls	r7, r0, #31
 8002814:	d415      	bmi.n	8002842 <HAL_ADC_ConfigChannel+0xca>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002816:	68ce      	ldr	r6, [r1, #12]
 8002818:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800281a:	f006 0718 	and.w	r7, r6, #24
 800281e:	48bd      	ldr	r0, [pc, #756]	@ (8002b14 <HAL_ADC_ConfigChannel+0x39c>)
 8002820:	f8d2 50c0 	ldr.w	r5, [r2, #192]	@ 0xc0
 8002824:	40f8      	lsrs	r0, r7
 8002826:	f3c4 0713 	ubfx	r7, r4, #0, #20
 800282a:	4020      	ands	r0, r4
 800282c:	ea25 0507 	bic.w	r5, r5, r7
 8002830:	4328      	orrs	r0, r5
 8002832:	f8c2 00c0 	str.w	r0, [r2, #192]	@ 0xc0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002836:	48b8      	ldr	r0, [pc, #736]	@ (8002b18 <HAL_ADC_ConfigChannel+0x3a0>)
 8002838:	4286      	cmp	r6, r0
 800283a:	f000 8091 	beq.w	8002960 <HAL_ADC_ConfigChannel+0x1e8>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800283e:	2c00      	cmp	r4, #0
 8002840:	db5b      	blt.n	80028fa <HAL_ADC_ConfigChannel+0x182>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002842:	2000      	movs	r0, #0
 8002844:	e7ae      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x2c>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002846:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002848:	f102 0c14 	add.w	ip, r2, #20
  MODIFY_REG(*preg,
 800284c:	f04f 0e07 	mov.w	lr, #7
 8002850:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002852:	0de5      	lsrs	r5, r4, #23
  MODIFY_REG(*preg,
 8002854:	f3c4 5404 	ubfx	r4, r4, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002858:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800285c:	fa0e fe04 	lsl.w	lr, lr, r4
 8002860:	fa06 f404 	lsl.w	r4, r6, r4
 8002864:	f85c 0005 	ldr.w	r0, [ip, r5]
 8002868:	ea20 000e 	bic.w	r0, r0, lr
 800286c:	4320      	orrs	r0, r4
 800286e:	f84c 0005 	str.w	r0, [ip, r5]
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002872:	48aa      	ldr	r0, [pc, #680]	@ (8002b1c <HAL_ADC_ConfigChannel+0x3a4>)
 8002874:	694d      	ldr	r5, [r1, #20]
 8002876:	6800      	ldr	r0, [r0, #0]
 8002878:	f000 4070 	and.w	r0, r0, #4026531840	@ 0xf0000000
 800287c:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 8002880:	68d0      	ldr	r0, [r2, #12]
 8002882:	d068      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x1de>
 8002884:	f010 0f10 	tst.w	r0, #16
 8002888:	68d0      	ldr	r0, [r2, #12]
 800288a:	d064      	beq.n	8002956 <HAL_ADC_ConfigChannel+0x1de>
 800288c:	0840      	lsrs	r0, r0, #1
 800288e:	f000 0008 	and.w	r0, r0, #8
 8002892:	4085      	lsls	r5, r0
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002894:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002896:	6808      	ldr	r0, [r1, #0]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002898:	2e04      	cmp	r6, #4
 800289a:	f000 80b1 	beq.w	8002a00 <HAL_ADC_ConfigChannel+0x288>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800289e:	f102 0c60 	add.w	ip, r2, #96	@ 0x60
    MODIFY_REG(*preg,
 80028a2:	f000 44f8 	and.w	r4, r0, #2080374784	@ 0x7c000000
 80028a6:	f85c 0026 	ldr.w	r0, [ip, r6, lsl #2]
 80028aa:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80028ae:	4320      	orrs	r0, r4
 80028b0:	4328      	orrs	r0, r5
 80028b2:	f84c 0026 	str.w	r0, [ip, r6, lsl #2]
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80028b6:	7e4c      	ldrb	r4, [r1, #25]
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b8:	690d      	ldr	r5, [r1, #16]
 80028ba:	f1a4 0401 	sub.w	r4, r4, #1
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80028be:	f85c 0025 	ldr.w	r0, [ip, r5, lsl #2]
 80028c2:	fab4 f484 	clz	r4, r4
 80028c6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80028ca:	0964      	lsrs	r4, r4, #5
 80028cc:	ea40 70c4 	orr.w	r0, r0, r4, lsl #31
 80028d0:	f84c 0025 	str.w	r0, [ip, r5, lsl #2]
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80028d4:	7e08      	ldrb	r0, [r1, #24]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80028d6:	690d      	ldr	r5, [r1, #16]
 80028d8:	f1a0 0001 	sub.w	r0, r0, #1
 80028dc:	6914      	ldr	r4, [r2, #16]
 80028de:	f005 051f 	and.w	r5, r5, #31
 80028e2:	fab0 f080 	clz	r0, r0
 80028e6:	f424 44f0 	bic.w	r4, r4, #30720	@ 0x7800
 80028ea:	0940      	lsrs	r0, r0, #5
 80028ec:	02c0      	lsls	r0, r0, #11
 80028ee:	40a8      	lsls	r0, r5
 80028f0:	4320      	orrs	r0, r4
 80028f2:	6110      	str	r0, [r2, #16]
}
 80028f4:	e78c      	b.n	8002810 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028f6:	4084      	lsls	r4, r0
 80028f8:	e769      	b.n	80027ce <HAL_ADC_ConfigChannel+0x56>
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028fa:	4989      	ldr	r1, [pc, #548]	@ (8002b20 <HAL_ADC_ConfigChannel+0x3a8>)
 80028fc:	428a      	cmp	r2, r1
 80028fe:	f000 80be 	beq.w	8002a7e <HAL_ADC_ConfigChannel+0x306>
 8002902:	f501 7180 	add.w	r1, r1, #256	@ 0x100
 8002906:	428a      	cmp	r2, r1
 8002908:	f000 80b9 	beq.w	8002a7e <HAL_ADC_ConfigChannel+0x306>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800290c:	f101 51c0 	add.w	r1, r1, #402653184	@ 0x18000000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002910:	4d84      	ldr	r5, [pc, #528]	@ (8002b24 <HAL_ADC_ConfigChannel+0x3ac>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002912:	f501 4184 	add.w	r1, r1, #16896	@ 0x4200
 8002916:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002918:	68ae      	ldr	r6, [r5, #8]
 800291a:	07f6      	lsls	r6, r6, #31
 800291c:	f53f af3d 	bmi.w	800279a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002920:	4e81      	ldr	r6, [pc, #516]	@ (8002b28 <HAL_ADC_ConfigChannel+0x3b0>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002922:	f000 77e0 	and.w	r7, r0, #29360128	@ 0x1c00000
 8002926:	42b4      	cmp	r4, r6
 8002928:	f000 8106 	beq.w	8002b38 <HAL_ADC_ConfigChannel+0x3c0>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800292c:	4e7f      	ldr	r6, [pc, #508]	@ (8002b2c <HAL_ADC_ConfigChannel+0x3b4>)
 800292e:	42b4      	cmp	r4, r6
 8002930:	f000 80e2 	beq.w	8002af8 <HAL_ADC_ConfigChannel+0x380>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002934:	4d7e      	ldr	r5, [pc, #504]	@ (8002b30 <HAL_ADC_ConfigChannel+0x3b8>)
 8002936:	42ac      	cmp	r4, r5
 8002938:	d183      	bne.n	8002842 <HAL_ADC_ConfigChannel+0xca>
            if (ADC_VREFINT_INSTANCE(hadc))
 800293a:	0240      	lsls	r0, r0, #9
 800293c:	d481      	bmi.n	8002842 <HAL_ADC_ConfigChannel+0xca>
 800293e:	4879      	ldr	r0, [pc, #484]	@ (8002b24 <HAL_ADC_ConfigChannel+0x3ac>)
 8002940:	4282      	cmp	r2, r0
 8002942:	f47f af7e 	bne.w	8002842 <HAL_ADC_ConfigChannel+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002946:	688a      	ldr	r2, [r1, #8]
 8002948:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800294c:	433a      	orrs	r2, r7
 800294e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002952:	608a      	str	r2, [r1, #8]
}
 8002954:	e775      	b.n	8002842 <HAL_ADC_ConfigChannel+0xca>
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002956:	f3c0 0082 	ubfx	r0, r0, #2, #3
 800295a:	0040      	lsls	r0, r0, #1
 800295c:	4085      	lsls	r5, r0
 800295e:	e799      	b.n	8002894 <HAL_ADC_ConfigChannel+0x11c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002960:	2f00      	cmp	r7, #0
 8002962:	d069      	beq.n	8002a38 <HAL_ADC_ConfigChannel+0x2c0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8002968:	2800      	cmp	r0, #0
 800296a:	f000 80a1 	beq.w	8002ab0 <HAL_ADC_ConfigChannel+0x338>
  return __builtin_clz(value);
 800296e:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002972:	3001      	adds	r0, #1
 8002974:	f000 001f 	and.w	r0, r0, #31
 8002978:	2809      	cmp	r0, #9
 800297a:	f240 8099 	bls.w	8002ab0 <HAL_ADC_ConfigChannel+0x338>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8002982:	2800      	cmp	r0, #0
 8002984:	f000 80fe 	beq.w	8002b84 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002988:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800298c:	3001      	adds	r0, #1
 800298e:	0680      	lsls	r0, r0, #26
 8002990:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8002998:	2d00      	cmp	r5, #0
 800299a:	f000 80f1 	beq.w	8002b80 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 800299e:	fab5 f585 	clz	r5, r5
 80029a2:	2601      	movs	r6, #1
 80029a4:	3501      	adds	r5, #1
 80029a6:	f005 051f 	and.w	r5, r5, #31
 80029aa:	fa06 f505 	lsl.w	r5, r6, r5
 80029ae:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80029b4:	2c00      	cmp	r4, #0
 80029b6:	f000 80e1 	beq.w	8002b7c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80029ba:	fab4 f484 	clz	r4, r4
 80029be:	f06f 061d 	mvn.w	r6, #29
 80029c2:	1c65      	adds	r5, r4, #1
 80029c4:	2403      	movs	r4, #3
 80029c6:	f005 051f 	and.w	r5, r5, #31
 80029ca:	fb14 6405 	smlabb	r4, r4, r5, r6
 80029ce:	0524      	lsls	r4, r4, #20
 80029d0:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d4:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029d6:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80029da:	2707      	movs	r7, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029dc:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80029de:	f3c0 5004 	ubfx	r0, r0, #20, #5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80029e2:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80029e6:	4087      	lsls	r7, r0
 80029e8:	5974      	ldr	r4, [r6, r5]
 80029ea:	ea24 0407 	bic.w	r4, r4, r7
 80029ee:	688f      	ldr	r7, [r1, #8]
 80029f0:	4087      	lsls	r7, r0
 80029f2:	433c      	orrs	r4, r7
 80029f4:	5174      	str	r4, [r6, r5]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029f6:	680c      	ldr	r4, [r1, #0]
}
 80029f8:	e721      	b.n	800283e <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 80029fa:	2002      	movs	r0, #2
}
 80029fc:	b003      	add	sp, #12
 80029fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a00:	6e15      	ldr	r5, [r2, #96]	@ 0x60
 8002a02:	0684      	lsls	r4, r0, #26
 8002a04:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
 8002a08:	ebb5 6f80 	cmp.w	r5, r0, lsl #26
 8002a0c:	d032      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0x2fc>
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a0e:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002a10:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002a14:	4284      	cmp	r4, r0
 8002a16:	d028      	beq.n	8002a6a <HAL_ADC_ConfigChannel+0x2f2>
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a18:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8002a1a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002a1e:	4284      	cmp	r4, r0
 8002a20:	d01e      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x2e8>
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002a22:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8002a24:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8002a28:	4284      	cmp	r4, r0
 8002a2a:	f47f aef1 	bne.w	8002810 <HAL_ADC_ConfigChannel+0x98>
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002a2e:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8002a30:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002a34:	66d0      	str	r0, [r2, #108]	@ 0x6c
 8002a36:	e6eb      	b.n	8002810 <HAL_ADC_ConfigChannel+0x98>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a38:	0ea4      	lsrs	r4, r4, #26
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	3401      	adds	r4, #1
 8002a3e:	f004 051f 	and.w	r5, r4, #31
 8002a42:	06a4      	lsls	r4, r4, #26
 8002a44:	40a8      	lsls	r0, r5
 8002a46:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4a:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a4c:	ea40 0004 	orr.w	r0, r0, r4
 8002a50:	eb05 0445 	add.w	r4, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a54:	d94e      	bls.n	8002af4 <HAL_ADC_ConfigChannel+0x37c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a56:	3c1e      	subs	r4, #30
 8002a58:	0524      	lsls	r4, r4, #20
 8002a5a:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8002a5e:	e7b9      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x25c>
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002a60:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8002a62:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002a66:	6690      	str	r0, [r2, #104]	@ 0x68
 8002a68:	e7db      	b.n	8002a22 <HAL_ADC_ConfigChannel+0x2aa>
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002a6a:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8002a6c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002a70:	6650      	str	r0, [r2, #100]	@ 0x64
 8002a72:	e7d1      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x2a0>
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002a74:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8002a76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002a7a:	6610      	str	r0, [r2, #96]	@ 0x60
 8002a7c:	e7c7      	b.n	8002a0e <HAL_ADC_ConfigChannel+0x296>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a7e:	4d28      	ldr	r5, [pc, #160]	@ (8002b20 <HAL_ADC_ConfigChannel+0x3a8>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a80:	492c      	ldr	r1, [pc, #176]	@ (8002b34 <HAL_ADC_ConfigChannel+0x3bc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a82:	f505 7580 	add.w	r5, r5, #256	@ 0x100
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a86:	6888      	ldr	r0, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a88:	f855 6cf8 	ldr.w	r6, [r5, #-248]
 8002a8c:	68ad      	ldr	r5, [r5, #8]
 8002a8e:	07ed      	lsls	r5, r5, #31
 8002a90:	f53f ae83 	bmi.w	800279a <HAL_ADC_ConfigChannel+0x22>
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a94:	07f7      	lsls	r7, r6, #31
 8002a96:	f53f ae80 	bmi.w	800279a <HAL_ADC_ConfigChannel+0x22>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a9a:	4d23      	ldr	r5, [pc, #140]	@ (8002b28 <HAL_ADC_ConfigChannel+0x3b0>)
 8002a9c:	42ac      	cmp	r4, r5
 8002a9e:	f43f aed0 	beq.w	8002842 <HAL_ADC_ConfigChannel+0xca>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002aa2:	4d22      	ldr	r5, [pc, #136]	@ (8002b2c <HAL_ADC_ConfigChannel+0x3b4>)
 8002aa4:	42ac      	cmp	r4, r5
 8002aa6:	f43f aecc 	beq.w	8002842 <HAL_ADC_ConfigChannel+0xca>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002aaa:	f000 77e0 	and.w	r7, r0, #29360128	@ 0x1c00000
 8002aae:	e741      	b.n	8002934 <HAL_ADC_ConfigChannel+0x1bc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d06d      	beq.n	8002b94 <HAL_ADC_ConfigChannel+0x41c>
  return __builtin_clz(value);
 8002ab8:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002abc:	3001      	adds	r0, #1
 8002abe:	0680      	lsls	r0, r0, #26
 8002ac0:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8002ac8:	2d00      	cmp	r5, #0
 8002aca:	d061      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x418>
  return __builtin_clz(value);
 8002acc:	fab5 f585 	clz	r5, r5
 8002ad0:	2601      	movs	r6, #1
 8002ad2:	3501      	adds	r5, #1
 8002ad4:	f005 051f 	and.w	r5, r5, #31
 8002ad8:	fa06 f505 	lsl.w	r5, r6, r5
 8002adc:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8002ae2:	2c00      	cmp	r4, #0
 8002ae4:	d051      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0x412>
  return __builtin_clz(value);
 8002ae6:	fab4 f484 	clz	r4, r4
 8002aea:	3401      	adds	r4, #1
 8002aec:	f004 041f 	and.w	r4, r4, #31
 8002af0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002af4:	0524      	lsls	r4, r4, #20
 8002af6:	e76d      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x25c>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af8:	01c4      	lsls	r4, r0, #7
 8002afa:	f53f aea2 	bmi.w	8002842 <HAL_ADC_ConfigChannel+0xca>
 8002afe:	42aa      	cmp	r2, r5
 8002b00:	f47f ae9f 	bne.w	8002842 <HAL_ADC_ConfigChannel+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b04:	688a      	ldr	r2, [r1, #8]
 8002b06:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002b0a:	433a      	orrs	r2, r7
 8002b0c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8002b10:	608a      	str	r2, [r1, #8]
}
 8002b12:	e696      	b.n	8002842 <HAL_ADC_ConfigChannel+0xca>
 8002b14:	000fffff 	.word	0x000fffff
 8002b18:	47ff0000 	.word	0x47ff0000
 8002b1c:	5c001000 	.word	0x5c001000
 8002b20:	40022000 	.word	0x40022000
 8002b24:	58026000 	.word	0x58026000
 8002b28:	cb840000 	.word	0xcb840000
 8002b2c:	c7520000 	.word	0xc7520000
 8002b30:	cfb80000 	.word	0xcfb80000
 8002b34:	40022300 	.word	0x40022300
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b38:	0206      	lsls	r6, r0, #8
 8002b3a:	f53f ae82 	bmi.w	8002842 <HAL_ADC_ConfigChannel+0xca>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3e:	42aa      	cmp	r2, r5
 8002b40:	f47f ae7f 	bne.w	8002842 <HAL_ADC_ConfigChannel+0xca>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b44:	688a      	ldr	r2, [r1, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b46:	4815      	ldr	r0, [pc, #84]	@ (8002b9c <HAL_ADC_ConfigChannel+0x424>)
 8002b48:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8002b4c:	433a      	orrs	r2, r7
 8002b4e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002b52:	608a      	str	r2, [r1, #8]
 8002b54:	6802      	ldr	r2, [r0, #0]
 8002b56:	4912      	ldr	r1, [pc, #72]	@ (8002ba0 <HAL_ADC_ConfigChannel+0x428>)
 8002b58:	0992      	lsrs	r2, r2, #6
 8002b5a:	fba1 1202 	umull	r1, r2, r1, r2
 8002b5e:	0992      	lsrs	r2, r2, #6
 8002b60:	3201      	adds	r2, #1
 8002b62:	0052      	lsls	r2, r2, #1
 8002b64:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8002b66:	9a01      	ldr	r2, [sp, #4]
 8002b68:	2a00      	cmp	r2, #0
 8002b6a:	f43f ae6a 	beq.w	8002842 <HAL_ADC_ConfigChannel+0xca>
                wait_loop_index--;
 8002b6e:	9a01      	ldr	r2, [sp, #4]
 8002b70:	3a01      	subs	r2, #1
 8002b72:	9201      	str	r2, [sp, #4]
              while (wait_loop_index != 0UL)
 8002b74:	9a01      	ldr	r2, [sp, #4]
 8002b76:	2a00      	cmp	r2, #0
 8002b78:	d1f9      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x3f6>
 8002b7a:	e662      	b.n	8002842 <HAL_ADC_ConfigChannel+0xca>
 8002b7c:	4c09      	ldr	r4, [pc, #36]	@ (8002ba4 <HAL_ADC_ConfigChannel+0x42c>)
 8002b7e:	e729      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x25c>
 8002b80:	2502      	movs	r5, #2
 8002b82:	e714      	b.n	80029ae <HAL_ADC_ConfigChannel+0x236>
 8002b84:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002b88:	e704      	b.n	8002994 <HAL_ADC_ConfigChannel+0x21c>
 8002b8a:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8002b8e:	e721      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x25c>
 8002b90:	2502      	movs	r5, #2
 8002b92:	e7a3      	b.n	8002adc <HAL_ADC_ConfigChannel+0x364>
 8002b94:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8002b98:	e794      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x34c>
 8002b9a:	bf00      	nop
 8002b9c:	24002068 	.word	0x24002068
 8002ba0:	053e2d63 	.word	0x053e2d63
 8002ba4:	fe500000 	.word	0xfe500000

08002ba8 <ADC_Enable>:

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ba8:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	07d1      	lsls	r1, r2, #31
 8002bae:	d501      	bpl.n	8002bb4 <ADC_Enable+0xc>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bb0:	2000      	movs	r0, #0
}
 8002bb2:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	4a23      	ldr	r2, [pc, #140]	@ (8002c44 <ADC_Enable+0x9c>)
 8002bb8:	4211      	tst	r1, r2
{
 8002bba:	b570      	push	{r4, r5, r6, lr}
 8002bbc:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002bbe:	d12f      	bne.n	8002c20 <ADC_Enable+0x78>
  MODIFY_REG(ADCx->CR,
 8002bc0:	6899      	ldr	r1, [r3, #8]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <ADC_Enable+0xa0>)
 8002bc4:	400a      	ands	r2, r1
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002bcc:	f7ff fc68 	bl	80024a0 <HAL_GetTick>
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c4c <ADC_Enable+0xa4>)
    tickstart = HAL_GetTick();
 8002bd4:	4605      	mov	r5, r0
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d02c      	beq.n	8002c34 <ADC_Enable+0x8c>
 8002bda:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d028      	beq.n	8002c34 <ADC_Enable+0x8c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002be2:	f102 52c0 	add.w	r2, r2, #402653184	@ 0x18000000
 8002be6:	f502 4284 	add.w	r2, r2, #16896	@ 0x4200
 8002bea:	6892      	ldr	r2, [r2, #8]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	07d2      	lsls	r2, r2, #31
 8002bf0:	d414      	bmi.n	8002c1c <ADC_Enable+0x74>
  MODIFY_REG(ADCx->CR,
 8002bf2:	4e15      	ldr	r6, [pc, #84]	@ (8002c48 <ADC_Enable+0xa0>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	07d0      	lsls	r0, r2, #31
 8002bf8:	d404      	bmi.n	8002c04 <ADC_Enable+0x5c>
  MODIFY_REG(ADCx->CR,
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	4032      	ands	r2, r6
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c04:	f7ff fc4c 	bl	80024a0 <HAL_GetTick>
 8002c08:	1b43      	subs	r3, r0, r5
 8002c0a:	2b02      	cmp	r3, #2
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c0c:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c0e:	d902      	bls.n	8002c16 <ADC_Enable+0x6e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	07d1      	lsls	r1, r2, #31
 8002c14:	d504      	bpl.n	8002c20 <ADC_Enable+0x78>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	07d2      	lsls	r2, r2, #31
 8002c1a:	d5eb      	bpl.n	8002bf4 <ADC_Enable+0x4c>
  return HAL_OK;
 8002c1c:	2000      	movs	r0, #0
}
 8002c1e:	bd70      	pop	{r4, r5, r6, pc}
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c20:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c24:	f043 0310 	orr.w	r3, r3, #16
 8002c28:	6563      	str	r3, [r4, #84]	@ 0x54
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002c2c:	f043 0301 	orr.w	r3, r3, #1
 8002c30:	65a3      	str	r3, [r4, #88]	@ 0x58
}
 8002c32:	bd70      	pop	{r4, r5, r6, pc}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c34:	4a06      	ldr	r2, [pc, #24]	@ (8002c50 <ADC_Enable+0xa8>)
 8002c36:	6892      	ldr	r2, [r2, #8]
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c38:	06d6      	lsls	r6, r2, #27
 8002c3a:	d0d7      	beq.n	8002bec <ADC_Enable+0x44>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c3c:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <ADC_Enable+0xac>)
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d1d4      	bne.n	8002bec <ADC_Enable+0x44>
 8002c42:	e7eb      	b.n	8002c1c <ADC_Enable+0x74>
 8002c44:	8000003f 	.word	0x8000003f
 8002c48:	7fffffc0 	.word	0x7fffffc0
 8002c4c:	40022000 	.word	0x40022000
 8002c50:	40022300 	.word	0x40022300
 8002c54:	40022100 	.word	0x40022100

08002c58 <HAL_ADC_Start_IT>:
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c58:	4a53      	ldr	r2, [pc, #332]	@ (8002da8 <HAL_ADC_Start_IT+0x150>)
 8002c5a:	6803      	ldr	r3, [r0, #0]
 8002c5c:	4293      	cmp	r3, r2
{
 8002c5e:	b570      	push	{r4, r5, r6, lr}
 8002c60:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c62:	d065      	beq.n	8002d30 <HAL_ADC_Start_IT+0xd8>
 8002c64:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d061      	beq.n	8002d30 <HAL_ADC_Start_IT+0xd8>
 8002c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8002dac <HAL_ADC_Start_IT+0x154>)
 8002c6e:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c70:	689d      	ldr	r5, [r3, #8]
 8002c72:	f015 0504 	ands.w	r5, r5, #4
 8002c76:	d161      	bne.n	8002d3c <HAL_ADC_Start_IT+0xe4>
    __HAL_LOCK(hadc);
 8002c78:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d05d      	beq.n	8002d3c <HAL_ADC_Start_IT+0xe4>
 8002c80:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002c82:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002c84:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002c88:	f7ff ff8e 	bl	8002ba8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	d157      	bne.n	8002d40 <HAL_ADC_Start_IT+0xe8>
      ADC_STATE_CLR_SET(hadc->State,
 8002c90:	6d63      	ldr	r3, [r4, #84]	@ 0x54
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002c92:	f006 061f 	and.w	r6, r6, #31
 8002c96:	4a46      	ldr	r2, [pc, #280]	@ (8002db0 <HAL_ADC_Start_IT+0x158>)
 8002c98:	401a      	ands	r2, r3
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c9a:	6823      	ldr	r3, [r4, #0]
      ADC_STATE_CLR_SET(hadc->State,
 8002c9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ca0:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ca2:	4a44      	ldr	r2, [pc, #272]	@ (8002db4 <HAL_ADC_Start_IT+0x15c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d04e      	beq.n	8002d46 <HAL_ADC_Start_IT+0xee>
 8002ca8:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002caa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002cac:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002cb0:	6562      	str	r2, [r4, #84]	@ 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002cb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002cb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002cb8:	d063      	beq.n	8002d82 <HAL_ADC_Start_IT+0x12a>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002cba:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002cbc:	f022 0206 	bic.w	r2, r2, #6
 8002cc0:	65a2      	str	r2, [r4, #88]	@ 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cc2:	221c      	movs	r2, #28
      switch (hadc->Init.EOCSelection)
 8002cc4:	6925      	ldr	r5, [r4, #16]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002cc6:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8002cc8:	2200      	movs	r2, #0
      switch (hadc->Init.EOCSelection)
 8002cca:	2d08      	cmp	r5, #8
      __HAL_UNLOCK(hadc);
 8002ccc:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	f022 021c 	bic.w	r2, r2, #28
 8002cd6:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002cd8:	685a      	ldr	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002cda:	bf0c      	ite	eq
 8002cdc:	f042 0208 	orreq.w	r2, r2, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002ce0:	f042 0204 	orrne.w	r2, r2, #4
 8002ce4:	605a      	str	r2, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ce6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002ce8:	b91a      	cbnz	r2, 8002cf2 <HAL_ADC_Start_IT+0x9a>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	f042 0210 	orr.w	r2, r2, #16
 8002cf0:	605a      	str	r2, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cf2:	428b      	cmp	r3, r1
 8002cf4:	d02b      	beq.n	8002d4e <HAL_ADC_Start_IT+0xf6>
 8002cf6:	f240 2221 	movw	r2, #545	@ 0x221
 8002cfa:	40f2      	lsrs	r2, r6
 8002cfc:	07d6      	lsls	r6, r2, #31
 8002cfe:	d426      	bmi.n	8002d4e <HAL_ADC_Start_IT+0xf6>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d02:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002d06:	6562      	str	r2, [r4, #84]	@ 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d08:	68ca      	ldr	r2, [r1, #12]
 8002d0a:	0192      	lsls	r2, r2, #6
 8002d0c:	d50f      	bpl.n	8002d2e <HAL_ADC_Start_IT+0xd6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
          switch (hadc->Init.EOCSelection)
 8002d10:	2d08      	cmp	r5, #8
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d12:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002d16:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d1a:	6562      	str	r2, [r4, #84]	@ 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d1c:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002d1e:	d03a      	beq.n	8002d96 <HAL_ADC_Start_IT+0x13e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d24:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	605a      	str	r2, [r3, #4]
}
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d30:	4a21      	ldr	r2, [pc, #132]	@ (8002db8 <HAL_ADC_Start_IT+0x160>)
 8002d32:	6896      	ldr	r6, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d34:	689d      	ldr	r5, [r3, #8]
 8002d36:	f015 0504 	ands.w	r5, r5, #4
 8002d3a:	d09d      	beq.n	8002c78 <HAL_ADC_Start_IT+0x20>
    __HAL_LOCK(hadc);
 8002d3c:	2002      	movs	r0, #2
}
 8002d3e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 8002d40:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
}
 8002d44:	bd70      	pop	{r4, r5, r6, pc}
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d46:	4918      	ldr	r1, [pc, #96]	@ (8002da8 <HAL_ADC_Start_IT+0x150>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d48:	2e00      	cmp	r6, #0
 8002d4a:	d1b2      	bne.n	8002cb2 <HAL_ADC_Start_IT+0x5a>
 8002d4c:	e7ad      	b.n	8002caa <HAL_ADC_Start_IT+0x52>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002d4e:	68da      	ldr	r2, [r3, #12]
 8002d50:	0191      	lsls	r1, r2, #6
 8002d52:	d50f      	bpl.n	8002d74 <HAL_ADC_Start_IT+0x11c>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
          switch (hadc->Init.EOCSelection)
 8002d56:	2d08      	cmp	r5, #8
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d58:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002d5c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d60:	6562      	str	r2, [r4, #84]	@ 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d62:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002d64:	d00f      	beq.n	8002d86 <HAL_ADC_Start_IT+0x12e>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d6a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	f042 0220 	orr.w	r2, r2, #32
 8002d72:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_ADC_Start_IT+0x164>)
 8002d78:	400a      	ands	r2, r1
 8002d7a:	f042 0204 	orr.w	r2, r2, #4
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
        ADC_CLEAR_ERRORCODE(hadc);
 8002d82:	65a2      	str	r2, [r4, #88]	@ 0x58
 8002d84:	e79d      	b.n	8002cc2 <HAL_ADC_Start_IT+0x6a>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d86:	f022 0220 	bic.w	r2, r2, #32
 8002d8a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d92:	605a      	str	r2, [r3, #4]
              break;
 8002d94:	e7ee      	b.n	8002d74 <HAL_ADC_Start_IT+0x11c>
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d96:	f022 0220 	bic.w	r2, r2, #32
 8002d9a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da2:	605a      	str	r2, [r3, #4]
}
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
 8002da6:	bf00      	nop
 8002da8:	40022000 	.word	0x40022000
 8002dac:	58026300 	.word	0x58026300
 8002db0:	fffff0fe 	.word	0xfffff0fe
 8002db4:	40022100 	.word	0x40022100
 8002db8:	40022300 	.word	0x40022300
 8002dbc:	7fffffc0 	.word	0x7fffffc0

08002dc0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002dc0:	b538      	push	{r3, r4, r5, lr}
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dc2:	4a56      	ldr	r2, [pc, #344]	@ (8002f1c <ADC_ConfigureBoostMode+0x15c>)
{
 8002dc4:	4604      	mov	r4, r0
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dc6:	6803      	ldr	r3, [r0, #0]
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d025      	beq.n	8002e18 <ADC_ConfigureBoostMode+0x58>
 8002dcc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d021      	beq.n	8002e18 <ADC_ConfigureBoostMode+0x58>
 8002dd4:	4b52      	ldr	r3, [pc, #328]	@ (8002f20 <ADC_ConfigureBoostMode+0x160>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8002ddc:	d021      	beq.n	8002e22 <ADC_ConfigureBoostMode+0x62>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002dde:	f002 ffb1 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002de2:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCC_GetHCLKFreq();
 8002de4:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002dea:	f000 8086 	beq.w	8002efa <ADC_ConfigureBoostMode+0x13a>
 8002dee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002df2:	d06f      	beq.n	8002ed4 <ADC_ConfigureBoostMode+0x114>
 8002df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df8:	d07f      	beq.n	8002efa <ADC_ConfigureBoostMode+0x13a>
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002dfa:	f7ff fb69 	bl	80024d0 <HAL_GetREVID>
 8002dfe:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002e02:	4298      	cmp	r0, r3
 8002e04:	d84b      	bhi.n	8002e9e <ADC_ConfigureBoostMode+0xde>
  {
    if (freq > 20000000UL)
 8002e06:	4a47      	ldr	r2, [pc, #284]	@ (8002f24 <ADC_ConfigureBoostMode+0x164>)
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e08:	6823      	ldr	r3, [r4, #0]
    if (freq > 20000000UL)
 8002e0a:	4295      	cmp	r5, r2
 8002e0c:	d92a      	bls.n	8002e64 <ADC_ConfigureBoostMode+0xa4>
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e14:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002e16:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002e18:	4b43      	ldr	r3, [pc, #268]	@ (8002f28 <ADC_ConfigureBoostMode+0x168>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 8002e20:	d1dd      	bne.n	8002dde <ADC_ConfigureBoostMode+0x1e>
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e22:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e26:	2100      	movs	r1, #0
 8002e28:	f004 fa7a 	bl	8007320 <HAL_RCCEx_GetPeriphCLKFreq>
    switch (hadc->Init.ClockPrescaler)
 8002e2c:	6863      	ldr	r3, [r4, #4]
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e2e:	4605      	mov	r5, r0
    switch (hadc->Init.ClockPrescaler)
 8002e30:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002e34:	d06b      	beq.n	8002f0e <ADC_ConfigureBoostMode+0x14e>
 8002e36:	d808      	bhi.n	8002e4a <ADC_ConfigureBoostMode+0x8a>
 8002e38:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002e3c:	d054      	beq.n	8002ee8 <ADC_ConfigureBoostMode+0x128>
 8002e3e:	d916      	bls.n	8002e6e <ADC_ConfigureBoostMode+0xae>
 8002e40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e44:	d1d9      	bne.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
        freq /= 32UL;
 8002e46:	0945      	lsrs	r5, r0, #5
        break;
 8002e48:	e7d7      	b.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8002e4a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002e4e:	d049      	beq.n	8002ee4 <ADC_ConfigureBoostMode+0x124>
 8002e50:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002e54:	d1d1      	bne.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002e56:	f7ff fb3b 	bl	80024d0 <HAL_GetREVID>
 8002e5a:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002e5e:	4298      	cmp	r0, r3
 8002e60:	d82e      	bhi.n	8002ec0 <ADC_ConfigureBoostMode+0x100>
 8002e62:	6823      	ldr	r3, [r4, #0]
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hadc->Init.ClockPrescaler)
 8002e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e72:	d006      	beq.n	8002e82 <ADC_ConfigureBoostMode+0xc2>
 8002e74:	d90a      	bls.n	8002e8c <ADC_ConfigureBoostMode+0xcc>
 8002e76:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002e7a:	d002      	beq.n	8002e82 <ADC_ConfigureBoostMode+0xc2>
 8002e7c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002e80:	d1bb      	bne.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002e82:	0c9b      	lsrs	r3, r3, #18
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fbb5 f5f3 	udiv	r5, r5, r3
        break;
 8002e8a:	e7b6      	b.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
    switch (hadc->Init.ClockPrescaler)
 8002e8c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002e90:	d0f7      	beq.n	8002e82 <ADC_ConfigureBoostMode+0xc2>
 8002e92:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002e96:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 8002e9a:	d0f2      	beq.n	8002e82 <ADC_ConfigureBoostMode+0xc2>
 8002e9c:	e7ad      	b.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
    if (freq <= 6250000UL)
 8002e9e:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <ADC_ConfigureBoostMode+0x16c>)
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002ea0:	6823      	ldr	r3, [r4, #0]
    if (freq <= 6250000UL)
 8002ea2:	4295      	cmp	r5, r2
 8002ea4:	d911      	bls.n	8002eca <ADC_ConfigureBoostMode+0x10a>
    else if (freq <= 12500000UL)
 8002ea6:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <ADC_ConfigureBoostMode+0x170>)
 8002ea8:	4295      	cmp	r5, r2
 8002eaa:	d91f      	bls.n	8002eec <ADC_ConfigureBoostMode+0x12c>
    else if (freq <= 25000000UL)
 8002eac:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <ADC_ConfigureBoostMode+0x174>)
 8002eae:	4295      	cmp	r5, r2
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002eb0:	689a      	ldr	r2, [r3, #8]
    else if (freq <= 25000000UL)
 8002eb2:	d82e      	bhi.n	8002f12 <ADC_ConfigureBoostMode+0x152>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002eb4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ebc:	609a      	str	r2, [r3, #8]
}
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
    if (freq <= 6250000UL)
 8002ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <ADC_ConfigureBoostMode+0x16c>)
 8002ec2:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	d310      	bcc.n	8002eec <ADC_ConfigureBoostMode+0x12c>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ed0:	609a      	str	r2, [r3, #8]
}
 8002ed2:	bd38      	pop	{r3, r4, r5, pc}
        freq /= 4UL;
 8002ed4:	0885      	lsrs	r5, r0, #2
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ed6:	f7ff fafb 	bl	80024d0 <HAL_GetREVID>
 8002eda:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002ede:	4298      	cmp	r0, r3
 8002ee0:	d8dd      	bhi.n	8002e9e <ADC_ConfigureBoostMode+0xde>
 8002ee2:	e790      	b.n	8002e06 <ADC_ConfigureBoostMode+0x46>
        freq /= 128UL;
 8002ee4:	09c5      	lsrs	r5, r0, #7
        break;
 8002ee6:	e788      	b.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
        freq /= 16UL;
 8002ee8:	0905      	lsrs	r5, r0, #4
        break;
 8002eea:	e786      	b.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002ef2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bd38      	pop	{r3, r4, r5, pc}
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002efa:	0c1b      	lsrs	r3, r3, #16
 8002efc:	fbb5 f5f3 	udiv	r5, r5, r3
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f00:	f7ff fae6 	bl	80024d0 <HAL_GetREVID>
 8002f04:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002f08:	4298      	cmp	r0, r3
 8002f0a:	d8c8      	bhi.n	8002e9e <ADC_ConfigureBoostMode+0xde>
 8002f0c:	e77b      	b.n	8002e06 <ADC_ConfigureBoostMode+0x46>
        freq /= 64UL;
 8002f0e:	0985      	lsrs	r5, r0, #6
        break;
 8002f10:	e773      	b.n	8002dfa <ADC_ConfigureBoostMode+0x3a>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002f12:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bd38      	pop	{r3, r4, r5, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	58026300 	.word	0x58026300
 8002f24:	01312d00 	.word	0x01312d00
 8002f28:	40022300 	.word	0x40022300
 8002f2c:	00bebc21 	.word	0x00bebc21
 8002f30:	017d7841 	.word	0x017d7841
 8002f34:	02faf081 	.word	0x02faf081

08002f38 <HAL_ADC_Init>:
{
 8002f38:	b570      	push	{r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002f3a:	2300      	movs	r3, #0
{
 8002f3c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8002f3e:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8002f40:	2800      	cmp	r0, #0
 8002f42:	f000 80a9 	beq.w	8003098 <HAL_ADC_Init+0x160>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f46:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002f48:	4604      	mov	r4, r0
 8002f4a:	2d00      	cmp	r5, #0
 8002f4c:	f000 80aa 	beq.w	80030a4 <HAL_ADC_Init+0x16c>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f50:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f52:	6893      	ldr	r3, [r2, #8]
 8002f54:	009e      	lsls	r6, r3, #2
 8002f56:	d503      	bpl.n	8002f60 <HAL_ADC_Init+0x28>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f58:	6891      	ldr	r1, [r2, #8]
 8002f5a:	4b71      	ldr	r3, [pc, #452]	@ (8003120 <HAL_ADC_Init+0x1e8>)
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f60:	6893      	ldr	r3, [r2, #8]
 8002f62:	00dd      	lsls	r5, r3, #3
 8002f64:	d416      	bmi.n	8002f94 <HAL_ADC_Init+0x5c>
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f66:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_ADC_Init+0x1ec>)
 8002f68:	496f      	ldr	r1, [pc, #444]	@ (8003128 <HAL_ADC_Init+0x1f0>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002f6c:	6890      	ldr	r0, [r2, #8]
 8002f6e:	099b      	lsrs	r3, r3, #6
 8002f70:	fba1 1303 	umull	r1, r3, r1, r3
 8002f74:	496d      	ldr	r1, [pc, #436]	@ (800312c <HAL_ADC_Init+0x1f4>)
 8002f76:	099b      	lsrs	r3, r3, #6
 8002f78:	4001      	ands	r1, r0
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8002f80:	6091      	str	r1, [r2, #8]
 8002f82:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002f84:	9b01      	ldr	r3, [sp, #4]
 8002f86:	b12b      	cbz	r3, 8002f94 <HAL_ADC_Init+0x5c>
      wait_loop_index--;
 8002f88:	9b01      	ldr	r3, [sp, #4]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002f8e:	9b01      	ldr	r3, [sp, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f9      	bne.n	8002f88 <HAL_ADC_Init+0x50>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f94:	6893      	ldr	r3, [r2, #8]
 8002f96:	00d8      	lsls	r0, r3, #3
 8002f98:	f100 8082 	bmi.w	80030a0 <HAL_ADC_Init+0x168>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    tmp_hal_status = HAL_ERROR;
 8002f9e:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fa0:	f043 0310 	orr.w	r3, r3, #16
 8002fa4:	6563      	str	r3, [r4, #84]	@ 0x54
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002fa8:	432b      	orrs	r3, r5
 8002faa:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fac:	6893      	ldr	r3, [r2, #8]
 8002fae:	f013 0f04 	tst.w	r3, #4
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fb2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002fb4:	d16c      	bne.n	8003090 <HAL_ADC_Init+0x158>
 8002fb6:	06d9      	lsls	r1, r3, #27
 8002fb8:	d46a      	bmi.n	8003090 <HAL_ADC_Init+0x158>
    ADC_STATE_CLR_SET(hadc->State,
 8002fba:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002fbc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	6563      	str	r3, [r4, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002fc6:	6893      	ldr	r3, [r2, #8]
 8002fc8:	07db      	lsls	r3, r3, #31
 8002fca:	d40c      	bmi.n	8002fe6 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fcc:	4b58      	ldr	r3, [pc, #352]	@ (8003130 <HAL_ADC_Init+0x1f8>)
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	f000 8081 	beq.w	80030d6 <HAL_ADC_Init+0x19e>
 8002fd4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d07c      	beq.n	80030d6 <HAL_ADC_Init+0x19e>
 8002fdc:	4b55      	ldr	r3, [pc, #340]	@ (8003134 <HAL_ADC_Init+0x1fc>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	07d9      	lsls	r1, r3, #31
 8002fe2:	f140 8089 	bpl.w	80030f8 <HAL_ADC_Init+0x1c0>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002fe6:	f7ff fa73 	bl	80024d0 <HAL_GetREVID>
 8002fea:	f241 0303 	movw	r3, #4099	@ 0x1003
 8002fee:	68a1      	ldr	r1, [r4, #8]
 8002ff0:	4298      	cmp	r0, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff2:	7f23      	ldrb	r3, [r4, #28]
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ff4:	d85c      	bhi.n	80030b0 <HAL_ADC_Init+0x178>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ff6:	f894 c015 	ldrb.w	ip, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ffa:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ffc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002ffe:	ea42 324c 	orr.w	r2, r2, ip, lsl #13
 8003002:	4302      	orrs	r2, r0
 8003004:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003006:	2b01      	cmp	r3, #1
 8003008:	d103      	bne.n	8003012 <HAL_ADC_Init+0xda>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800300a:	6a23      	ldr	r3, [r4, #32]
 800300c:	3b01      	subs	r3, #1
 800300e:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003012:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003014:	b123      	cbz	r3, 8003020 <HAL_ADC_Init+0xe8>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003016:	f403 7378 	and.w	r3, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800301a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800301c:	430b      	orrs	r3, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301e:	431a      	orrs	r2, r3
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	4945      	ldr	r1, [pc, #276]	@ (8003138 <HAL_ADC_Init+0x200>)
 8003024:	68d8      	ldr	r0, [r3, #12]
 8003026:	4001      	ands	r1, r0
 8003028:	4311      	orrs	r1, r2
 800302a:	60d9      	str	r1, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	f012 0f04 	tst.w	r2, #4
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003032:	689a      	ldr	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003034:	d11c      	bne.n	8003070 <HAL_ADC_Init+0x138>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003036:	0712      	lsls	r2, r2, #28
 8003038:	d41a      	bmi.n	8003070 <HAL_ADC_Init+0x138>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800303a:	68d8      	ldr	r0, [r3, #12]
 800303c:	4a3f      	ldr	r2, [pc, #252]	@ (800313c <HAL_ADC_Init+0x204>)
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800303e:	7d21      	ldrb	r1, [r4, #20]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003040:	4002      	ands	r2, r0
 8003042:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
 8003046:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 800304c:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8003050:	2a01      	cmp	r2, #1
 8003052:	d053      	beq.n	80030fc <HAL_ADC_Init+0x1c4>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	f022 0201 	bic.w	r2, r2, #1
 800305a:	611a      	str	r2, [r3, #16]
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800305c:	691a      	ldr	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800305e:	4620      	mov	r0, r4
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003062:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003066:	430a      	orrs	r2, r1
 8003068:	611a      	str	r2, [r3, #16]
      ADC_ConfigureBoostMode(hadc);
 800306a:	f7ff fea9 	bl	8002dc0 <ADC_ConfigureBoostMode>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800306e:	6823      	ldr	r3, [r4, #0]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003070:	68e2      	ldr	r2, [r4, #12]
 8003072:	2a01      	cmp	r2, #1
 8003074:	d027      	beq.n	80030c6 <HAL_ADC_Init+0x18e>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003078:	f022 020f 	bic.w	r2, r2, #15
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800307e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
}
 8003080:	4628      	mov	r0, r5
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6563      	str	r3, [r4, #84]	@ 0x54
}
 800308c:	b002      	add	sp, #8
 800308e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003090:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003092:	f043 0310 	orr.w	r3, r3, #16
 8003096:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 8003098:	2501      	movs	r5, #1
}
 800309a:	4628      	mov	r0, r5
 800309c:	b002      	add	sp, #8
 800309e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a0:	2500      	movs	r5, #0
 80030a2:	e783      	b.n	8002fac <HAL_ADC_Init+0x74>
    HAL_ADC_MspInit(hadc);
 80030a4:	f7fe fef4 	bl	8001e90 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80030a8:	65a5      	str	r5, [r4, #88]	@ 0x58
    hadc->Lock = HAL_UNLOCKED;
 80030aa:	f884 5050 	strb.w	r5, [r4, #80]	@ 0x50
 80030ae:	e74f      	b.n	8002f50 <HAL_ADC_Init+0x18>
    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80030b0:	2910      	cmp	r1, #16
 80030b2:	d1a0      	bne.n	8002ff6 <HAL_ADC_Init+0xbe>
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b4:	7d61      	ldrb	r1, [r4, #21]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030b6:	041a      	lsls	r2, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80030bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80030be:	430a      	orrs	r2, r1
 80030c0:	f042 021c 	orr.w	r2, r2, #28
 80030c4:	e79f      	b.n	8003006 <HAL_ADC_Init+0xce>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80030c8:	69a2      	ldr	r2, [r4, #24]
 80030ca:	f021 010f 	bic.w	r1, r1, #15
 80030ce:	3a01      	subs	r2, #1
 80030d0:	430a      	orrs	r2, r1
 80030d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80030d4:	e7d3      	b.n	800307e <HAL_ADC_Init+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030d6:	4a16      	ldr	r2, [pc, #88]	@ (8003130 <HAL_ADC_Init+0x1f8>)
 80030d8:	4b19      	ldr	r3, [pc, #100]	@ (8003140 <HAL_ADC_Init+0x208>)
 80030da:	6892      	ldr	r2, [r2, #8]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	07de      	lsls	r6, r3, #31
 80030e0:	d481      	bmi.n	8002fe6 <HAL_ADC_Init+0xae>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030e2:	07d0      	lsls	r0, r2, #31
 80030e4:	f53f af7f 	bmi.w	8002fe6 <HAL_ADC_Init+0xae>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030e8:	4a16      	ldr	r2, [pc, #88]	@ (8003144 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80030ea:	6893      	ldr	r3, [r2, #8]
 80030ec:	6861      	ldr	r1, [r4, #4]
 80030ee:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6093      	str	r3, [r2, #8]
}
 80030f6:	e776      	b.n	8002fe6 <HAL_ADC_Init+0xae>
 80030f8:	4a13      	ldr	r2, [pc, #76]	@ (8003148 <HAL_ADC_Init+0x210>)
 80030fa:	e7f6      	b.n	80030ea <HAL_ADC_Init+0x1b2>
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80030fc:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8003100:	6c66      	ldr	r6, [r4, #68]	@ 0x44
 8003102:	3901      	subs	r1, #1
 8003104:	6918      	ldr	r0, [r3, #16]
 8003106:	4332      	orrs	r2, r6
 8003108:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800310c:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800310e:	430a      	orrs	r2, r1
 8003110:	490e      	ldr	r1, [pc, #56]	@ (800314c <HAL_ADC_Init+0x214>)
 8003112:	4001      	ands	r1, r0
 8003114:	430a      	orrs	r2, r1
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	611a      	str	r2, [r3, #16]
 800311c:	e79e      	b.n	800305c <HAL_ADC_Init+0x124>
 800311e:	bf00      	nop
 8003120:	5fffffc0 	.word	0x5fffffc0
 8003124:	24002068 	.word	0x24002068
 8003128:	053e2d63 	.word	0x053e2d63
 800312c:	6fffffc0 	.word	0x6fffffc0
 8003130:	40022000 	.word	0x40022000
 8003134:	58026000 	.word	0x58026000
 8003138:	fff0c003 	.word	0xfff0c003
 800313c:	ffffbffc 	.word	0xffffbffc
 8003140:	40022100 	.word	0x40022100
 8003144:	40022300 	.word	0x40022300
 8003148:	58026300 	.word	0x58026300
 800314c:	fc00f81e 	.word	0xfc00f81e

08003150 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop

08003154 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            and if a new injected context is set when queue is full (maximum 2
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop

08003158 <HAL_ADCEx_LevelOutOfWindow2Callback>:
/**
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop

0800315c <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop

08003160 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop

08003164 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003164:	4906      	ldr	r1, [pc, #24]	@ (8003180 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003166:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800316a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800316c:	4b05      	ldr	r3, [pc, #20]	@ (8003184 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800316e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003170:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003174:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003178:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800317a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800317c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00
 8003184:	05fa0000 	.word	0x05fa0000

08003188 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003188:	4b1a      	ldr	r3, [pc, #104]	@ (80031f4 <HAL_NVIC_SetPriority+0x6c>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003190:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003192:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003196:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319a:	f1be 0f04 	cmp.w	lr, #4
 800319e:	bf28      	it	cs
 80031a0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a4:	f1bc 0f06 	cmp.w	ip, #6
 80031a8:	d91a      	bls.n	80031e0 <HAL_NVIC_SetPriority+0x58>
 80031aa:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031ae:	f04f 33ff 	mov.w	r3, #4294967295
 80031b2:	fa03 f30c 	lsl.w	r3, r3, ip
 80031b6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ba:	f04f 33ff 	mov.w	r3, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80031be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c0:	fa03 f30e 	lsl.w	r3, r3, lr
 80031c4:	ea21 0303 	bic.w	r3, r1, r3
 80031c8:	fa03 f30c 	lsl.w	r3, r3, ip
 80031cc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80031d4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80031d6:	db06      	blt.n	80031e6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031d8:	4a07      	ldr	r2, [pc, #28]	@ (80031f8 <HAL_NVIC_SetPriority+0x70>)
 80031da:	5413      	strb	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80031dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80031e0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	4694      	mov	ip, r2
 80031e4:	e7e9      	b.n	80031ba <HAL_NVIC_SetPriority+0x32>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e6:	f000 000f 	and.w	r0, r0, #15
 80031ea:	4a04      	ldr	r2, [pc, #16]	@ (80031fc <HAL_NVIC_SetPriority+0x74>)
 80031ec:	5413      	strb	r3, [r2, r0]
 80031ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00
 80031f8:	e000e400 	.word	0xe000e400
 80031fc:	e000ed14 	.word	0xe000ed14

08003200 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003200:	2800      	cmp	r0, #0
 8003202:	db07      	blt.n	8003214 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003204:	2301      	movs	r3, #1
 8003206:	f000 011f 	and.w	r1, r0, #31
 800320a:	4a03      	ldr	r2, [pc, #12]	@ (8003218 <HAL_NVIC_EnableIRQ+0x18>)
 800320c:	0940      	lsrs	r0, r0, #5
 800320e:	408b      	lsls	r3, r1
 8003210:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e100 	.word	0xe000e100

0800321c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800321c:	1e43      	subs	r3, r0, #1
 800321e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003222:	d301      	bcc.n	8003228 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003224:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003226:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003228:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322e:	4905      	ldr	r1, [pc, #20]	@ (8003244 <HAL_SYSTICK_Config+0x28>)
 8003230:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003234:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003236:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003238:	f881 c023 	strb.w	ip, [r1, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800323c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800323e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003248:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800324c:	4b04      	ldr	r3, [pc, #16]	@ (8003260 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800324e:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003250:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003252:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003256:	625a      	str	r2, [r3, #36]	@ 0x24
  MPU->CTRL = 0;
 8003258:	f8c3 1094 	str.w	r1, [r3, #148]	@ 0x94
}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003264:	4b06      	ldr	r3, [pc, #24]	@ (8003280 <HAL_MPU_Enable+0x1c>)
 8003266:	f040 0001 	orr.w	r0, r0, #1
 800326a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800326e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003270:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003276:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800327a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800327e:	4770      	bx	lr
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003284:	4a16      	ldr	r2, [pc, #88]	@ (80032e0 <HAL_MPU_ConfigRegion+0x5c>)
 8003286:	7843      	ldrb	r3, [r0, #1]
 8003288:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800328c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003298:	6843      	ldr	r3, [r0, #4]
 800329a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800329e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032a0:	f890 c00c 	ldrb.w	ip, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80032a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80032a6:	7801      	ldrb	r1, [r0, #0]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032a8:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80032ac:	f890 c00a 	ldrb.w	ip, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032b0:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80032b2:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032b4:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80032b8:	f890 c00e 	ldrb.w	ip, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032bc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80032c0:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032c2:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80032c6:	f890 c009 	ldrb.w	ip, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80032ca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80032ce:	7a01      	ldrb	r1, [r0, #8]
 80032d0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80032d4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80032d8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80032e4:	b188      	cbz	r0, 800330a <HAL_DAC_Init+0x26>
{
 80032e6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032e8:	7903      	ldrb	r3, [r0, #4]
 80032ea:	4604      	mov	r4, r0
 80032ec:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80032f0:	b13b      	cbz	r3, 8003302 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032f2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80032f4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032f6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80032f8:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80032fa:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032fc:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80032fe:	7122      	strb	r2, [r4, #4]
}
 8003300:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003302:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003304:	f7fe fe10 	bl	8001f28 <HAL_DAC_MspInit>
 8003308:	e7f3      	b.n	80032f2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800330a:	2001      	movs	r0, #1
}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop

08003310 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003312:	9f06      	ldr	r7, [sp, #24]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003314:	2800      	cmp	r0, #0
 8003316:	d05e      	beq.n	80033d6 <HAL_DAC_Start_DMA+0xc6>
 8003318:	460e      	mov	r6, r1
 800331a:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800331c:	7942      	ldrb	r2, [r0, #5]
 800331e:	4604      	mov	r4, r0
 8003320:	2a01      	cmp	r2, #1
 8003322:	d060      	beq.n	80033e6 <HAL_DAC_Start_DMA+0xd6>
 8003324:	2201      	movs	r2, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003326:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8003328:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800332a:	2202      	movs	r2, #2
 800332c:	7102      	strb	r2, [r0, #4]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800332e:	682a      	ldr	r2, [r5, #0]
  if (Channel == DAC_CHANNEL_1)
 8003330:	bb3e      	cbnz	r6, 8003382 <HAL_DAC_Start_DMA+0x72>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003332:	6880      	ldr	r0, [r0, #8]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003334:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003338:	f8df c0b0 	ldr.w	ip, [pc, #176]	@ 80033ec <HAL_DAC_Start_DMA+0xdc>
 800333c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003340:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80033f0 <HAL_DAC_Start_DMA+0xe0>
 8003344:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003348:	f8df c0a8 	ldr.w	ip, [pc, #168]	@ 80033f4 <HAL_DAC_Start_DMA+0xe4>
 800334c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003350:	602a      	str	r2, [r5, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8003352:	2f00      	cmp	r7, #0
 8003354:	d044      	beq.n	80033e0 <HAL_DAC_Start_DMA+0xd0>
 8003356:	2f04      	cmp	r7, #4
 8003358:	d137      	bne.n	80033ca <HAL_DAC_Start_DMA+0xba>
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
        break;
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800335a:	f105 020c 	add.w	r2, r5, #12
  }

  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800335e:	682f      	ldr	r7, [r5, #0]
 8003360:	f447 5700 	orr.w	r7, r7, #8192	@ 0x2000
 8003364:	602f      	str	r7, [r5, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8003366:	f000 fca1 	bl	8003cac <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800336a:	2300      	movs	r3, #0
 800336c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800336e:	bb38      	cbnz	r0, 80033c0 <HAL_DAC_Start_DMA+0xb0>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8003370:	6822      	ldr	r2, [r4, #0]
 8003372:	f006 0110 	and.w	r1, r6, #16
 8003376:	2301      	movs	r3, #1
 8003378:	6814      	ldr	r4, [r2, #0]
 800337a:	408b      	lsls	r3, r1
 800337c:	4323      	orrs	r3, r4
 800337e:	6013      	str	r3, [r2, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8003380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003382:	68c0      	ldr	r0, [r0, #12]
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003384:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8003388:	f8df c06c 	ldr.w	ip, [pc, #108]	@ 80033f8 <HAL_DAC_Start_DMA+0xe8>
 800338c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003390:	f8df c068 	ldr.w	ip, [pc, #104]	@ 80033fc <HAL_DAC_Start_DMA+0xec>
 8003394:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8003398:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8003400 <HAL_DAC_Start_DMA+0xf0>
 800339c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80033a0:	602a      	str	r2, [r5, #0]
    switch (Alignment)
 80033a2:	b1d7      	cbz	r7, 80033da <HAL_DAC_Start_DMA+0xca>
 80033a4:	2f04      	cmp	r7, #4
 80033a6:	d113      	bne.n	80033d0 <HAL_DAC_Start_DMA+0xc0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80033a8:	f105 0218 	add.w	r2, r5, #24
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80033ac:	682f      	ldr	r7, [r5, #0]
 80033ae:	f047 5700 	orr.w	r7, r7, #536870912	@ 0x20000000
 80033b2:	602f      	str	r7, [r5, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80033b4:	f000 fc7a 	bl	8003cac <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 80033b8:	2300      	movs	r3, #0
 80033ba:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 80033bc:	2800      	cmp	r0, #0
 80033be:	d0d7      	beq.n	8003370 <HAL_DAC_Start_DMA+0x60>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80033c0:	6923      	ldr	r3, [r4, #16]
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6123      	str	r3, [r4, #16]
}
 80033c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80033ca:	f105 0210 	add.w	r2, r5, #16
  if (Channel == DAC_CHANNEL_1)
 80033ce:	e7c6      	b.n	800335e <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80033d0:	f105 021c 	add.w	r2, r5, #28
  if (Channel == DAC_CHANNEL_1)
 80033d4:	e7ea      	b.n	80033ac <HAL_DAC_Start_DMA+0x9c>
    return HAL_ERROR;
 80033d6:	2001      	movs	r0, #1
}
 80033d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80033da:	f105 0214 	add.w	r2, r5, #20
  if (Channel == DAC_CHANNEL_1)
 80033de:	e7e5      	b.n	80033ac <HAL_DAC_Start_DMA+0x9c>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80033e0:	f105 0208 	add.w	r2, r5, #8
  if (Channel == DAC_CHANNEL_1)
 80033e4:	e7bb      	b.n	800335e <HAL_DAC_Start_DMA+0x4e>
  __HAL_LOCK(hdac);
 80033e6:	2002      	movs	r0, #2
}
 80033e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033ea:	bf00      	nop
 80033ec:	08003405 	.word	0x08003405
 80033f0:	08003415 	.word	0x08003415
 80033f4:	08003425 	.word	0x08003425
 80033f8:	08003595 	.word	0x08003595
 80033fc:	080035a9 	.word	0x080035a9
 8003400:	080035b9 	.word	0x080035b9

08003404 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003404:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003406:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003408:	4620      	mov	r0, r4
 800340a:	f7fd feaf 	bl	800116c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800340e:	2301      	movs	r3, #1
 8003410:	7123      	strb	r3, [r4, #4]
}
 8003412:	bd10      	pop	{r4, pc}

08003414 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003414:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8003416:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003418:	f7fd fe9e 	bl	8001158 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800341c:	bd08      	pop	{r3, pc}
 800341e:	bf00      	nop

08003420 <HAL_DAC_ErrorCallbackCh1>:
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop

08003424 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003424:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003426:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003428:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800342a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8003432:	f7ff fff5 	bl	8003420 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003436:	2301      	movs	r3, #1
 8003438:	7123      	strb	r3, [r4, #4]
}
 800343a:	bd10      	pop	{r4, pc}

0800343c <HAL_DAC_ConfigChannel>:
  if ((hdac == NULL) || (sConfig == NULL))
 800343c:	2800      	cmp	r0, #0
 800343e:	f000 8086 	beq.w	800354e <HAL_DAC_ConfigChannel+0x112>
{
 8003442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003446:	460d      	mov	r5, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8003448:	2900      	cmp	r1, #0
 800344a:	d04d      	beq.n	80034e8 <HAL_DAC_ConfigChannel+0xac>
  __HAL_LOCK(hdac);
 800344c:	7943      	ldrb	r3, [r0, #5]
 800344e:	4604      	mov	r4, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003450:	6809      	ldr	r1, [r1, #0]
  __HAL_LOCK(hdac);
 8003452:	2b01      	cmp	r3, #1
 8003454:	d079      	beq.n	800354a <HAL_DAC_ConfigChannel+0x10e>
 8003456:	2301      	movs	r3, #1
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003458:	2904      	cmp	r1, #4
 800345a:	4616      	mov	r6, r2
  __HAL_LOCK(hdac);
 800345c:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 800345e:	f04f 0302 	mov.w	r3, #2
 8003462:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003464:	d043      	beq.n	80034ee <HAL_DAC_ConfigChannel+0xb2>
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003466:	f002 0210 	and.w	r2, r2, #16
    tmpreg1 = hdac->Instance->CCR;
 800346a:	6803      	ldr	r3, [r0, #0]
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800346c:	6928      	ldr	r0, [r5, #16]
 800346e:	2801      	cmp	r0, #1
 8003470:	d108      	bne.n	8003484 <HAL_DAC_ConfigChannel+0x48>
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003472:	201f      	movs	r0, #31
    tmpreg1 = hdac->Instance->CCR;
 8003474:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003476:	4090      	lsls	r0, r2
 8003478:	ea26 0600 	bic.w	r6, r6, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800347c:	6968      	ldr	r0, [r5, #20]
 800347e:	4090      	lsls	r0, r2
 8003480:	4330      	orrs	r0, r6
    hdac->Instance->CCR = tmpreg1;
 8003482:	6398      	str	r0, [r3, #56]	@ 0x38
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003484:	2007      	movs	r0, #7
  tmpreg1 = hdac->Instance->MCR;
 8003486:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003488:	4090      	lsls	r0, r2
 800348a:	ea26 0600 	bic.w	r6, r6, r0
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800348e:	e9d5 7002 	ldrd	r7, r0, [r5, #8]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003492:	2801      	cmp	r0, #1
 8003494:	d055      	beq.n	8003542 <HAL_DAC_ConfigChannel+0x106>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003496:	2802      	cmp	r0, #2
 8003498:	d055      	beq.n	8003546 <HAL_DAC_ConfigChannel+0x10a>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800349a:	fab7 f087 	clz	r0, r7
 800349e:	0940      	lsrs	r0, r0, #5
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80034a0:	4339      	orrs	r1, r7
 80034a2:	4301      	orrs	r1, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034a4:	6868      	ldr	r0, [r5, #4]
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034a6:	f44f 4580 	mov.w	r5, #16384	@ 0x4000
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034aa:	4091      	lsls	r1, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034ac:	4090      	lsls	r0, r2
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034ae:	4095      	lsls	r5, r2
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034b0:	4331      	orrs	r1, r6
  hdac->State = HAL_DAC_STATE_READY;
 80034b2:	2601      	movs	r6, #1
  hdac->Instance->MCR = tmpreg1;
 80034b4:	63d9      	str	r1, [r3, #60]	@ 0x3c
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034b6:	6819      	ldr	r1, [r3, #0]
 80034b8:	ea21 0105 	bic.w	r1, r1, r5
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034bc:	f640 75fe 	movw	r5, #4094	@ 0xffe
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034c0:	6019      	str	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034c2:	4095      	lsls	r5, r2
  tmpreg1 = hdac->Instance->CR;
 80034c4:	6819      	ldr	r1, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034c6:	ea21 0105 	bic.w	r1, r1, r5
  __HAL_UNLOCK(hdac);
 80034ca:	2500      	movs	r5, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034cc:	4301      	orrs	r1, r0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034ce:	20c0      	movs	r0, #192	@ 0xc0
  hdac->Instance->CR = tmpreg1;
 80034d0:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034d2:	fa00 f102 	lsl.w	r1, r0, r2
 80034d6:	681a      	ldr	r2, [r3, #0]
  return status;
 80034d8:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034da:	ea22 0201 	bic.w	r2, r2, r1
 80034de:	601a      	str	r2, [r3, #0]
  hdac->State = HAL_DAC_STATE_READY;
 80034e0:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 80034e2:	7165      	strb	r5, [r4, #5]
}
 80034e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80034e8:	2001      	movs	r0, #1
}
 80034ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80034ee:	f7fe ffd7 	bl	80024a0 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80034f4:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 80034f6:	b9be      	cbnz	r6, 8003528 <HAL_DAC_ConfigChannel+0xec>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f8:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 800358c <HAL_DAC_ConfigChannel+0x150>
 80034fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034fe:	ea12 0f08 	tst.w	r2, r8
 8003502:	d026      	beq.n	8003552 <HAL_DAC_ConfigChannel+0x116>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003504:	f7fe ffcc 	bl	80024a0 <HAL_GetTick>
 8003508:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800350a:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800350c:	2801      	cmp	r0, #1
 800350e:	d9f5      	bls.n	80034fc <HAL_DAC_ConfigChannel+0xc0>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003512:	ea12 0f08 	tst.w	r2, r8
 8003516:	d0f1      	beq.n	80034fc <HAL_DAC_ConfigChannel+0xc0>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003518:	6923      	ldr	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800351a:	2203      	movs	r2, #3
            return HAL_TIMEOUT;
 800351c:	2003      	movs	r0, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800351e:	f043 0308 	orr.w	r3, r3, #8
 8003522:	6123      	str	r3, [r4, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003524:	7122      	strb	r2, [r4, #4]
            return HAL_TIMEOUT;
 8003526:	e7dd      	b.n	80034e4 <HAL_DAC_ConfigChannel+0xa8>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800352a:	2a00      	cmp	r2, #0
 800352c:	da2a      	bge.n	8003584 <HAL_DAC_ConfigChannel+0x148>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800352e:	f7fe ffb7 	bl	80024a0 <HAL_GetTick>
 8003532:	1bc0      	subs	r0, r0, r7
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003534:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003536:	2801      	cmp	r0, #1
 8003538:	d9f6      	bls.n	8003528 <HAL_DAC_ConfigChannel+0xec>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800353a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800353c:	2a00      	cmp	r2, #0
 800353e:	daf3      	bge.n	8003528 <HAL_DAC_ConfigChannel+0xec>
 8003540:	e7ea      	b.n	8003518 <HAL_DAC_ConfigChannel+0xdc>
    connectOnChip = 0x00000000UL;
 8003542:	2000      	movs	r0, #0
 8003544:	e7ac      	b.n	80034a0 <HAL_DAC_ConfigChannel+0x64>
    connectOnChip = DAC_MCR_MODE1_0;
 8003546:	2001      	movs	r0, #1
 8003548:	e7aa      	b.n	80034a0 <HAL_DAC_ConfigChannel+0x64>
  __HAL_LOCK(hdac);
 800354a:	2002      	movs	r0, #2
 800354c:	e7ca      	b.n	80034e4 <HAL_DAC_ConfigChannel+0xa8>
    return HAL_ERROR;
 800354e:	2001      	movs	r0, #1
}
 8003550:	4770      	bx	lr
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003552:	69aa      	ldr	r2, [r5, #24]
 8003554:	641a      	str	r2, [r3, #64]	@ 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003556:	f006 0210 	and.w	r2, r6, #16
 800355a:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 800355e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8003560:	4090      	lsls	r0, r2
 8003562:	ea21 0100 	bic.w	r1, r1, r0
 8003566:	69e8      	ldr	r0, [r5, #28]
 8003568:	4090      	lsls	r0, r2
 800356a:	4301      	orrs	r1, r0
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800356c:	20ff      	movs	r0, #255	@ 0xff
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800356e:	6499      	str	r1, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003570:	4090      	lsls	r0, r2
 8003572:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003574:	ea21 0100 	bic.w	r1, r1, r0
 8003578:	6a28      	ldr	r0, [r5, #32]
 800357a:	4090      	lsls	r0, r2
 800357c:	4301      	orrs	r1, r0
 800357e:	64d9      	str	r1, [r3, #76]	@ 0x4c
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003580:	6829      	ldr	r1, [r5, #0]
 8003582:	e773      	b.n	800346c <HAL_DAC_ConfigChannel+0x30>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003584:	69aa      	ldr	r2, [r5, #24]
 8003586:	645a      	str	r2, [r3, #68]	@ 0x44
 8003588:	e7e5      	b.n	8003556 <HAL_DAC_ConfigChannel+0x11a>
 800358a:	bf00      	nop
 800358c:	20008000 	.word	0x20008000

08003590 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop

08003594 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003594:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003596:	6b84      	ldr	r4, [r0, #56]	@ 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003598:	4620      	mov	r0, r4
 800359a:	f7ff fff9 	bl	8003590 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800359e:	2301      	movs	r3, #1
 80035a0:	7123      	strb	r3, [r4, #4]
}
 80035a2:	bd10      	pop	{r4, pc}

080035a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop

080035a8 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80035a8:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 80035aa:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80035ac:	f7ff fffa 	bl	80035a4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80035b0:	bd08      	pop	{r3, pc}
 80035b2:	bf00      	nop

080035b4 <HAL_DACEx_ErrorCallbackCh2>:
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80035b8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ba:	6b84      	ldr	r4, [r0, #56]	@ 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035bc:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80035be:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80035c6:	f7ff fff5 	bl	80035b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80035ca:	2301      	movs	r3, #1
 80035cc:	7123      	strb	r3, [r4, #4]
}
 80035ce:	bd10      	pop	{r4, pc}

080035d0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035d0:	4936      	ldr	r1, [pc, #216]	@ (80036ac <DMA_CalcBaseAndBitshift+0xdc>)
{
 80035d2:	4602      	mov	r2, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035d4:	6803      	ldr	r3, [r0, #0]
 80035d6:	428b      	cmp	r3, r1
 80035d8:	d033      	beq.n	8003642 <DMA_CalcBaseAndBitshift+0x72>
 80035da:	3118      	adds	r1, #24
 80035dc:	1a59      	subs	r1, r3, r1
 80035de:	fab1 f181 	clz	r1, r1
 80035e2:	0949      	lsrs	r1, r1, #5
 80035e4:	bb69      	cbnz	r1, 8003642 <DMA_CalcBaseAndBitshift+0x72>
 80035e6:	4832      	ldr	r0, [pc, #200]	@ (80036b0 <DMA_CalcBaseAndBitshift+0xe0>)
 80035e8:	4283      	cmp	r3, r0
 80035ea:	d03e      	beq.n	800366a <DMA_CalcBaseAndBitshift+0x9a>
 80035ec:	3018      	adds	r0, #24
 80035ee:	4283      	cmp	r3, r0
 80035f0:	d03e      	beq.n	8003670 <DMA_CalcBaseAndBitshift+0xa0>
 80035f2:	3018      	adds	r0, #24
 80035f4:	4283      	cmp	r3, r0
 80035f6:	d034      	beq.n	8003662 <DMA_CalcBaseAndBitshift+0x92>
 80035f8:	3018      	adds	r0, #24
 80035fa:	4283      	cmp	r3, r0
 80035fc:	d03b      	beq.n	8003676 <DMA_CalcBaseAndBitshift+0xa6>
 80035fe:	3018      	adds	r0, #24
 8003600:	4283      	cmp	r3, r0
 8003602:	d03e      	beq.n	8003682 <DMA_CalcBaseAndBitshift+0xb2>
 8003604:	3018      	adds	r0, #24
 8003606:	4283      	cmp	r3, r0
 8003608:	d02a      	beq.n	8003660 <DMA_CalcBaseAndBitshift+0x90>
 800360a:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 800360e:	4283      	cmp	r3, r0
 8003610:	d035      	beq.n	800367e <DMA_CalcBaseAndBitshift+0xae>
 8003612:	4928      	ldr	r1, [pc, #160]	@ (80036b4 <DMA_CalcBaseAndBitshift+0xe4>)
 8003614:	428b      	cmp	r3, r1
 8003616:	d031      	beq.n	800367c <DMA_CalcBaseAndBitshift+0xac>
 8003618:	3118      	adds	r1, #24
 800361a:	428b      	cmp	r3, r1
 800361c:	d034      	beq.n	8003688 <DMA_CalcBaseAndBitshift+0xb8>
 800361e:	3118      	adds	r1, #24
 8003620:	428b      	cmp	r3, r1
 8003622:	d034      	beq.n	800368e <DMA_CalcBaseAndBitshift+0xbe>
 8003624:	3118      	adds	r1, #24
 8003626:	428b      	cmp	r3, r1
 8003628:	d034      	beq.n	8003694 <DMA_CalcBaseAndBitshift+0xc4>
 800362a:	3118      	adds	r1, #24
 800362c:	428b      	cmp	r3, r1
 800362e:	d034      	beq.n	800369a <DMA_CalcBaseAndBitshift+0xca>
 8003630:	3118      	adds	r1, #24
 8003632:	428b      	cmp	r3, r1
 8003634:	d034      	beq.n	80036a0 <DMA_CalcBaseAndBitshift+0xd0>
 8003636:	3118      	adds	r1, #24
 8003638:	428b      	cmp	r3, r1
 800363a:	d034      	beq.n	80036a6 <DMA_CalcBaseAndBitshift+0xd6>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800363c:	f023 00ff 	bic.w	r0, r3, #255	@ 0xff
 8003640:	e011      	b.n	8003666 <DMA_CalcBaseAndBitshift+0x96>
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003642:	b2db      	uxtb	r3, r3
 8003644:	491c      	ldr	r1, [pc, #112]	@ (80036b8 <DMA_CalcBaseAndBitshift+0xe8>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003646:	481d      	ldr	r0, [pc, #116]	@ (80036bc <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003648:	3b10      	subs	r3, #16
 800364a:	fba1 1303 	umull	r1, r3, r1, r3
{
 800364e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003650:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003652:	4c1b      	ldr	r4, [pc, #108]	@ (80036c0 <DMA_CalcBaseAndBitshift+0xf0>)
 8003654:	5ce1      	ldrb	r1, [r4, r3]
  }

  return hdma->StreamBaseAddress;
}
 8003656:	f85d 4b04 	ldr.w	r4, [sp], #4
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800365a:	e9c2 0116 	strd	r0, r1, [r2, #88]	@ 0x58
}
 800365e:	4770      	bx	lr
 8003660:	2116      	movs	r1, #22
 8003662:	4818      	ldr	r0, [pc, #96]	@ (80036c4 <DMA_CalcBaseAndBitshift+0xf4>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003664:	65d1      	str	r1, [r2, #92]	@ 0x5c
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003666:	6590      	str	r0, [r2, #88]	@ 0x58
}
 8003668:	4770      	bx	lr
 800366a:	2110      	movs	r1, #16
 800366c:	4813      	ldr	r0, [pc, #76]	@ (80036bc <DMA_CalcBaseAndBitshift+0xec>)
 800366e:	e7f9      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 8003670:	2116      	movs	r1, #22
 8003672:	4812      	ldr	r0, [pc, #72]	@ (80036bc <DMA_CalcBaseAndBitshift+0xec>)
 8003674:	e7f6      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 8003676:	2106      	movs	r1, #6
 8003678:	4812      	ldr	r0, [pc, #72]	@ (80036c4 <DMA_CalcBaseAndBitshift+0xf4>)
 800367a:	e7f3      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 800367c:	2106      	movs	r1, #6
 800367e:	4812      	ldr	r0, [pc, #72]	@ (80036c8 <DMA_CalcBaseAndBitshift+0xf8>)
 8003680:	e7f0      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 8003682:	2110      	movs	r1, #16
 8003684:	480f      	ldr	r0, [pc, #60]	@ (80036c4 <DMA_CalcBaseAndBitshift+0xf4>)
 8003686:	e7ed      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 8003688:	2110      	movs	r1, #16
 800368a:	480f      	ldr	r0, [pc, #60]	@ (80036c8 <DMA_CalcBaseAndBitshift+0xf8>)
 800368c:	e7ea      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 800368e:	2116      	movs	r1, #22
 8003690:	480d      	ldr	r0, [pc, #52]	@ (80036c8 <DMA_CalcBaseAndBitshift+0xf8>)
 8003692:	e7e7      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 8003694:	2100      	movs	r1, #0
 8003696:	480d      	ldr	r0, [pc, #52]	@ (80036cc <DMA_CalcBaseAndBitshift+0xfc>)
 8003698:	e7e4      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 800369a:	2106      	movs	r1, #6
 800369c:	480b      	ldr	r0, [pc, #44]	@ (80036cc <DMA_CalcBaseAndBitshift+0xfc>)
 800369e:	e7e1      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 80036a0:	2110      	movs	r1, #16
 80036a2:	480a      	ldr	r0, [pc, #40]	@ (80036cc <DMA_CalcBaseAndBitshift+0xfc>)
 80036a4:	e7de      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 80036a6:	2116      	movs	r1, #22
 80036a8:	4808      	ldr	r0, [pc, #32]	@ (80036cc <DMA_CalcBaseAndBitshift+0xfc>)
 80036aa:	e7db      	b.n	8003664 <DMA_CalcBaseAndBitshift+0x94>
 80036ac:	40020010 	.word	0x40020010
 80036b0:	40020040 	.word	0x40020040
 80036b4:	40020428 	.word	0x40020428
 80036b8:	aaaaaaab 	.word	0xaaaaaaab
 80036bc:	40020000 	.word	0x40020000
 80036c0:	0800e140 	.word	0x0800e140
 80036c4:	40020004 	.word	0x40020004
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020404 	.word	0x40020404

080036d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80036d0:	6802      	ldr	r2, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036d2:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 80036d4:	4927      	ldr	r1, [pc, #156]	@ (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 80036d6:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80036d8:	4d27      	ldr	r5, [pc, #156]	@ (8003778 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80036da:	4c28      	ldr	r4, [pc, #160]	@ (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 80036dc:	42aa      	cmp	r2, r5
 80036de:	bf18      	it	ne
 80036e0:	429a      	cmpne	r2, r3
 80036e2:	bf0c      	ite	eq
 80036e4:	2301      	moveq	r3, #1
 80036e6:	2300      	movne	r3, #0
 80036e8:	428a      	cmp	r2, r1
 80036ea:	bf08      	it	eq
 80036ec:	f043 0301 	orreq.w	r3, r3, #1
 80036f0:	3128      	adds	r1, #40	@ 0x28
 80036f2:	42a2      	cmp	r2, r4
 80036f4:	bf08      	it	eq
 80036f6:	f043 0301 	orreq.w	r3, r3, #1
 80036fa:	3428      	adds	r4, #40	@ 0x28
 80036fc:	428a      	cmp	r2, r1
 80036fe:	bf08      	it	eq
 8003700:	f043 0301 	orreq.w	r3, r3, #1
 8003704:	3128      	adds	r1, #40	@ 0x28
 8003706:	42a2      	cmp	r2, r4
 8003708:	bf08      	it	eq
 800370a:	f043 0301 	orreq.w	r3, r3, #1
 800370e:	428a      	cmp	r2, r1
 8003710:	bf08      	it	eq
 8003712:	f043 0301 	orreq.w	r3, r3, #1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003716:	b2d1      	uxtb	r1, r2
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003718:	b913      	cbnz	r3, 8003720 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>
 800371a:	4b19      	ldr	r3, [pc, #100]	@ (8003780 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800371c:	429a      	cmp	r2, r3
 800371e:	d112      	bne.n	8003746 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003720:	f1a1 0308 	sub.w	r3, r1, #8
 8003724:	4917      	ldr	r1, [pc, #92]	@ (8003784 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003726:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003728:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800372c:	2101      	movs	r1, #1
 800372e:	4c17      	ldr	r4, [pc, #92]	@ (800378c <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003730:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003734:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003738:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800373a:	4099      	lsls	r1, r3
 800373c:	6681      	str	r1, [r0, #104]	@ 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800373e:	e9c0 2418 	strd	r2, r4, [r0, #96]	@ 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003742:	bc30      	pop	{r4, r5}
 8003744:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003746:	f1a1 0310 	sub.w	r3, r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800374a:	4911      	ldr	r1, [pc, #68]	@ (8003790 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800374c:	4c11      	ldr	r4, [pc, #68]	@ (8003794 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800374e:	4411      	add	r1, r2
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003750:	fba4 4303 	umull	r4, r3, r4, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003754:	29a8      	cmp	r1, #168	@ 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003756:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800375a:	d800      	bhi.n	800375e <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 800375c:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800375e:	4a0e      	ldr	r2, [pc, #56]	@ (8003798 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003760:	f003 041f 	and.w	r4, r3, #31
 8003764:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003766:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003768:	40a1      	lsls	r1, r4
 800376a:	4c0c      	ldr	r4, [pc, #48]	@ (800379c <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800376c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800376e:	e7e5      	b.n	800373c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 8003770:	58025408 	.word	0x58025408
 8003774:	58025430 	.word	0x58025430
 8003778:	5802541c 	.word	0x5802541c
 800377c:	58025444 	.word	0x58025444
 8003780:	58025494 	.word	0x58025494
 8003784:	cccccccd 	.word	0xcccccccd
 8003788:	16009600 	.word	0x16009600
 800378c:	58025880 	.word	0x58025880
 8003790:	bffdfbf0 	.word	0xbffdfbf0
 8003794:	aaaaaaab 	.word	0xaaaaaaab
 8003798:	10008200 	.word	0x10008200
 800379c:	40020880 	.word	0x40020880

080037a0 <HAL_DMA_Init>:
{
 80037a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a4:	4605      	mov	r5, r0
 80037a6:	b083      	sub	sp, #12
  uint32_t tickstart = HAL_GetTick();
 80037a8:	f7fe fe7a 	bl	80024a0 <HAL_GetTick>
  if(hdma == NULL)
 80037ac:	2d00      	cmp	r5, #0
 80037ae:	f000 8203 	beq.w	8003bb8 <HAL_DMA_Init+0x418>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037b2:	682c      	ldr	r4, [r5, #0]
 80037b4:	4606      	mov	r6, r0
 80037b6:	4b65      	ldr	r3, [pc, #404]	@ (800394c <HAL_DMA_Init+0x1ac>)
 80037b8:	429c      	cmp	r4, r3
 80037ba:	f000 80bc 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037be:	3318      	adds	r3, #24
 80037c0:	429c      	cmp	r4, r3
 80037c2:	f000 80b8 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037c6:	3318      	adds	r3, #24
 80037c8:	429c      	cmp	r4, r3
 80037ca:	f000 80b4 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037ce:	3318      	adds	r3, #24
 80037d0:	429c      	cmp	r4, r3
 80037d2:	f000 80b0 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037d6:	3318      	adds	r3, #24
 80037d8:	429c      	cmp	r4, r3
 80037da:	f000 80ac 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037de:	3318      	adds	r3, #24
 80037e0:	429c      	cmp	r4, r3
 80037e2:	f000 80a8 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037e6:	3318      	adds	r3, #24
 80037e8:	429c      	cmp	r4, r3
 80037ea:	f000 80a4 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037ee:	3318      	adds	r3, #24
 80037f0:	429c      	cmp	r4, r3
 80037f2:	f000 80a0 	beq.w	8003936 <HAL_DMA_Init+0x196>
 80037f6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80037fa:	429c      	cmp	r4, r3
 80037fc:	f000 809b 	beq.w	8003936 <HAL_DMA_Init+0x196>
 8003800:	3318      	adds	r3, #24
 8003802:	429c      	cmp	r4, r3
 8003804:	f000 8097 	beq.w	8003936 <HAL_DMA_Init+0x196>
 8003808:	3318      	adds	r3, #24
 800380a:	429c      	cmp	r4, r3
 800380c:	f000 8093 	beq.w	8003936 <HAL_DMA_Init+0x196>
 8003810:	3318      	adds	r3, #24
 8003812:	429c      	cmp	r4, r3
 8003814:	f000 808f 	beq.w	8003936 <HAL_DMA_Init+0x196>
 8003818:	3318      	adds	r3, #24
 800381a:	429c      	cmp	r4, r3
 800381c:	f000 808b 	beq.w	8003936 <HAL_DMA_Init+0x196>
 8003820:	3318      	adds	r3, #24
 8003822:	429c      	cmp	r4, r3
 8003824:	f000 8087 	beq.w	8003936 <HAL_DMA_Init+0x196>
 8003828:	3318      	adds	r3, #24
 800382a:	429c      	cmp	r4, r3
 800382c:	f000 8083 	beq.w	8003936 <HAL_DMA_Init+0x196>
 8003830:	3318      	adds	r3, #24
 8003832:	429c      	cmp	r4, r3
 8003834:	d07f      	beq.n	8003936 <HAL_DMA_Init+0x196>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003836:	4946      	ldr	r1, [pc, #280]	@ (8003950 <HAL_DMA_Init+0x1b0>)
 8003838:	4a46      	ldr	r2, [pc, #280]	@ (8003954 <HAL_DMA_Init+0x1b4>)
 800383a:	4b47      	ldr	r3, [pc, #284]	@ (8003958 <HAL_DMA_Init+0x1b8>)
 800383c:	eba4 0901 	sub.w	r9, r4, r1
 8003840:	1aa2      	subs	r2, r4, r2
 8003842:	4f46      	ldr	r7, [pc, #280]	@ (800395c <HAL_DMA_Init+0x1bc>)
 8003844:	eba4 0803 	sub.w	r8, r4, r3
 8003848:	fab9 f989 	clz	r9, r9
 800384c:	3314      	adds	r3, #20
 800384e:	fab2 f282 	clz	r2, r2
 8003852:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8003856:	fab8 f888 	clz	r8, r8
 800385a:	eba4 0a03 	sub.w	sl, r4, r3
 800385e:	0952      	lsrs	r2, r2, #5
 8003860:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003864:	1be7      	subs	r7, r4, r7
 8003866:	faba fa8a 	clz	sl, sl
 800386a:	ea49 0102 	orr.w	r1, r9, r2
 800386e:	4e3c      	ldr	r6, [pc, #240]	@ (8003960 <HAL_DMA_Init+0x1c0>)
 8003870:	fab7 f787 	clz	r7, r7
 8003874:	483b      	ldr	r0, [pc, #236]	@ (8003964 <HAL_DMA_Init+0x1c4>)
 8003876:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 800387a:	ea48 0101 	orr.w	r1, r8, r1
 800387e:	1ba6      	subs	r6, r4, r6
 8003880:	eba4 0b00 	sub.w	fp, r4, r0
 8003884:	097f      	lsrs	r7, r7, #5
 8003886:	ea4a 0101 	orr.w	r1, sl, r1
 800388a:	fab6 f686 	clz	r6, r6
 800388e:	3014      	adds	r0, #20
 8003890:	fabb fb8b 	clz	fp, fp
 8003894:	4339      	orrs	r1, r7
 8003896:	0976      	lsrs	r6, r6, #5
 8003898:	1a23      	subs	r3, r4, r0
 800389a:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 800389e:	4331      	orrs	r1, r6
 80038a0:	fab3 f383 	clz	r3, r3
 80038a4:	ea5b 0101 	orrs.w	r1, fp, r1
 80038a8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	d102      	bne.n	80038b6 <HAL_DMA_Init+0x116>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f000 81d4 	beq.w	8003c5e <HAL_DMA_Init+0x4be>
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b6:	2102      	movs	r1, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80038b8:	f8df c0b4 	ldr.w	ip, [pc, #180]	@ 8003970 <HAL_DMA_Init+0x1d0>
    hdma->State = HAL_DMA_STATE_BUSY;
 80038bc:	f885 1035 	strb.w	r1, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80038c0:	2100      	movs	r1, #0
 80038c2:	f885 1034 	strb.w	r1, [r5, #52]	@ 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80038c6:	6821      	ldr	r1, [r4, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80038c8:	ea01 0c0c 	and.w	ip, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038cc:	68a9      	ldr	r1, [r5, #8]
 80038ce:	2940      	cmp	r1, #64	@ 0x40
 80038d0:	f000 81c2 	beq.w	8003c58 <HAL_DMA_Init+0x4b8>
 80038d4:	f1a1 0180 	sub.w	r1, r1, #128	@ 0x80
 80038d8:	fab1 f181 	clz	r1, r1
 80038dc:	0949      	lsrs	r1, r1, #5
 80038de:	ea4f 3e81 	mov.w	lr, r1, lsl #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038e2:	6929      	ldr	r1, [r5, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038e4:	68e8      	ldr	r0, [r5, #12]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038e6:	08c9      	lsrs	r1, r1, #3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80038e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003968 <HAL_DMA_Init+0x1c8>)
 80038ea:	9200      	str	r2, [sp, #0]
 80038ec:	ea41 00d0 	orr.w	r0, r1, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038f0:	6969      	ldr	r1, [r5, #20]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80038f2:	4423      	add	r3, r4
 80038f4:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038f8:	69a9      	ldr	r1, [r5, #24]
 80038fa:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038fe:	69e9      	ldr	r1, [r5, #28]
 8003900:	ea40 00d1 	orr.w	r0, r0, r1, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003904:	6a29      	ldr	r1, [r5, #32]
 8003906:	ea40 1111 	orr.w	r1, r0, r1, lsr #4
 800390a:	ea41 010c 	orr.w	r1, r1, ip
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800390e:	ea4e 0101 	orr.w	r1, lr, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003912:	6021      	str	r1, [r4, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003914:	4915      	ldr	r1, [pc, #84]	@ (800396c <HAL_DMA_Init+0x1cc>)
 8003916:	fba1 0103 	umull	r0, r1, r1, r3
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800391a:	4628      	mov	r0, r5
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800391c:	0909      	lsrs	r1, r1, #4
 800391e:	0089      	lsls	r1, r1, #2
 8003920:	65e9      	str	r1, [r5, #92]	@ 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003922:	f7ff fe55 	bl	80035d0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003926:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8003928:	9a00      	ldr	r2, [sp, #0]
 800392a:	f001 041f 	and.w	r4, r1, #31
 800392e:	2101      	movs	r1, #1
 8003930:	40a1      	lsls	r1, r4
 8003932:	6041      	str	r1, [r0, #4]
 8003934:	e0e2      	b.n	8003afc <HAL_DMA_Init+0x35c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003936:	2302      	movs	r3, #2
 8003938:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800393c:	2300      	movs	r3, #0
 800393e:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    __HAL_DMA_DISABLE(hdma);
 8003942:	6823      	ldr	r3, [r4, #0]
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	6023      	str	r3, [r4, #0]
 800394a:	e01a      	b.n	8003982 <HAL_DMA_Init+0x1e2>
 800394c:	40020010 	.word	0x40020010
 8003950:	58025408 	.word	0x58025408
 8003954:	5802541c 	.word	0x5802541c
 8003958:	58025430 	.word	0x58025430
 800395c:	58025458 	.word	0x58025458
 8003960:	5802546c 	.word	0x5802546c
 8003964:	58025480 	.word	0x58025480
 8003968:	a7fdabf8 	.word	0xa7fdabf8
 800396c:	cccccccd 	.word	0xcccccccd
 8003970:	fffe000f 	.word	0xfffe000f
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003974:	f7fe fd94 	bl	80024a0 <HAL_GetTick>
 8003978:	1b80      	subs	r0, r0, r6
 800397a:	2805      	cmp	r0, #5
 800397c:	f200 8117 	bhi.w	8003bae <HAL_DMA_Init+0x40e>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003980:	682c      	ldr	r4, [r5, #0]
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	07df      	lsls	r7, r3, #31
 8003986:	d4f5      	bmi.n	8003974 <HAL_DMA_Init+0x1d4>
    registerValue |=  hdma->Init.Direction           |
 8003988:	e9d5 3002 	ldrd	r3, r0, [r5, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800398c:	6929      	ldr	r1, [r5, #16]
    registerValue |=  hdma->Init.Direction           |
 800398e:	4303      	orrs	r3, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003990:	69aa      	ldr	r2, [r5, #24]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003992:	6820      	ldr	r0, [r4, #0]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003994:	430b      	orrs	r3, r1
 8003996:	6969      	ldr	r1, [r5, #20]
 8003998:	430b      	orrs	r3, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800399a:	69e9      	ldr	r1, [r5, #28]
 800399c:	4313      	orrs	r3, r2
 800399e:	430b      	orrs	r3, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a0:	49b2      	ldr	r1, [pc, #712]	@ (8003c6c <HAL_DMA_Init+0x4cc>)
 80039a2:	4001      	ands	r1, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 80039a4:	6a28      	ldr	r0, [r5, #32]
 80039a6:	4303      	orrs	r3, r0
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039a8:	48b1      	ldr	r0, [pc, #708]	@ (8003c70 <HAL_DMA_Init+0x4d0>)
    registerValue |=  hdma->Init.Direction           |
 80039aa:	430b      	orrs	r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ac:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80039ae:	2904      	cmp	r1, #4
 80039b0:	f000 8117 	beq.w	8003be2 <HAL_DMA_Init+0x442>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039b4:	6806      	ldr	r6, [r0, #0]
 80039b6:	48af      	ldr	r0, [pc, #700]	@ (8003c74 <HAL_DMA_Init+0x4d4>)
 80039b8:	4030      	ands	r0, r6
 80039ba:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
 80039be:	f080 80d5 	bcs.w	8003b6c <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80039c2:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80039c4:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039c6:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80039ca:	430b      	orrs	r3, r1
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80039cc:	6163      	str	r3, [r4, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ce:	4628      	mov	r0, r5
 80039d0:	f7ff fdfe 	bl	80035d0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039d4:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 80039d6:	233f      	movs	r3, #63	@ 0x3f
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039d8:	49a7      	ldr	r1, [pc, #668]	@ (8003c78 <HAL_DMA_Init+0x4d8>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039da:	f002 021f 	and.w	r2, r2, #31
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039de:	4fa7      	ldr	r7, [pc, #668]	@ (8003c7c <HAL_DMA_Init+0x4dc>)
 80039e0:	4ea7      	ldr	r6, [pc, #668]	@ (8003c80 <HAL_DMA_Init+0x4e0>)
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039e2:	4093      	lsls	r3, r2
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039e4:	4aa7      	ldr	r2, [pc, #668]	@ (8003c84 <HAL_DMA_Init+0x4e4>)
 80039e6:	1be7      	subs	r7, r4, r7
 80039e8:	1ba6      	subs	r6, r4, r6
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039ea:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039ec:	eba4 0902 	sub.w	r9, r4, r2
 80039f0:	4ba5      	ldr	r3, [pc, #660]	@ (8003c88 <HAL_DMA_Init+0x4e8>)
 80039f2:	3214      	adds	r2, #20
 80039f4:	fab9 f989 	clz	r9, r9
 80039f8:	48a4      	ldr	r0, [pc, #656]	@ (8003c8c <HAL_DMA_Init+0x4ec>)
 80039fa:	eba4 0803 	sub.w	r8, r4, r3
 80039fe:	4ba4      	ldr	r3, [pc, #656]	@ (8003c90 <HAL_DMA_Init+0x4f0>)
 8003a00:	1aa2      	subs	r2, r4, r2
 8003a02:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8003a06:	429c      	cmp	r4, r3
 8003a08:	bf18      	it	ne
 8003a0a:	428c      	cmpne	r4, r1
 8003a0c:	f103 0318 	add.w	r3, r3, #24
 8003a10:	fab2 f282 	clz	r2, r2
 8003a14:	fab8 f888 	clz	r8, r8
 8003a18:	bf0c      	ite	eq
 8003a1a:	2101      	moveq	r1, #1
 8003a1c:	2100      	movne	r1, #0
 8003a1e:	0952      	lsrs	r2, r2, #5
 8003a20:	fab7 f787 	clz	r7, r7
 8003a24:	429c      	cmp	r4, r3
 8003a26:	bf08      	it	eq
 8003a28:	f041 0101 	orreq.w	r1, r1, #1
 8003a2c:	3318      	adds	r3, #24
 8003a2e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8003a32:	eba4 0b00 	sub.w	fp, r4, r0
 8003a36:	429c      	cmp	r4, r3
 8003a38:	bf08      	it	eq
 8003a3a:	f041 0101 	orreq.w	r1, r1, #1
 8003a3e:	3318      	adds	r3, #24
 8003a40:	097f      	lsrs	r7, r7, #5
 8003a42:	fab6 f686 	clz	r6, r6
 8003a46:	429c      	cmp	r4, r3
 8003a48:	bf08      	it	eq
 8003a4a:	f041 0101 	orreq.w	r1, r1, #1
 8003a4e:	3318      	adds	r3, #24
 8003a50:	3014      	adds	r0, #20
 8003a52:	0976      	lsrs	r6, r6, #5
 8003a54:	429c      	cmp	r4, r3
 8003a56:	bf08      	it	eq
 8003a58:	f041 0101 	orreq.w	r1, r1, #1
 8003a5c:	3318      	adds	r3, #24
 8003a5e:	fabb fb8b 	clz	fp, fp
 8003a62:	429c      	cmp	r4, r3
 8003a64:	bf08      	it	eq
 8003a66:	f041 0101 	orreq.w	r1, r1, #1
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8003a70:	429c      	cmp	r4, r3
 8003a72:	bf08      	it	eq
 8003a74:	f041 0101 	orreq.w	r1, r1, #1
 8003a78:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8003a7c:	429c      	cmp	r4, r3
 8003a7e:	bf08      	it	eq
 8003a80:	f041 0101 	orreq.w	r1, r1, #1
 8003a84:	3318      	adds	r3, #24
 8003a86:	429c      	cmp	r4, r3
 8003a88:	bf08      	it	eq
 8003a8a:	f041 0101 	orreq.w	r1, r1, #1
 8003a8e:	3318      	adds	r3, #24
 8003a90:	429c      	cmp	r4, r3
 8003a92:	bf08      	it	eq
 8003a94:	f041 0101 	orreq.w	r1, r1, #1
 8003a98:	3318      	adds	r3, #24
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	bf08      	it	eq
 8003a9e:	f041 0101 	orreq.w	r1, r1, #1
 8003aa2:	3318      	adds	r3, #24
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	bf08      	it	eq
 8003aa8:	f041 0101 	orreq.w	r1, r1, #1
 8003aac:	3318      	adds	r3, #24
 8003aae:	429c      	cmp	r4, r3
 8003ab0:	bf08      	it	eq
 8003ab2:	f041 0101 	orreq.w	r1, r1, #1
 8003ab6:	3318      	adds	r3, #24
 8003ab8:	429c      	cmp	r4, r3
 8003aba:	bf08      	it	eq
 8003abc:	f041 0101 	orreq.w	r1, r1, #1
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	429c      	cmp	r4, r3
 8003ac4:	bf08      	it	eq
 8003ac6:	f041 0101 	orreq.w	r1, r1, #1
 8003aca:	4b72      	ldr	r3, [pc, #456]	@ (8003c94 <HAL_DMA_Init+0x4f4>)
 8003acc:	ea49 0101 	orr.w	r1, r9, r1
 8003ad0:	eba4 0a03 	sub.w	sl, r4, r3
 8003ad4:	1a23      	subs	r3, r4, r0
 8003ad6:	4311      	orrs	r1, r2
 8003ad8:	faba fa8a 	clz	sl, sl
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	ea48 0101 	orr.w	r1, r8, r1
 8003ae4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8003ae8:	095b      	lsrs	r3, r3, #5
 8003aea:	ea4a 0101 	orr.w	r1, sl, r1
 8003aee:	9301      	str	r3, [sp, #4]
 8003af0:	4339      	orrs	r1, r7
 8003af2:	4331      	orrs	r1, r6
 8003af4:	ea5b 0101 	orrs.w	r1, fp, r1
 8003af8:	d100      	bne.n	8003afc <HAL_DMA_Init+0x35c>
 8003afa:	b37b      	cbz	r3, 8003b5c <HAL_DMA_Init+0x3bc>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003afc:	4628      	mov	r0, r5
 8003afe:	9200      	str	r2, [sp, #0]
 8003b00:	f7ff fde6 	bl	80036d0 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003b04:	68a9      	ldr	r1, [r5, #8]
 8003b06:	9a00      	ldr	r2, [sp, #0]
 8003b08:	2980      	cmp	r1, #128	@ 0x80
 8003b0a:	d05e      	beq.n	8003bca <HAL_DMA_Init+0x42a>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b0c:	6868      	ldr	r0, [r5, #4]
 8003b0e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003b10:	b2c4      	uxtb	r4, r0
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b12:	3801      	subs	r0, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b14:	e9d5 c119 	ldrd	ip, r1, [r5, #100]	@ 0x64
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b18:	2807      	cmp	r0, #7
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003b1a:	601c      	str	r4, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b1c:	f8cc 1004 	str.w	r1, [ip, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003b20:	d85a      	bhi.n	8003bd8 <HAL_DMA_Init+0x438>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b22:	ea49 090a 	orr.w	r9, r9, sl
 8003b26:	9b01      	ldr	r3, [sp, #4]
  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b28:	1e60      	subs	r0, r4, #1
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b2a:	ea48 0809 	orr.w	r8, r8, r9
 8003b2e:	ea47 0708 	orr.w	r7, r7, r8
 8003b32:	433e      	orrs	r6, r7
 8003b34:	ea43 0a06 	orr.w	sl, r3, r6
 8003b38:	ea5b 0a0a 	orrs.w	sl, fp, sl
 8003b3c:	d102      	bne.n	8003b44 <HAL_DMA_Init+0x3a4>
 8003b3e:	2a00      	cmp	r2, #0
 8003b40:	f000 8085 	beq.w	8003c4e <HAL_DMA_Init+0x4ae>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b44:	4a54      	ldr	r2, [pc, #336]	@ (8003c98 <HAL_DMA_Init+0x4f8>)

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b46:	4955      	ldr	r1, [pc, #340]	@ (8003c9c <HAL_DMA_Init+0x4fc>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b48:	4422      	add	r2, r4
 8003b4a:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	4083      	lsls	r3, r0
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b50:	2000      	movs	r0, #0
 8003b52:	e9c5 211b 	strd	r2, r1, [r5, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b56:	676b      	str	r3, [r5, #116]	@ 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b58:	6010      	str	r0, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b5a:	604b      	str	r3, [r1, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5c:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003b5e:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b60:	6568      	str	r0, [r5, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003b62:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
}
 8003b66:	b003      	add	sp, #12
 8003b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b6c:	6868      	ldr	r0, [r5, #4]
 8003b6e:	f1a0 0629 	sub.w	r6, r0, #41	@ 0x29
 8003b72:	2e1f      	cmp	r6, #31
 8003b74:	d924      	bls.n	8003bc0 <HAL_DMA_Init+0x420>
 8003b76:	384f      	subs	r0, #79	@ 0x4f
 8003b78:	2803      	cmp	r0, #3
 8003b7a:	d801      	bhi.n	8003b80 <HAL_DMA_Init+0x3e0>
        registerValue |= DMA_SxCR_TRBUFF;
 8003b7c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b80:	6023      	str	r3, [r4, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b82:	2904      	cmp	r1, #4
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b84:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b86:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003b8a:	ea43 0301 	orr.w	r3, r3, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b8e:	f47f af1d 	bne.w	80039cc <HAL_DMA_Init+0x22c>
 8003b92:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
      registerValue |= hdma->Init.FIFOThreshold;
 8003b94:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8003b96:	430b      	orrs	r3, r1
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	f43f af17 	beq.w	80039cc <HAL_DMA_Init+0x22c>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b9e:	bb8a      	cbnz	r2, 8003c04 <HAL_DMA_Init+0x464>
    switch (hdma->Init.FIFOThreshold)
 8003ba0:	2901      	cmp	r1, #1
 8003ba2:	d04f      	beq.n	8003c44 <HAL_DMA_Init+0x4a4>
 8003ba4:	f031 0202 	bics.w	r2, r1, #2
 8003ba8:	f47f af10 	bne.w	80039cc <HAL_DMA_Init+0x22c>
 8003bac:	e032      	b.n	8003c14 <HAL_DMA_Init+0x474>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bae:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bb0:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bb2:	656a      	str	r2, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8003bb4:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8003bb8:	2001      	movs	r0, #1
}
 8003bba:	b003      	add	sp, #12
 8003bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003bc0:	4837      	ldr	r0, [pc, #220]	@ (8003ca0 <HAL_DMA_Init+0x500>)
 8003bc2:	40f0      	lsrs	r0, r6
 8003bc4:	07c0      	lsls	r0, r0, #31
 8003bc6:	d5db      	bpl.n	8003b80 <HAL_DMA_Init+0x3e0>
 8003bc8:	e7d8      	b.n	8003b7c <HAL_DMA_Init+0x3dc>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bca:	2300      	movs	r3, #0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bcc:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8003bce:	e9d5 0218 	ldrd	r0, r2, [r5, #96]	@ 0x60
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bd2:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bd4:	6003      	str	r3, [r0, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003bd6:	6051      	str	r1, [r2, #4]
      hdma->DMAmuxRequestGen = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e9c5 331b 	strd	r3, r3, [r5, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003bde:	676b      	str	r3, [r5, #116]	@ 0x74
 8003be0:	e7bc      	b.n	8003b5c <HAL_DMA_Init+0x3bc>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003be2:	6807      	ldr	r7, [r0, #0]
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003be4:	e9d5 060b 	ldrd	r0, r6, [r5, #44]	@ 0x2c
 8003be8:	4306      	orrs	r6, r0
 8003bea:	4333      	orrs	r3, r6
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003bec:	4e21      	ldr	r6, [pc, #132]	@ (8003c74 <HAL_DMA_Init+0x4d4>)
 8003bee:	403e      	ands	r6, r7
 8003bf0:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
 8003bf4:	d2ba      	bcs.n	8003b6c <HAL_DMA_Init+0x3cc>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003bf6:	6023      	str	r3, [r4, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003bf8:	6963      	ldr	r3, [r4, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bfa:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8003bfe:	f043 0304 	orr.w	r3, r3, #4
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c02:	e7c7      	b.n	8003b94 <HAL_DMA_Init+0x3f4>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c04:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003c08:	d00d      	beq.n	8003c26 <HAL_DMA_Init+0x486>
    switch (hdma->Init.FIFOThreshold)
 8003c0a:	2902      	cmp	r1, #2
 8003c0c:	d905      	bls.n	8003c1a <HAL_DMA_Init+0x47a>
 8003c0e:	2903      	cmp	r1, #3
 8003c10:	f47f aedc 	bne.w	80039cc <HAL_DMA_Init+0x22c>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c14:	01c2      	lsls	r2, r0, #7
 8003c16:	f57f aed9 	bpl.w	80039cc <HAL_DMA_Init+0x22c>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c1a:	2240      	movs	r2, #64	@ 0x40
          hdma->State = HAL_DMA_STATE_READY;
 8003c1c:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c1e:	656a      	str	r2, [r5, #84]	@ 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8003c20:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
          return HAL_ERROR;
 8003c24:	e7c8      	b.n	8003bb8 <HAL_DMA_Init+0x418>
    switch (hdma->Init.FIFOThreshold)
 8003c26:	2903      	cmp	r1, #3
 8003c28:	f63f aed0 	bhi.w	80039cc <HAL_DMA_Init+0x22c>
 8003c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c34 <HAL_DMA_Init+0x494>)
 8003c2e:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8003c32:	bf00      	nop
 8003c34:	08003c1b 	.word	0x08003c1b
 8003c38:	08003c15 	.word	0x08003c15
 8003c3c:	08003c1b 	.word	0x08003c1b
 8003c40:	08003c45 	.word	0x08003c45
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c44:	f1b0 7fc0 	cmp.w	r0, #25165824	@ 0x1800000
 8003c48:	f47f aec0 	bne.w	80039cc <HAL_DMA_Init+0x22c>
 8003c4c:	e7e5      	b.n	8003c1a <HAL_DMA_Init+0x47a>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ca4 <HAL_DMA_Init+0x504>)
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c50:	4915      	ldr	r1, [pc, #84]	@ (8003ca8 <HAL_DMA_Init+0x508>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c52:	4422      	add	r2, r4
 8003c54:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c56:	e779      	b.n	8003b4c <HAL_DMA_Init+0x3ac>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c58:	f04f 0e10 	mov.w	lr, #16
 8003c5c:	e641      	b.n	80038e2 <HAL_DMA_Init+0x142>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c5e:	2240      	movs	r2, #64	@ 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c60:	2303      	movs	r3, #3
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c62:	656a      	str	r2, [r5, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c64:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    return HAL_ERROR;
 8003c68:	e7a6      	b.n	8003bb8 <HAL_DMA_Init+0x418>
 8003c6a:	bf00      	nop
 8003c6c:	fe10803f 	.word	0xfe10803f
 8003c70:	5c001000 	.word	0x5c001000
 8003c74:	ffff0000 	.word	0xffff0000
 8003c78:	40020010 	.word	0x40020010
 8003c7c:	58025458 	.word	0x58025458
 8003c80:	5802546c 	.word	0x5802546c
 8003c84:	58025408 	.word	0x58025408
 8003c88:	58025430 	.word	0x58025430
 8003c8c:	58025480 	.word	0x58025480
 8003c90:	40020028 	.word	0x40020028
 8003c94:	58025444 	.word	0x58025444
 8003c98:	1600963f 	.word	0x1600963f
 8003c9c:	58025940 	.word	0x58025940
 8003ca0:	c3c0003f 	.word	0xc3c0003f
 8003ca4:	1000823f 	.word	0x1000823f
 8003ca8:	40020940 	.word	0x40020940

08003cac <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8003cac:	2800      	cmp	r0, #0
 8003cae:	f000 8232 	beq.w	8004116 <HAL_DMA_Start_IT+0x46a>
{
 8003cb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(hdma);
 8003cb6:	f890 4034 	ldrb.w	r4, [r0, #52]	@ 0x34
{
 8003cba:	b083      	sub	sp, #12
  __HAL_LOCK(hdma);
 8003cbc:	2c01      	cmp	r4, #1
 8003cbe:	f000 8226 	beq.w	800410e <HAL_DMA_Start_IT+0x462>
 8003cc2:	2401      	movs	r4, #1
 8003cc4:	f880 4034 	strb.w	r4, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cc8:	f890 4035 	ldrb.w	r4, [r0, #53]	@ 0x35
 8003ccc:	2c01      	cmp	r4, #1
 8003cce:	d009      	beq.n	8003ce4 <HAL_DMA_Start_IT+0x38>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cd0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    __HAL_UNLOCK(hdma);
 8003cd4:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cd6:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003cd8:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    return HAL_ERROR;
 8003cdc:	2001      	movs	r0, #1
}
 8003cde:	b003      	add	sp, #12
 8003ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ce4:	2402      	movs	r4, #2
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ce6:	4e7d      	ldr	r6, [pc, #500]	@ (8003edc <HAL_DMA_Start_IT+0x230>)
 8003ce8:	f8df 81f8 	ldr.w	r8, [pc, #504]	@ 8003ee4 <HAL_DMA_Start_IT+0x238>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cec:	f880 4035 	strb.w	r4, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf0:	2400      	movs	r4, #0
    __HAL_DMA_DISABLE(hdma);
 8003cf2:	4d7b      	ldr	r5, [pc, #492]	@ (8003ee0 <HAL_DMA_Start_IT+0x234>)
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf4:	6544      	str	r4, [r0, #84]	@ 0x54
    __HAL_DMA_DISABLE(hdma);
 8003cf6:	6804      	ldr	r4, [r0, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cf8:	f8df 91ec 	ldr.w	r9, [pc, #492]	@ 8003ee8 <HAL_DMA_Start_IT+0x23c>
 8003cfc:	4544      	cmp	r4, r8
 8003cfe:	bf18      	it	ne
 8003d00:	42b4      	cmpne	r4, r6
    __HAL_DMA_DISABLE(hdma);
 8003d02:	f8df c1f8 	ldr.w	ip, [pc, #504]	@ 8003efc <HAL_DMA_Start_IT+0x250>
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d06:	6d86      	ldr	r6, [r0, #88]	@ 0x58
 8003d08:	bf0c      	ite	eq
 8003d0a:	f04f 0b01 	moveq.w	fp, #1
 8003d0e:	f04f 0b00 	movne.w	fp, #0
 8003d12:	9601      	str	r6, [sp, #4]
 8003d14:	454c      	cmp	r4, r9
 8003d16:	bf14      	ite	ne
 8003d18:	46de      	movne	lr, fp
 8003d1a:	f04b 0e01 	orreq.w	lr, fp, #1
    __HAL_DMA_DISABLE(hdma);
 8003d1e:	42ac      	cmp	r4, r5
 8003d20:	bf18      	it	ne
 8003d22:	4564      	cmpne	r4, ip
 8003d24:	bf0c      	ite	eq
 8003d26:	2501      	moveq	r5, #1
 8003d28:	2500      	movne	r5, #0
 8003d2a:	f040 80e9 	bne.w	8003f00 <HAL_DMA_Start_IT+0x254>
 8003d2e:	f8d4 c000 	ldr.w	ip, [r4]
 8003d32:	f02c 0c01 	bic.w	ip, ip, #1
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d36:	e9d0 7619 	ldrd	r7, r6, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8003d3a:	f8c4 c000 	str.w	ip, [r4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003d3e:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d42:	607e      	str	r6, [r7, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003d44:	f1bc 0f00 	cmp.w	ip, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d4a:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003d4e:	6077      	str	r7, [r6, #4]
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d50:	6dc7      	ldr	r7, [r0, #92]	@ 0x5c
 8003d52:	f04f 083f 	mov.w	r8, #63	@ 0x3f
 8003d56:	9e01      	ldr	r6, [sp, #4]
 8003d58:	f007 091f 	and.w	r9, r7, #31
 8003d5c:	fa08 f809 	lsl.w	r8, r8, r9
 8003d60:	f8c6 8008 	str.w	r8, [r6, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d64:	6827      	ldr	r7, [r4, #0]
 8003d66:	f427 2780 	bic.w	r7, r7, #262144	@ 0x40000
 8003d6a:	6027      	str	r7, [r4, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d6c:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d6e:	6883      	ldr	r3, [r0, #8]
 8003d70:	2b40      	cmp	r3, #64	@ 0x40
 8003d72:	f000 81d2 	beq.w	800411a <HAL_DMA_Start_IT+0x46e>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003d76:	60a1      	str	r1, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003d78:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d7a:	2d00      	cmp	r5, #0
 8003d7c:	f040 81a2 	bne.w	80040c4 <HAL_DMA_Start_IT+0x418>
 8003d80:	4a58      	ldr	r2, [pc, #352]	@ (8003ee4 <HAL_DMA_Start_IT+0x238>)
      if(hdma->XferHalfCpltCallback != NULL)
 8003d82:	6c03      	ldr	r3, [r0, #64]	@ 0x40
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d84:	4294      	cmp	r4, r2
 8003d86:	f000 8201 	beq.w	800418c <HAL_DMA_Start_IT+0x4e0>
 8003d8a:	4a57      	ldr	r2, [pc, #348]	@ (8003ee8 <HAL_DMA_Start_IT+0x23c>)
 8003d8c:	4294      	cmp	r4, r2
 8003d8e:	f000 8207 	beq.w	80041a0 <HAL_DMA_Start_IT+0x4f4>
 8003d92:	f1bb 0f00 	cmp.w	fp, #0
 8003d96:	f040 81d7 	bne.w	8004148 <HAL_DMA_Start_IT+0x49c>
 8003d9a:	4a54      	ldr	r2, [pc, #336]	@ (8003eec <HAL_DMA_Start_IT+0x240>)
      if(hdma->XferHalfCpltCallback != NULL)
 8003d9c:	4619      	mov	r1, r3
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d9e:	4294      	cmp	r4, r2
 8003da0:	f000 821c 	beq.w	80041dc <HAL_DMA_Start_IT+0x530>
 8003da4:	4a52      	ldr	r2, [pc, #328]	@ (8003ef0 <HAL_DMA_Start_IT+0x244>)
 8003da6:	4294      	cmp	r4, r2
 8003da8:	f000 824c 	beq.w	8004244 <HAL_DMA_Start_IT+0x598>
 8003dac:	3218      	adds	r2, #24
 8003dae:	4294      	cmp	r4, r2
 8003db0:	f000 8269 	beq.w	8004286 <HAL_DMA_Start_IT+0x5da>
 8003db4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003db8:	4294      	cmp	r4, r2
 8003dba:	f000 8271 	beq.w	80042a0 <HAL_DMA_Start_IT+0x5f4>
 8003dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003ef4 <HAL_DMA_Start_IT+0x248>)
 8003dc0:	429c      	cmp	r4, r3
 8003dc2:	f000 82ce 	beq.w	8004362 <HAL_DMA_Start_IT+0x6b6>
 8003dc6:	3318      	adds	r3, #24
 8003dc8:	429c      	cmp	r4, r3
 8003dca:	f000 82d5 	beq.w	8004378 <HAL_DMA_Start_IT+0x6cc>
 8003dce:	3318      	adds	r3, #24
 8003dd0:	429c      	cmp	r4, r3
 8003dd2:	f000 82e5 	beq.w	80043a0 <HAL_DMA_Start_IT+0x6f4>
 8003dd6:	3318      	adds	r3, #24
 8003dd8:	429c      	cmp	r4, r3
 8003dda:	f000 82fe 	beq.w	80043da <HAL_DMA_Start_IT+0x72e>
 8003dde:	3318      	adds	r3, #24
 8003de0:	429c      	cmp	r4, r3
 8003de2:	f000 830f 	beq.w	8004404 <HAL_DMA_Start_IT+0x758>
 8003de6:	3318      	adds	r3, #24
 8003de8:	429c      	cmp	r4, r3
 8003dea:	f000 8321 	beq.w	8004430 <HAL_DMA_Start_IT+0x784>
 8003dee:	3318      	adds	r3, #24
 8003df0:	429c      	cmp	r4, r3
 8003df2:	f000 8349 	beq.w	8004488 <HAL_DMA_Start_IT+0x7dc>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003df6:	6823      	ldr	r3, [r4, #0]
 8003df8:	f023 030e 	bic.w	r3, r3, #14
 8003dfc:	f043 030a 	orr.w	r3, r3, #10
 8003e00:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003e02:	b119      	cbz	r1, 8003e0c <HAL_DMA_Start_IT+0x160>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003e04:	6823      	ldr	r3, [r4, #0]
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e0c:	4b38      	ldr	r3, [pc, #224]	@ (8003ef0 <HAL_DMA_Start_IT+0x244>)
 8003e0e:	4a37      	ldr	r2, [pc, #220]	@ (8003eec <HAL_DMA_Start_IT+0x240>)
 8003e10:	4294      	cmp	r4, r2
 8003e12:	bf18      	it	ne
 8003e14:	429c      	cmpne	r4, r3
 8003e16:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	4294      	cmp	r4, r2
 8003e22:	bf08      	it	eq
 8003e24:	f043 0301 	orreq.w	r3, r3, #1
 8003e28:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8003e2c:	4294      	cmp	r4, r2
 8003e2e:	bf08      	it	eq
 8003e30:	f043 0301 	orreq.w	r3, r3, #1
 8003e34:	3218      	adds	r2, #24
 8003e36:	4294      	cmp	r4, r2
 8003e38:	bf08      	it	eq
 8003e3a:	f043 0301 	orreq.w	r3, r3, #1
 8003e3e:	3218      	adds	r2, #24
 8003e40:	4294      	cmp	r4, r2
 8003e42:	bf08      	it	eq
 8003e44:	f043 0301 	orreq.w	r3, r3, #1
 8003e48:	3218      	adds	r2, #24
 8003e4a:	4294      	cmp	r4, r2
 8003e4c:	bf08      	it	eq
 8003e4e:	f043 0301 	orreq.w	r3, r3, #1
 8003e52:	3218      	adds	r2, #24
 8003e54:	4294      	cmp	r4, r2
 8003e56:	bf08      	it	eq
 8003e58:	f043 0301 	orreq.w	r3, r3, #1
 8003e5c:	3218      	adds	r2, #24
 8003e5e:	4294      	cmp	r4, r2
 8003e60:	bf08      	it	eq
 8003e62:	f043 0301 	orreq.w	r3, r3, #1
 8003e66:	3218      	adds	r2, #24
 8003e68:	4294      	cmp	r4, r2
 8003e6a:	bf08      	it	eq
 8003e6c:	f043 0301 	orreq.w	r3, r3, #1
 8003e70:	3218      	adds	r2, #24
 8003e72:	4294      	cmp	r4, r2
 8003e74:	bf08      	it	eq
 8003e76:	f043 0301 	orreq.w	r3, r3, #1
 8003e7a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ef8 <HAL_DMA_Start_IT+0x24c>)
 8003e7c:	4294      	cmp	r4, r2
 8003e7e:	bf08      	it	eq
 8003e80:	f043 0301 	orreq.w	r3, r3, #1
 8003e84:	3214      	adds	r2, #20
 8003e86:	4294      	cmp	r4, r2
 8003e88:	bf08      	it	eq
 8003e8a:	f043 0301 	orreq.w	r3, r3, #1
 8003e8e:	3214      	adds	r2, #20
 8003e90:	4294      	cmp	r4, r2
 8003e92:	bf08      	it	eq
 8003e94:	f043 0301 	orreq.w	r3, r3, #1
 8003e98:	3214      	adds	r2, #20
 8003e9a:	4294      	cmp	r4, r2
 8003e9c:	bf08      	it	eq
 8003e9e:	f043 0301 	orreq.w	r3, r3, #1
 8003ea2:	3214      	adds	r2, #20
 8003ea4:	4294      	cmp	r4, r2
 8003ea6:	bf08      	it	eq
 8003ea8:	f043 0301 	orreq.w	r3, r3, #1
 8003eac:	3214      	adds	r2, #20
 8003eae:	4294      	cmp	r4, r2
 8003eb0:	bf08      	it	eq
 8003eb2:	f043 0301 	orreq.w	r3, r3, #1
 8003eb6:	3214      	adds	r2, #20
 8003eb8:	4294      	cmp	r4, r2
 8003eba:	bf08      	it	eq
 8003ebc:	f043 0301 	orreq.w	r3, r3, #1
 8003ec0:	3214      	adds	r2, #20
 8003ec2:	4294      	cmp	r4, r2
 8003ec4:	bf08      	it	eq
 8003ec6:	f043 0301 	orreq.w	r3, r3, #1
 8003eca:	b91b      	cbnz	r3, 8003ed4 <HAL_DMA_Start_IT+0x228>
 8003ecc:	f1be 0f00 	cmp.w	lr, #0
 8003ed0:	f000 8115 	beq.w	80040fe <HAL_DMA_Start_IT+0x452>
 8003ed4:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
 8003ed8:	e100      	b.n	80040dc <HAL_DMA_Start_IT+0x430>
 8003eda:	bf00      	nop
 8003edc:	40020070 	.word	0x40020070
 8003ee0:	40020028 	.word	0x40020028
 8003ee4:	40020040 	.word	0x40020040
 8003ee8:	40020058 	.word	0x40020058
 8003eec:	40020088 	.word	0x40020088
 8003ef0:	400200a0 	.word	0x400200a0
 8003ef4:	40020428 	.word	0x40020428
 8003ef8:	58025408 	.word	0x58025408
 8003efc:	40020010 	.word	0x40020010
    __HAL_DMA_DISABLE(hdma);
 8003f00:	4544      	cmp	r4, r8
 8003f02:	f000 812f 	beq.w	8004164 <HAL_DMA_Start_IT+0x4b8>
 8003f06:	454c      	cmp	r4, r9
 8003f08:	f000 8154 	beq.w	80041b4 <HAL_DMA_Start_IT+0x508>
 8003f0c:	f1bb 0f00 	cmp.w	fp, #0
 8003f10:	f040 8106 	bne.w	8004120 <HAL_DMA_Start_IT+0x474>
 8003f14:	f8df c54c 	ldr.w	ip, [pc, #1356]	@ 8004464 <HAL_DMA_Start_IT+0x7b8>
 8003f18:	4564      	cmp	r4, ip
 8003f1a:	f000 816b 	beq.w	80041f4 <HAL_DMA_Start_IT+0x548>
 8003f1e:	f10c 0c18 	add.w	ip, ip, #24
 8003f22:	4564      	cmp	r4, ip
 8003f24:	f000 817a 	beq.w	800421c <HAL_DMA_Start_IT+0x570>
 8003f28:	f10c 0c18 	add.w	ip, ip, #24
 8003f2c:	4564      	cmp	r4, ip
 8003f2e:	f000 8196 	beq.w	800425e <HAL_DMA_Start_IT+0x5b2>
 8003f32:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8003f36:	4564      	cmp	r4, ip
 8003f38:	f000 81bd 	beq.w	80042b6 <HAL_DMA_Start_IT+0x60a>
 8003f3c:	f10c 0c18 	add.w	ip, ip, #24
 8003f40:	4564      	cmp	r4, ip
 8003f42:	f000 8205 	beq.w	8004350 <HAL_DMA_Start_IT+0x6a4>
 8003f46:	f10c 0c18 	add.w	ip, ip, #24
 8003f4a:	4564      	cmp	r4, ip
 8003f4c:	f000 821f 	beq.w	800438e <HAL_DMA_Start_IT+0x6e2>
 8003f50:	f10c 0c18 	add.w	ip, ip, #24
 8003f54:	4564      	cmp	r4, ip
 8003f56:	f000 822e 	beq.w	80043b6 <HAL_DMA_Start_IT+0x70a>
 8003f5a:	f10c 0c18 	add.w	ip, ip, #24
 8003f5e:	4564      	cmp	r4, ip
 8003f60:	f000 8232 	beq.w	80043c8 <HAL_DMA_Start_IT+0x71c>
 8003f64:	f10c 0c18 	add.w	ip, ip, #24
 8003f68:	4564      	cmp	r4, ip
 8003f6a:	f000 8258 	beq.w	800441e <HAL_DMA_Start_IT+0x772>
 8003f6e:	f10c 0c18 	add.w	ip, ip, #24
 8003f72:	4564      	cmp	r4, ip
 8003f74:	f000 8269 	beq.w	800444a <HAL_DMA_Start_IT+0x79e>
 8003f78:	f10c 0c18 	add.w	ip, ip, #24
 8003f7c:	4564      	cmp	r4, ip
 8003f7e:	f000 8290 	beq.w	80044a2 <HAL_DMA_Start_IT+0x7f6>
 8003f82:	f8d4 c000 	ldr.w	ip, [r4]
 8003f86:	f02c 0c01 	bic.w	ip, ip, #1
 8003f8a:	f8c4 c000 	str.w	ip, [r4]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f8e:	f8df c4d8 	ldr.w	ip, [pc, #1240]	@ 8004468 <HAL_DMA_Start_IT+0x7bc>
 8003f92:	4564      	cmp	r4, ip
 8003f94:	f040 81a6 	bne.w	80042e4 <HAL_DMA_Start_IT+0x638>
    if(hdma->DMAmuxRequestGen != 0U)
 8003f98:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f9c:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
 8003fa0:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8003fa2:	f1bc 0f00 	cmp.w	ip, #0
 8003fa6:	f43f aed3 	beq.w	8003d50 <HAL_DMA_Start_IT+0xa4>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003faa:	e9d0 671c 	ldrd	r6, r7, [r0, #112]	@ 0x70
 8003fae:	6077      	str	r7, [r6, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fb0:	f8df 84b0 	ldr.w	r8, [pc, #1200]	@ 8004464 <HAL_DMA_Start_IT+0x7b8>
 8003fb4:	f8df 94b4 	ldr.w	r9, [pc, #1204]	@ 800446c <HAL_DMA_Start_IT+0x7c0>
 8003fb8:	454c      	cmp	r4, r9
 8003fba:	bf18      	it	ne
 8003fbc:	4544      	cmpne	r4, r8
 8003fbe:	f109 0918 	add.w	r9, r9, #24
 8003fc2:	bf0c      	ite	eq
 8003fc4:	f04f 0801 	moveq.w	r8, #1
 8003fc8:	f04f 0800 	movne.w	r8, #0
 8003fcc:	454c      	cmp	r4, r9
 8003fce:	bf08      	it	eq
 8003fd0:	f048 0801 	orreq.w	r8, r8, #1
 8003fd4:	f509 7956 	add.w	r9, r9, #856	@ 0x358
 8003fd8:	454c      	cmp	r4, r9
 8003fda:	bf08      	it	eq
 8003fdc:	f048 0801 	orreq.w	r8, r8, #1
 8003fe0:	f109 0918 	add.w	r9, r9, #24
 8003fe4:	454c      	cmp	r4, r9
 8003fe6:	bf08      	it	eq
 8003fe8:	f048 0801 	orreq.w	r8, r8, #1
 8003fec:	f109 0918 	add.w	r9, r9, #24
 8003ff0:	454c      	cmp	r4, r9
 8003ff2:	bf08      	it	eq
 8003ff4:	f048 0801 	orreq.w	r8, r8, #1
 8003ff8:	f109 0918 	add.w	r9, r9, #24
 8003ffc:	454c      	cmp	r4, r9
 8003ffe:	bf08      	it	eq
 8004000:	f048 0801 	orreq.w	r8, r8, #1
 8004004:	f109 0918 	add.w	r9, r9, #24
 8004008:	454c      	cmp	r4, r9
 800400a:	bf08      	it	eq
 800400c:	f048 0801 	orreq.w	r8, r8, #1
 8004010:	f109 0918 	add.w	r9, r9, #24
 8004014:	454c      	cmp	r4, r9
 8004016:	bf08      	it	eq
 8004018:	f048 0801 	orreq.w	r8, r8, #1
 800401c:	f109 0918 	add.w	r9, r9, #24
 8004020:	454c      	cmp	r4, r9
 8004022:	bf08      	it	eq
 8004024:	f048 0801 	orreq.w	r8, r8, #1
 8004028:	f1b8 0f00 	cmp.w	r8, #0
 800402c:	f47f ae90 	bne.w	8003d50 <HAL_DMA_Start_IT+0xa4>
 8004030:	f8df 843c 	ldr.w	r8, [pc, #1084]	@ 8004470 <HAL_DMA_Start_IT+0x7c4>
 8004034:	4544      	cmp	r4, r8
 8004036:	f43f ae8b 	beq.w	8003d50 <HAL_DMA_Start_IT+0xa4>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800403a:	f8df 8438 	ldr.w	r8, [pc, #1080]	@ 8004474 <HAL_DMA_Start_IT+0x7c8>
 800403e:	f8df 9438 	ldr.w	r9, [pc, #1080]	@ 8004478 <HAL_DMA_Start_IT+0x7cc>
 8004042:	454c      	cmp	r4, r9
 8004044:	bf18      	it	ne
 8004046:	4544      	cmpne	r4, r8
 8004048:	f109 0914 	add.w	r9, r9, #20
 800404c:	bf0c      	ite	eq
 800404e:	f04f 0801 	moveq.w	r8, #1
 8004052:	f04f 0800 	movne.w	r8, #0
 8004056:	454c      	cmp	r4, r9
 8004058:	bf08      	it	eq
 800405a:	f048 0801 	orreq.w	r8, r8, #1
 800405e:	f109 0914 	add.w	r9, r9, #20
 8004062:	454c      	cmp	r4, r9
 8004064:	bf08      	it	eq
 8004066:	f048 0801 	orreq.w	r8, r8, #1
 800406a:	f109 0914 	add.w	r9, r9, #20
 800406e:	454c      	cmp	r4, r9
 8004070:	bf08      	it	eq
 8004072:	f048 0801 	orreq.w	r8, r8, #1
 8004076:	f109 0914 	add.w	r9, r9, #20
 800407a:	454c      	cmp	r4, r9
 800407c:	bf08      	it	eq
 800407e:	f048 0801 	orreq.w	r8, r8, #1
 8004082:	f109 0914 	add.w	r9, r9, #20
 8004086:	454c      	cmp	r4, r9
 8004088:	bf08      	it	eq
 800408a:	f048 0801 	orreq.w	r8, r8, #1
 800408e:	f1b8 0f00 	cmp.w	r8, #0
 8004092:	d104      	bne.n	800409e <HAL_DMA_Start_IT+0x3f2>
 8004094:	f8df 83e4 	ldr.w	r8, [pc, #996]	@ 800447c <HAL_DMA_Start_IT+0x7d0>
 8004098:	4544      	cmp	r4, r8
 800409a:	f040 820d 	bne.w	80044b8 <HAL_DMA_Start_IT+0x80c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800409e:	6dc6      	ldr	r6, [r0, #92]	@ 0x5c
 80040a0:	f04f 0801 	mov.w	r8, #1
 80040a4:	f006 091f 	and.w	r9, r6, #31
 80040a8:	9e01      	ldr	r6, [sp, #4]
 80040aa:	fa08 f809 	lsl.w	r8, r8, r9
 80040ae:	f8c6 8004 	str.w	r8, [r6, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80040b2:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040b4:	6883      	ldr	r3, [r0, #8]
 80040b6:	2b40      	cmp	r3, #64	@ 0x40
 80040b8:	f000 81fc 	beq.w	80044b4 <HAL_DMA_Start_IT+0x808>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80040bc:	60a1      	str	r1, [r4, #8]
      if(hdma->XferHalfCpltCallback != NULL)
 80040be:	6c03      	ldr	r3, [r0, #64]	@ 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80040c0:	60e2      	str	r2, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c2:	e662      	b.n	8003d8a <HAL_DMA_Start_IT+0xde>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	f023 031e 	bic.w	r3, r3, #30
 80040ca:	f043 0316 	orr.w	r3, r3, #22
 80040ce:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80040d0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80040d2:	b11b      	cbz	r3, 80040dc <HAL_DMA_Start_IT+0x430>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	f043 0308 	orr.w	r3, r3, #8
 80040da:	6023      	str	r3, [r4, #0]
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040dc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	03d2      	lsls	r2, r2, #15
 80040e2:	d503      	bpl.n	80040ec <HAL_DMA_Start_IT+0x440>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040ea:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80040ec:	f1bc 0f00 	cmp.w	ip, #0
 80040f0:	d005      	beq.n	80040fe <HAL_DMA_Start_IT+0x452>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040f2:	f8dc 3000 	ldr.w	r3, [ip]
 80040f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fa:	f8cc 3000 	str.w	r3, [ip]
    __HAL_DMA_ENABLE(hdma);
 80040fe:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004102:	f043 0301 	orr.w	r3, r3, #1
 8004106:	6023      	str	r3, [r4, #0]
}
 8004108:	b003      	add	sp, #12
 800410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(hdma);
 800410e:	2002      	movs	r0, #2
}
 8004110:	b003      	add	sp, #12
 8004112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8004116:	2001      	movs	r0, #1
}
 8004118:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800411a:	60a2      	str	r2, [r4, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800411c:	60e1      	str	r1, [r4, #12]
 800411e:	e62c      	b.n	8003d7a <HAL_DMA_Start_IT+0xce>
    __HAL_DMA_DISABLE(hdma);
 8004120:	f8df a338 	ldr.w	sl, [pc, #824]	@ 800445c <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004124:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004128:	f8da 8070 	ldr.w	r8, [sl, #112]	@ 0x70
    if(hdma->DMAmuxRequestGen != 0U)
 800412c:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004130:	f028 0801 	bic.w	r8, r8, #1
 8004134:	f8ca 8070 	str.w	r8, [sl, #112]	@ 0x70
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004138:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 800413a:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800413e:	f1bc 0f00 	cmp.w	ip, #0
 8004142:	f47f ae02 	bne.w	8003d4a <HAL_DMA_Start_IT+0x9e>
 8004146:	e603      	b.n	8003d50 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004148:	49c4      	ldr	r1, [pc, #784]	@ (800445c <HAL_DMA_Start_IT+0x7b0>)
 800414a:	6f0a      	ldr	r2, [r1, #112]	@ 0x70
 800414c:	f022 021e 	bic.w	r2, r2, #30
 8004150:	f042 0216 	orr.w	r2, r2, #22
 8004154:	670a      	str	r2, [r1, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 8004156:	2b00      	cmp	r3, #0
 8004158:	d0c0      	beq.n	80040dc <HAL_DMA_Start_IT+0x430>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f043 0308 	orr.w	r3, r3, #8
 8004160:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004162:	e653      	b.n	8003e0c <HAL_DMA_Start_IT+0x160>
    __HAL_DMA_DISABLE(hdma);
 8004164:	f8df a2f4 	ldr.w	sl, [pc, #756]	@ 800445c <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004168:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 800416c:	f8da 8040 	ldr.w	r8, [sl, #64]	@ 0x40
    if(hdma->DMAmuxRequestGen != 0U)
 8004170:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004174:	f028 0801 	bic.w	r8, r8, #1
 8004178:	f8ca 8040 	str.w	r8, [sl, #64]	@ 0x40
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800417c:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 800417e:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004182:	f1bc 0f00 	cmp.w	ip, #0
 8004186:	f47f ade0 	bne.w	8003d4a <HAL_DMA_Start_IT+0x9e>
 800418a:	e5e1      	b.n	8003d50 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800418c:	49b3      	ldr	r1, [pc, #716]	@ (800445c <HAL_DMA_Start_IT+0x7b0>)
 800418e:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004190:	f022 021e 	bic.w	r2, r2, #30
 8004194:	f042 0216 	orr.w	r2, r2, #22
 8004198:	640a      	str	r2, [r1, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1dd      	bne.n	800415a <HAL_DMA_Start_IT+0x4ae>
 800419e:	e79d      	b.n	80040dc <HAL_DMA_Start_IT+0x430>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80041a0:	49ae      	ldr	r1, [pc, #696]	@ (800445c <HAL_DMA_Start_IT+0x7b0>)
 80041a2:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80041a4:	f022 021e 	bic.w	r2, r2, #30
 80041a8:	f042 0216 	orr.w	r2, r2, #22
 80041ac:	658a      	str	r2, [r1, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d3      	bne.n	800415a <HAL_DMA_Start_IT+0x4ae>
 80041b2:	e793      	b.n	80040dc <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 80041b4:	f8df a2a4 	ldr.w	sl, [pc, #676]	@ 800445c <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041b8:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 80041bc:	f8da 8058 	ldr.w	r8, [sl, #88]	@ 0x58
    if(hdma->DMAmuxRequestGen != 0U)
 80041c0:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 80041c4:	f028 0801 	bic.w	r8, r8, #1
 80041c8:	f8ca 8058 	str.w	r8, [sl, #88]	@ 0x58
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041cc:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 80041ce:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80041d2:	f1bc 0f00 	cmp.w	ip, #0
 80041d6:	f47f adb8 	bne.w	8003d4a <HAL_DMA_Start_IT+0x9e>
 80041da:	e5b9      	b.n	8003d50 <HAL_DMA_Start_IT+0xa4>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80041dc:	499f      	ldr	r1, [pc, #636]	@ (800445c <HAL_DMA_Start_IT+0x7b0>)
 80041de:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80041e2:	f022 021e 	bic.w	r2, r2, #30
 80041e6:	f042 0216 	orr.w	r2, r2, #22
 80041ea:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1b3      	bne.n	800415a <HAL_DMA_Start_IT+0x4ae>
 80041f2:	e773      	b.n	80040dc <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 80041f4:	f8df a264 	ldr.w	sl, [pc, #612]	@ 800445c <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f8:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 80041fc:	f8da 8088 	ldr.w	r8, [sl, #136]	@ 0x88
    if(hdma->DMAmuxRequestGen != 0U)
 8004200:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 8004204:	f028 0801 	bic.w	r8, r8, #1
 8004208:	f8ca 8088 	str.w	r8, [sl, #136]	@ 0x88
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800420c:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 800420e:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004212:	f1bc 0f00 	cmp.w	ip, #0
 8004216:	f47f aec8 	bne.w	8003faa <HAL_DMA_Start_IT+0x2fe>
 800421a:	e6c9      	b.n	8003fb0 <HAL_DMA_Start_IT+0x304>
    __HAL_DMA_DISABLE(hdma);
 800421c:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 800445c <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004220:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004224:	f8da 80a0 	ldr.w	r8, [sl, #160]	@ 0xa0
    if(hdma->DMAmuxRequestGen != 0U)
 8004228:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 800422c:	f028 0801 	bic.w	r8, r8, #1
 8004230:	f8ca 80a0 	str.w	r8, [sl, #160]	@ 0xa0
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004234:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004236:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800423a:	f1bc 0f00 	cmp.w	ip, #0
 800423e:	f47f aeb4 	bne.w	8003faa <HAL_DMA_Start_IT+0x2fe>
 8004242:	e6b5      	b.n	8003fb0 <HAL_DMA_Start_IT+0x304>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004244:	4985      	ldr	r1, [pc, #532]	@ (800445c <HAL_DMA_Start_IT+0x7b0>)
 8004246:	f8d1 20a0 	ldr.w	r2, [r1, #160]	@ 0xa0
 800424a:	f022 021e 	bic.w	r2, r2, #30
 800424e:	f042 0216 	orr.w	r2, r2, #22
 8004252:	f8c1 20a0 	str.w	r2, [r1, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8004256:	2b00      	cmp	r3, #0
 8004258:	f47f af7f 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 800425c:	e73e      	b.n	80040dc <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 800425e:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 800445c <HAL_DMA_Start_IT+0x7b0>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004262:	f8d0 9064 	ldr.w	r9, [r0, #100]	@ 0x64
    __HAL_DMA_DISABLE(hdma);
 8004266:	f8da 80b8 	ldr.w	r8, [sl, #184]	@ 0xb8
    if(hdma->DMAmuxRequestGen != 0U)
 800426a:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    __HAL_DMA_DISABLE(hdma);
 800426e:	f028 0801 	bic.w	r8, r8, #1
 8004272:	f8ca 80b8 	str.w	r8, [sl, #184]	@ 0xb8
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004276:	6e86      	ldr	r6, [r0, #104]	@ 0x68
 8004278:	f8c9 6004 	str.w	r6, [r9, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800427c:	f1bc 0f00 	cmp.w	ip, #0
 8004280:	f47f ae93 	bne.w	8003faa <HAL_DMA_Start_IT+0x2fe>
 8004284:	e694      	b.n	8003fb0 <HAL_DMA_Start_IT+0x304>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004286:	4975      	ldr	r1, [pc, #468]	@ (800445c <HAL_DMA_Start_IT+0x7b0>)
 8004288:	f8d1 20b8 	ldr.w	r2, [r1, #184]	@ 0xb8
 800428c:	f022 021e 	bic.w	r2, r2, #30
 8004290:	f042 0216 	orr.w	r2, r2, #22
 8004294:	f8c1 20b8 	str.w	r2, [r1, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 8004298:	2b00      	cmp	r3, #0
 800429a:	f47f af5e 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 800429e:	e71d      	b.n	80040dc <HAL_DMA_Start_IT+0x430>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80042a0:	496f      	ldr	r1, [pc, #444]	@ (8004460 <HAL_DMA_Start_IT+0x7b4>)
 80042a2:	690a      	ldr	r2, [r1, #16]
 80042a4:	f022 021e 	bic.w	r2, r2, #30
 80042a8:	f042 0216 	orr.w	r2, r2, #22
 80042ac:	610a      	str	r2, [r1, #16]
      if(hdma->XferHalfCpltCallback != NULL)
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f47f af53 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 80042b4:	e712      	b.n	80040dc <HAL_DMA_Start_IT+0x430>
    __HAL_DMA_DISABLE(hdma);
 80042b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004460 <HAL_DMA_Start_IT+0x7b4>
 80042ba:	f8d8 c010 	ldr.w	ip, [r8, #16]
 80042be:	f02c 0c01 	bic.w	ip, ip, #1
 80042c2:	f8c8 c010 	str.w	ip, [r8, #16]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042c6:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8004480 <HAL_DMA_Start_IT+0x7d4>
 80042ca:	4564      	cmp	r4, ip
 80042cc:	f43f ae64 	beq.w	8003f98 <HAL_DMA_Start_IT+0x2ec>
 80042d0:	f10c 0c18 	add.w	ip, ip, #24
 80042d4:	4564      	cmp	r4, ip
 80042d6:	f43f ae5f 	beq.w	8003f98 <HAL_DMA_Start_IT+0x2ec>
 80042da:	f10c 0c18 	add.w	ip, ip, #24
 80042de:	4564      	cmp	r4, ip
 80042e0:	f43f ae5a 	beq.w	8003f98 <HAL_DMA_Start_IT+0x2ec>
 80042e4:	f8df c19c 	ldr.w	ip, [pc, #412]	@ 8004484 <HAL_DMA_Start_IT+0x7d8>
 80042e8:	4564      	cmp	r4, ip
 80042ea:	f43f ae55 	beq.w	8003f98 <HAL_DMA_Start_IT+0x2ec>
 80042ee:	f10c 0c18 	add.w	ip, ip, #24
 80042f2:	4564      	cmp	r4, ip
 80042f4:	f43f ae50 	beq.w	8003f98 <HAL_DMA_Start_IT+0x2ec>
 80042f8:	f10c 0c18 	add.w	ip, ip, #24
 80042fc:	4564      	cmp	r4, ip
 80042fe:	f43f ae4b 	beq.w	8003f98 <HAL_DMA_Start_IT+0x2ec>
 8004302:	f10c 0c18 	add.w	ip, ip, #24
 8004306:	4564      	cmp	r4, ip
 8004308:	f43f ae46 	beq.w	8003f98 <HAL_DMA_Start_IT+0x2ec>
 800430c:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8004474 <HAL_DMA_Start_IT+0x7c8>
 8004310:	4564      	cmp	r4, ip
 8004312:	d06d      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
 8004314:	f10c 0c14 	add.w	ip, ip, #20
 8004318:	4564      	cmp	r4, ip
 800431a:	d069      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
 800431c:	f10c 0c14 	add.w	ip, ip, #20
 8004320:	4564      	cmp	r4, ip
 8004322:	d065      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
 8004324:	f10c 0c14 	add.w	ip, ip, #20
 8004328:	4564      	cmp	r4, ip
 800432a:	d061      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
 800432c:	f10c 0c14 	add.w	ip, ip, #20
 8004330:	4564      	cmp	r4, ip
 8004332:	d05d      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
 8004334:	f10c 0c14 	add.w	ip, ip, #20
 8004338:	4564      	cmp	r4, ip
 800433a:	d059      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
 800433c:	f10c 0c14 	add.w	ip, ip, #20
 8004340:	4564      	cmp	r4, ip
 8004342:	d055      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
 8004344:	f10c 0c14 	add.w	ip, ip, #20
 8004348:	4564      	cmp	r4, ip
 800434a:	d051      	beq.n	80043f0 <HAL_DMA_Start_IT+0x744>
      if(hdma->XferHalfCpltCallback != NULL)
 800434c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800434e:	e536      	b.n	8003dbe <HAL_DMA_Start_IT+0x112>
    __HAL_DMA_DISABLE(hdma);
 8004350:	f8df 810c 	ldr.w	r8, [pc, #268]	@ 8004460 <HAL_DMA_Start_IT+0x7b4>
 8004354:	f8d8 c028 	ldr.w	ip, [r8, #40]	@ 0x28
 8004358:	f02c 0c01 	bic.w	ip, ip, #1
 800435c:	f8c8 c028 	str.w	ip, [r8, #40]	@ 0x28
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004360:	e61a      	b.n	8003f98 <HAL_DMA_Start_IT+0x2ec>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004362:	4a3f      	ldr	r2, [pc, #252]	@ (8004460 <HAL_DMA_Start_IT+0x7b4>)
 8004364:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8004366:	f023 031e 	bic.w	r3, r3, #30
 800436a:	f043 0316 	orr.w	r3, r3, #22
 800436e:	6293      	str	r3, [r2, #40]	@ 0x28
      if(hdma->XferHalfCpltCallback != NULL)
 8004370:	2900      	cmp	r1, #0
 8004372:	f47f aef2 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 8004376:	e5ad      	b.n	8003ed4 <HAL_DMA_Start_IT+0x228>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004378:	4a39      	ldr	r2, [pc, #228]	@ (8004460 <HAL_DMA_Start_IT+0x7b4>)
 800437a:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800437c:	f023 031e 	bic.w	r3, r3, #30
 8004380:	f043 0316 	orr.w	r3, r3, #22
 8004384:	6413      	str	r3, [r2, #64]	@ 0x40
      if(hdma->XferHalfCpltCallback != NULL)
 8004386:	2900      	cmp	r1, #0
 8004388:	f47f aee7 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 800438c:	e5a2      	b.n	8003ed4 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 800438e:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004460 <HAL_DMA_Start_IT+0x7b4>
 8004392:	f8d8 c040 	ldr.w	ip, [r8, #64]	@ 0x40
 8004396:	f02c 0c01 	bic.w	ip, ip, #1
 800439a:	f8c8 c040 	str.w	ip, [r8, #64]	@ 0x40
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800439e:	e5fb      	b.n	8003f98 <HAL_DMA_Start_IT+0x2ec>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80043a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004460 <HAL_DMA_Start_IT+0x7b4>)
 80043a2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80043a4:	f023 031e 	bic.w	r3, r3, #30
 80043a8:	f043 0316 	orr.w	r3, r3, #22
 80043ac:	6593      	str	r3, [r2, #88]	@ 0x58
      if(hdma->XferHalfCpltCallback != NULL)
 80043ae:	2900      	cmp	r1, #0
 80043b0:	f47f aed3 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 80043b4:	e58e      	b.n	8003ed4 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 80043b6:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8004460 <HAL_DMA_Start_IT+0x7b4>
 80043ba:	f8d8 c058 	ldr.w	ip, [r8, #88]	@ 0x58
 80043be:	f02c 0c01 	bic.w	ip, ip, #1
 80043c2:	f8c8 c058 	str.w	ip, [r8, #88]	@ 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043c6:	e5e2      	b.n	8003f8e <HAL_DMA_Start_IT+0x2e2>
    __HAL_DMA_DISABLE(hdma);
 80043c8:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8004460 <HAL_DMA_Start_IT+0x7b4>
 80043cc:	f8d8 c070 	ldr.w	ip, [r8, #112]	@ 0x70
 80043d0:	f02c 0c01 	bic.w	ip, ip, #1
 80043d4:	f8c8 c070 	str.w	ip, [r8, #112]	@ 0x70
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80043d8:	e784      	b.n	80042e4 <HAL_DMA_Start_IT+0x638>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80043da:	4a21      	ldr	r2, [pc, #132]	@ (8004460 <HAL_DMA_Start_IT+0x7b4>)
 80043dc:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80043de:	f023 031e 	bic.w	r3, r3, #30
 80043e2:	f043 0316 	orr.w	r3, r3, #22
 80043e6:	6713      	str	r3, [r2, #112]	@ 0x70
      if(hdma->XferHalfCpltCallback != NULL)
 80043e8:	2900      	cmp	r1, #0
 80043ea:	f47f aeb6 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 80043ee:	e571      	b.n	8003ed4 <HAL_DMA_Start_IT+0x228>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f0:	e9d0 6719 	ldrd	r6, r7, [r0, #100]	@ 0x64
    if(hdma->DMAmuxRequestGen != 0U)
 80043f4:	f8d0 c06c 	ldr.w	ip, [r0, #108]	@ 0x6c
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f8:	6077      	str	r7, [r6, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 80043fa:	f1bc 0f00 	cmp.w	ip, #0
 80043fe:	f47f add4 	bne.w	8003faa <HAL_DMA_Start_IT+0x2fe>
 8004402:	e61a      	b.n	800403a <HAL_DMA_Start_IT+0x38e>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004404:	4a16      	ldr	r2, [pc, #88]	@ (8004460 <HAL_DMA_Start_IT+0x7b4>)
 8004406:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800440a:	f023 031e 	bic.w	r3, r3, #30
 800440e:	f043 0316 	orr.w	r3, r3, #22
 8004412:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
      if(hdma->XferHalfCpltCallback != NULL)
 8004416:	2900      	cmp	r1, #0
 8004418:	f47f ae9f 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 800441c:	e55a      	b.n	8003ed4 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 800441e:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8004460 <HAL_DMA_Start_IT+0x7b4>
 8004422:	f8d8 c088 	ldr.w	ip, [r8, #136]	@ 0x88
 8004426:	f02c 0c01 	bic.w	ip, ip, #1
 800442a:	f8c8 c088 	str.w	ip, [r8, #136]	@ 0x88
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800442e:	e5ae      	b.n	8003f8e <HAL_DMA_Start_IT+0x2e2>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004430:	4a0b      	ldr	r2, [pc, #44]	@ (8004460 <HAL_DMA_Start_IT+0x7b4>)
 8004432:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8004436:	f023 031e 	bic.w	r3, r3, #30
 800443a:	f043 0316 	orr.w	r3, r3, #22
 800443e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
      if(hdma->XferHalfCpltCallback != NULL)
 8004442:	2900      	cmp	r1, #0
 8004444:	f47f ae89 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 8004448:	e544      	b.n	8003ed4 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 800444a:	f8df 8014 	ldr.w	r8, [pc, #20]	@ 8004460 <HAL_DMA_Start_IT+0x7b4>
 800444e:	f8d8 c0a0 	ldr.w	ip, [r8, #160]	@ 0xa0
 8004452:	f02c 0c01 	bic.w	ip, ip, #1
 8004456:	f8c8 c0a0 	str.w	ip, [r8, #160]	@ 0xa0
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800445a:	e734      	b.n	80042c6 <HAL_DMA_Start_IT+0x61a>
 800445c:	40020000 	.word	0x40020000
 8004460:	40020400 	.word	0x40020400
 8004464:	40020088 	.word	0x40020088
 8004468:	40020458 	.word	0x40020458
 800446c:	400200a0 	.word	0x400200a0
 8004470:	400204b8 	.word	0x400204b8
 8004474:	58025408 	.word	0x58025408
 8004478:	5802541c 	.word	0x5802541c
 800447c:	58025494 	.word	0x58025494
 8004480:	40020410 	.word	0x40020410
 8004484:	40020470 	.word	0x40020470
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004488:	4a0c      	ldr	r2, [pc, #48]	@ (80044bc <HAL_DMA_Start_IT+0x810>)
 800448a:	f8d2 30b8 	ldr.w	r3, [r2, #184]	@ 0xb8
 800448e:	f023 031e 	bic.w	r3, r3, #30
 8004492:	f043 0316 	orr.w	r3, r3, #22
 8004496:	f8c2 30b8 	str.w	r3, [r2, #184]	@ 0xb8
      if(hdma->XferHalfCpltCallback != NULL)
 800449a:	2900      	cmp	r1, #0
 800449c:	f47f ae5d 	bne.w	800415a <HAL_DMA_Start_IT+0x4ae>
 80044a0:	e518      	b.n	8003ed4 <HAL_DMA_Start_IT+0x228>
    __HAL_DMA_DISABLE(hdma);
 80044a2:	f8df 8018 	ldr.w	r8, [pc, #24]	@ 80044bc <HAL_DMA_Start_IT+0x810>
 80044a6:	f8d8 c0b8 	ldr.w	ip, [r8, #184]	@ 0xb8
 80044aa:	f02c 0c01 	bic.w	ip, ip, #1
 80044ae:	f8c8 c0b8 	str.w	ip, [r8, #184]	@ 0xb8
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044b2:	e708      	b.n	80042c6 <HAL_DMA_Start_IT+0x61a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80044b4:	60a2      	str	r2, [r4, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80044b6:	60e1      	str	r1, [r4, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044b8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80044ba:	e46e      	b.n	8003d9a <HAL_DMA_Start_IT+0xee>
 80044bc:	40020400 	.word	0x40020400

080044c0 <HAL_DMA_Abort>:
{
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80044c4:	f7fd ffec 	bl	80024a0 <HAL_GetTick>
  if(hdma == NULL)
 80044c8:	2c00      	cmp	r4, #0
 80044ca:	d06b      	beq.n	80045a4 <HAL_DMA_Abort+0xe4>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044cc:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d162      	bne.n	800459a <HAL_DMA_Abort+0xda>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044d4:	6825      	ldr	r5, [r4, #0]
 80044d6:	4606      	mov	r6, r0
 80044d8:	4ba2      	ldr	r3, [pc, #648]	@ (8004764 <HAL_DMA_Abort+0x2a4>)
 80044da:	429d      	cmp	r5, r3
 80044dc:	d064      	beq.n	80045a8 <HAL_DMA_Abort+0xe8>
 80044de:	3318      	adds	r3, #24
 80044e0:	429d      	cmp	r5, r3
 80044e2:	d061      	beq.n	80045a8 <HAL_DMA_Abort+0xe8>
 80044e4:	3318      	adds	r3, #24
 80044e6:	429d      	cmp	r5, r3
 80044e8:	f000 80f1 	beq.w	80046ce <HAL_DMA_Abort+0x20e>
 80044ec:	3318      	adds	r3, #24
 80044ee:	429d      	cmp	r5, r3
 80044f0:	f000 8118 	beq.w	8004724 <HAL_DMA_Abort+0x264>
 80044f4:	3318      	adds	r3, #24
 80044f6:	429d      	cmp	r5, r3
 80044f8:	f000 8123 	beq.w	8004742 <HAL_DMA_Abort+0x282>
 80044fc:	3318      	adds	r3, #24
 80044fe:	429d      	cmp	r5, r3
 8004500:	f000 80fd 	beq.w	80046fe <HAL_DMA_Abort+0x23e>
 8004504:	3318      	adds	r3, #24
 8004506:	429d      	cmp	r5, r3
 8004508:	f000 8138 	beq.w	800477c <HAL_DMA_Abort+0x2bc>
 800450c:	3318      	adds	r3, #24
 800450e:	429d      	cmp	r5, r3
 8004510:	f000 8147 	beq.w	80047a2 <HAL_DMA_Abort+0x2e2>
 8004514:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8004518:	429d      	cmp	r5, r3
 800451a:	f000 8155 	beq.w	80047c8 <HAL_DMA_Abort+0x308>
 800451e:	3318      	adds	r3, #24
 8004520:	429d      	cmp	r5, r3
 8004522:	f000 8160 	beq.w	80047e6 <HAL_DMA_Abort+0x326>
 8004526:	3318      	adds	r3, #24
 8004528:	429d      	cmp	r5, r3
 800452a:	f000 816b 	beq.w	8004804 <HAL_DMA_Abort+0x344>
 800452e:	3318      	adds	r3, #24
 8004530:	429d      	cmp	r5, r3
 8004532:	f000 8169 	beq.w	8004808 <HAL_DMA_Abort+0x348>
 8004536:	3318      	adds	r3, #24
 8004538:	429d      	cmp	r5, r3
 800453a:	f000 8167 	beq.w	800480c <HAL_DMA_Abort+0x34c>
 800453e:	3318      	adds	r3, #24
 8004540:	429d      	cmp	r5, r3
 8004542:	f000 8165 	beq.w	8004810 <HAL_DMA_Abort+0x350>
 8004546:	3318      	adds	r3, #24
 8004548:	429d      	cmp	r5, r3
 800454a:	f000 8165 	beq.w	8004818 <HAL_DMA_Abort+0x358>
 800454e:	3318      	adds	r3, #24
 8004550:	429d      	cmp	r5, r3
 8004552:	f000 815f 	beq.w	8004814 <HAL_DMA_Abort+0x354>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004556:	682b      	ldr	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004558:	4a83      	ldr	r2, [pc, #524]	@ (8004768 <HAL_DMA_Abort+0x2a8>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800455a:	f023 030e 	bic.w	r3, r3, #14
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800455e:	4295      	cmp	r5, r2
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004560:	602b      	str	r3, [r5, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004562:	d014      	beq.n	800458e <HAL_DMA_Abort+0xce>
 8004564:	4b81      	ldr	r3, [pc, #516]	@ (800476c <HAL_DMA_Abort+0x2ac>)
 8004566:	429d      	cmp	r5, r3
 8004568:	d011      	beq.n	800458e <HAL_DMA_Abort+0xce>
 800456a:	3314      	adds	r3, #20
 800456c:	429d      	cmp	r5, r3
 800456e:	d00e      	beq.n	800458e <HAL_DMA_Abort+0xce>
 8004570:	3314      	adds	r3, #20
 8004572:	429d      	cmp	r5, r3
 8004574:	d00b      	beq.n	800458e <HAL_DMA_Abort+0xce>
 8004576:	3314      	adds	r3, #20
 8004578:	429d      	cmp	r5, r3
 800457a:	d008      	beq.n	800458e <HAL_DMA_Abort+0xce>
 800457c:	3314      	adds	r3, #20
 800457e:	429d      	cmp	r5, r3
 8004580:	d005      	beq.n	800458e <HAL_DMA_Abort+0xce>
 8004582:	3314      	adds	r3, #20
 8004584:	429d      	cmp	r5, r3
 8004586:	d002      	beq.n	800458e <HAL_DMA_Abort+0xce>
 8004588:	3314      	adds	r3, #20
 800458a:	429d      	cmp	r5, r3
 800458c:	d119      	bne.n	80045c2 <HAL_DMA_Abort+0x102>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800458e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004590:	6813      	ldr	r3, [r2, #0]
 8004592:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004596:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004598:	e013      	b.n	80045c2 <HAL_DMA_Abort+0x102>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800459a:	2280      	movs	r2, #128	@ 0x80
    __HAL_UNLOCK(hdma);
 800459c:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800459e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 80045a0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80045a4:	2001      	movs	r0, #1
}
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80045a8:	682b      	ldr	r3, [r5, #0]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045aa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80045ac:	f023 031e 	bic.w	r3, r3, #30
 80045b0:	602b      	str	r3, [r5, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80045b2:	696b      	ldr	r3, [r5, #20]
 80045b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b8:	616b      	str	r3, [r5, #20]
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045c0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	e005      	b.n	80045d8 <HAL_DMA_Abort+0x118>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045cc:	f7fd ff68 	bl	80024a0 <HAL_GetTick>
 80045d0:	1b83      	subs	r3, r0, r6
 80045d2:	2b05      	cmp	r3, #5
 80045d4:	f200 808a 	bhi.w	80046ec <HAL_DMA_Abort+0x22c>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	07db      	lsls	r3, r3, #31
 80045dc:	d4f6      	bmi.n	80045cc <HAL_DMA_Abort+0x10c>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	4960      	ldr	r1, [pc, #384]	@ (8004764 <HAL_DMA_Abort+0x2a4>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045e2:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045e4:	428b      	cmp	r3, r1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80045e8:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045ec:	d05e      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 80045ee:	3118      	adds	r1, #24
 80045f0:	428b      	cmp	r3, r1
 80045f2:	d05b      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 80045f4:	3118      	adds	r1, #24
 80045f6:	428b      	cmp	r3, r1
 80045f8:	d058      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 80045fa:	3118      	adds	r1, #24
 80045fc:	428b      	cmp	r3, r1
 80045fe:	d055      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004600:	3118      	adds	r1, #24
 8004602:	428b      	cmp	r3, r1
 8004604:	d052      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004606:	3118      	adds	r1, #24
 8004608:	428b      	cmp	r3, r1
 800460a:	d04f      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 800460c:	3118      	adds	r1, #24
 800460e:	428b      	cmp	r3, r1
 8004610:	d04c      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004612:	3118      	adds	r1, #24
 8004614:	428b      	cmp	r3, r1
 8004616:	d049      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004618:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800461c:	428b      	cmp	r3, r1
 800461e:	d045      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004620:	3118      	adds	r1, #24
 8004622:	428b      	cmp	r3, r1
 8004624:	d042      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004626:	3118      	adds	r1, #24
 8004628:	428b      	cmp	r3, r1
 800462a:	d03f      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 800462c:	3118      	adds	r1, #24
 800462e:	428b      	cmp	r3, r1
 8004630:	d03c      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004632:	3118      	adds	r1, #24
 8004634:	428b      	cmp	r3, r1
 8004636:	d039      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004638:	3118      	adds	r1, #24
 800463a:	428b      	cmp	r3, r1
 800463c:	d036      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 800463e:	3118      	adds	r1, #24
 8004640:	428b      	cmp	r3, r1
 8004642:	d033      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
 8004644:	3118      	adds	r1, #24
 8004646:	428b      	cmp	r3, r1
 8004648:	d030      	beq.n	80046ac <HAL_DMA_Abort+0x1ec>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800464a:	2101      	movs	r1, #1
 800464c:	4091      	lsls	r1, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800464e:	4a47      	ldr	r2, [pc, #284]	@ (800476c <HAL_DMA_Abort+0x2ac>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004650:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004652:	4845      	ldr	r0, [pc, #276]	@ (8004768 <HAL_DMA_Abort+0x2a8>)
 8004654:	4946      	ldr	r1, [pc, #280]	@ (8004770 <HAL_DMA_Abort+0x2b0>)
 8004656:	4283      	cmp	r3, r0
 8004658:	bf18      	it	ne
 800465a:	4293      	cmpne	r3, r2
 800465c:	f100 003c 	add.w	r0, r0, #60	@ 0x3c
 8004660:	bf0c      	ite	eq
 8004662:	2201      	moveq	r2, #1
 8004664:	2200      	movne	r2, #0
 8004666:	428b      	cmp	r3, r1
 8004668:	bf08      	it	eq
 800466a:	f042 0201 	orreq.w	r2, r2, #1
 800466e:	3128      	adds	r1, #40	@ 0x28
 8004670:	4283      	cmp	r3, r0
 8004672:	bf08      	it	eq
 8004674:	f042 0201 	orreq.w	r2, r2, #1
 8004678:	3028      	adds	r0, #40	@ 0x28
 800467a:	428b      	cmp	r3, r1
 800467c:	bf08      	it	eq
 800467e:	f042 0201 	orreq.w	r2, r2, #1
 8004682:	3128      	adds	r1, #40	@ 0x28
 8004684:	4283      	cmp	r3, r0
 8004686:	bf08      	it	eq
 8004688:	f042 0201 	orreq.w	r2, r2, #1
 800468c:	428b      	cmp	r3, r1
 800468e:	bf08      	it	eq
 8004690:	f042 0201 	orreq.w	r2, r2, #1
 8004694:	b96a      	cbnz	r2, 80046b2 <HAL_DMA_Abort+0x1f2>
 8004696:	4a37      	ldr	r2, [pc, #220]	@ (8004774 <HAL_DMA_Abort+0x2b4>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d00a      	beq.n	80046b2 <HAL_DMA_Abort+0x1f2>
    __HAL_UNLOCK(hdma);
 800469c:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800469e:	2201      	movs	r2, #1
  return HAL_OK;
 80046a0:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80046a2:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80046a6:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80046ac:	233f      	movs	r3, #63	@ 0x3f
 80046ae:	4093      	lsls	r3, r2
 80046b0:	6083      	str	r3, [r0, #8]
      if(hdma->DMAmuxRequestGen != 0U)
 80046b2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b4:	e9d4 2119 	ldrd	r2, r1, [r4, #100]	@ 0x64
 80046b8:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0ee      	beq.n	800469c <HAL_DMA_Abort+0x1dc>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046be:	681a      	ldr	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c0:	e9d4 101c 	ldrd	r1, r0, [r4, #112]	@ 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046c8:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ca:	6048      	str	r0, [r1, #4]
 80046cc:	e7e6      	b.n	800469c <HAL_DMA_Abort+0x1dc>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80046ce:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <HAL_DMA_Abort+0x2b8>)
 80046d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046d2:	f022 021e 	bic.w	r2, r2, #30
 80046d6:	641a      	str	r2, [r3, #64]	@ 0x40
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80046d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80046da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046de:	655a      	str	r2, [r3, #84]	@ 0x54
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046e0:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80046ea:	e76a      	b.n	80045c2 <HAL_DMA_Abort+0x102>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046ec:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 80046ee:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 80046f0:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046f2:	6561      	str	r1, [r4, #84]	@ 0x54
        __HAL_UNLOCK(hdma);
 80046f4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 80046f8:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        return HAL_ERROR;
 80046fc:	e752      	b.n	80045a4 <HAL_DMA_Abort+0xe4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80046fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004778 <HAL_DMA_Abort+0x2b8>)
 8004700:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004704:	f022 021e 	bic.w	r2, r2, #30
 8004708:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800470c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8004710:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004714:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004718:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800471a:	6813      	ldr	r3, [r2, #0]
 800471c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004720:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004722:	e74e      	b.n	80045c2 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004724:	4b14      	ldr	r3, [pc, #80]	@ (8004778 <HAL_DMA_Abort+0x2b8>)
 8004726:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004728:	f022 021e 	bic.w	r2, r2, #30
 800472c:	659a      	str	r2, [r3, #88]	@ 0x58
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800472e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004730:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004734:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004736:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004738:	6813      	ldr	r3, [r2, #0]
 800473a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800473e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004740:	e73f      	b.n	80045c2 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004742:	4b0d      	ldr	r3, [pc, #52]	@ (8004778 <HAL_DMA_Abort+0x2b8>)
 8004744:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004746:	f022 021e 	bic.w	r2, r2, #30
 800474a:	671a      	str	r2, [r3, #112]	@ 0x70
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800474c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004750:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004754:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004758:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004760:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004762:	e72e      	b.n	80045c2 <HAL_DMA_Abort+0x102>
 8004764:	40020010 	.word	0x40020010
 8004768:	58025408 	.word	0x58025408
 800476c:	5802541c 	.word	0x5802541c
 8004770:	58025430 	.word	0x58025430
 8004774:	58025494 	.word	0x58025494
 8004778:	40020000 	.word	0x40020000
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800477c:	4b27      	ldr	r3, [pc, #156]	@ (800481c <HAL_DMA_Abort+0x35c>)
 800477e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004782:	f022 021e 	bic.w	r2, r2, #30
 8004786:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800478a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	@ 0xb4
 800478e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004792:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004796:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800479e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80047a0:	e70f      	b.n	80045c2 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80047a2:	4b1e      	ldr	r3, [pc, #120]	@ (800481c <HAL_DMA_Abort+0x35c>)
 80047a4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80047a8:	f022 021e 	bic.w	r2, r2, #30
 80047ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047b0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 80047b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047b8:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047bc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80047be:	6813      	ldr	r3, [r2, #0]
 80047c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047c4:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80047c6:	e6fc      	b.n	80045c2 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80047c8:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <HAL_DMA_Abort+0x360>)
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	f022 021e 	bic.w	r2, r2, #30
 80047d0:	611a      	str	r2, [r3, #16]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047d8:	625a      	str	r2, [r3, #36]	@ 0x24
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047da:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80047dc:	6813      	ldr	r3, [r2, #0]
 80047de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80047e4:	e6ed      	b.n	80045c2 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80047e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004820 <HAL_DMA_Abort+0x360>)
 80047e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047ea:	f022 021e 	bic.w	r2, r2, #30
 80047ee:	629a      	str	r2, [r3, #40]	@ 0x28
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047f6:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80047f8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004800:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004802:	e6de      	b.n	80045c2 <HAL_DMA_Abort+0x102>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004804:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_DMA_Abort+0x360>)
 8004806:	e763      	b.n	80046d0 <HAL_DMA_Abort+0x210>
 8004808:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <HAL_DMA_Abort+0x360>)
 800480a:	e78c      	b.n	8004726 <HAL_DMA_Abort+0x266>
 800480c:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <HAL_DMA_Abort+0x360>)
 800480e:	e799      	b.n	8004744 <HAL_DMA_Abort+0x284>
 8004810:	4b03      	ldr	r3, [pc, #12]	@ (8004820 <HAL_DMA_Abort+0x360>)
 8004812:	e775      	b.n	8004700 <HAL_DMA_Abort+0x240>
 8004814:	4b02      	ldr	r3, [pc, #8]	@ (8004820 <HAL_DMA_Abort+0x360>)
 8004816:	e7c5      	b.n	80047a4 <HAL_DMA_Abort+0x2e4>
 8004818:	4b01      	ldr	r3, [pc, #4]	@ (8004820 <HAL_DMA_Abort+0x360>)
 800481a:	e7b0      	b.n	800477e <HAL_DMA_Abort+0x2be>
 800481c:	40020000 	.word	0x40020000
 8004820:	40020400 	.word	0x40020400

08004824 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004824:	2800      	cmp	r0, #0
 8004826:	f000 8096 	beq.w	8004956 <HAL_DMA_Abort_IT+0x132>
{
 800482a:	b538      	push	{r3, r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8004830:	2b02      	cmp	r3, #2
 8004832:	f040 8083 	bne.w	800493c <HAL_DMA_Abort_IT+0x118>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004836:	6803      	ldr	r3, [r0, #0]
 8004838:	4a48      	ldr	r2, [pc, #288]	@ (800495c <HAL_DMA_Abort_IT+0x138>)
 800483a:	4293      	cmp	r3, r2
 800483c:	f000 8082 	beq.w	8004944 <HAL_DMA_Abort_IT+0x120>
 8004840:	3218      	adds	r2, #24
 8004842:	4293      	cmp	r3, r2
 8004844:	d07e      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004846:	3218      	adds	r2, #24
 8004848:	4293      	cmp	r3, r2
 800484a:	d07b      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 800484c:	3218      	adds	r2, #24
 800484e:	4293      	cmp	r3, r2
 8004850:	d078      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004852:	3218      	adds	r2, #24
 8004854:	4293      	cmp	r3, r2
 8004856:	d075      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004858:	3218      	adds	r2, #24
 800485a:	4293      	cmp	r3, r2
 800485c:	d072      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 800485e:	3218      	adds	r2, #24
 8004860:	4293      	cmp	r3, r2
 8004862:	d06f      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004864:	3218      	adds	r2, #24
 8004866:	4293      	cmp	r3, r2
 8004868:	d06c      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 800486a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800486e:	4293      	cmp	r3, r2
 8004870:	d068      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004872:	3218      	adds	r2, #24
 8004874:	4293      	cmp	r3, r2
 8004876:	d065      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004878:	3218      	adds	r2, #24
 800487a:	4293      	cmp	r3, r2
 800487c:	d062      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 800487e:	3218      	adds	r2, #24
 8004880:	4293      	cmp	r3, r2
 8004882:	d05f      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004884:	3218      	adds	r2, #24
 8004886:	4293      	cmp	r3, r2
 8004888:	d05c      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 800488a:	3218      	adds	r2, #24
 800488c:	4293      	cmp	r3, r2
 800488e:	d059      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004890:	3218      	adds	r2, #24
 8004892:	4293      	cmp	r3, r2
 8004894:	d056      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
 8004896:	3218      	adds	r2, #24
 8004898:	4293      	cmp	r3, r2
 800489a:	d053      	beq.n	8004944 <HAL_DMA_Abort_IT+0x120>
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800489c:	4a30      	ldr	r2, [pc, #192]	@ (8004960 <HAL_DMA_Abort_IT+0x13c>)
 800489e:	4d31      	ldr	r5, [pc, #196]	@ (8004964 <HAL_DMA_Abort_IT+0x140>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048a0:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	bf18      	it	ne
 80048a6:	4293      	cmpne	r3, r2
 80048a8:	4c2f      	ldr	r4, [pc, #188]	@ (8004968 <HAL_DMA_Abort_IT+0x144>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048aa:	f021 010e 	bic.w	r1, r1, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ae:	f105 053c 	add.w	r5, r5, #60	@ 0x3c
 80048b2:	bf0c      	ite	eq
 80048b4:	2201      	moveq	r2, #1
 80048b6:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80048b8:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048ba:	42a3      	cmp	r3, r4
 80048bc:	bf08      	it	eq
 80048be:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80048c2:	6819      	ldr	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048c4:	3428      	adds	r4, #40	@ 0x28
 80048c6:	42ab      	cmp	r3, r5
 80048c8:	bf08      	it	eq
 80048ca:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
 80048ce:	f021 0101 	bic.w	r1, r1, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	bf08      	it	eq
 80048d6:	f042 0201 	orreq.w	r2, r2, #1
 80048da:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
 80048dc:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048de:	42a3      	cmp	r3, r4
 80048e0:	bf08      	it	eq
 80048e2:	f042 0201 	orreq.w	r2, r2, #1
 80048e6:	4921      	ldr	r1, [pc, #132]	@ (800496c <HAL_DMA_Abort_IT+0x148>)
 80048e8:	428b      	cmp	r3, r1
 80048ea:	bf08      	it	eq
 80048ec:	f042 0201 	orreq.w	r2, r2, #1
 80048f0:	b912      	cbnz	r2, 80048f8 <HAL_DMA_Abort_IT+0xd4>
 80048f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004970 <HAL_DMA_Abort_IT+0x14c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d117      	bne.n	8004928 <HAL_DMA_Abort_IT+0x104>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048f8:	2301      	movs	r3, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80048fa:	6d84      	ldr	r4, [r0, #88]	@ 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80048fc:	e9d0 1517 	ldrd	r1, r5, [r0, #92]	@ 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004900:	682a      	ldr	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004902:	f001 011f 	and.w	r1, r1, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004906:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800490a:	408b      	lsls	r3, r1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800490c:	602a      	str	r2, [r5, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800490e:	6063      	str	r3, [r4, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004910:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004912:	e9d0 2119 	ldrd	r2, r1, [r0, #100]	@ 0x64
 8004916:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004918:	b133      	cbz	r3, 8004928 <HAL_DMA_Abort_IT+0x104>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800491a:	681a      	ldr	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800491c:	e9d0 141c 	ldrd	r1, r4, [r0, #112]	@ 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004924:	601a      	str	r2, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004926:	604c      	str	r4, [r1, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004928:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 800492a:	2200      	movs	r2, #0
      if(hdma->XferAbortCallback != NULL)
 800492c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800492e:	f880 1035 	strb.w	r1, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8004932:	f880 2034 	strb.w	r2, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8004936:	b163      	cbz	r3, 8004952 <HAL_DMA_Abort_IT+0x12e>
        hdma->XferAbortCallback(hdma);
 8004938:	4798      	blx	r3
 800493a:	e00a      	b.n	8004952 <HAL_DMA_Abort_IT+0x12e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800493c:	2380      	movs	r3, #128	@ 0x80
 800493e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8004940:	2001      	movs	r0, #1
}
 8004942:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_ABORT;
 8004944:	2204      	movs	r2, #4
 8004946:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f022 0201 	bic.w	r2, r2, #1
 8004950:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004952:	2000      	movs	r0, #0
}
 8004954:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004956:	2001      	movs	r0, #1
}
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	40020010 	.word	0x40020010
 8004960:	5802541c 	.word	0x5802541c
 8004964:	58025408 	.word	0x58025408
 8004968:	58025430 	.word	0x58025430
 800496c:	58025480 	.word	0x58025480
 8004970:	58025494 	.word	0x58025494

08004974 <HAL_DMA_IRQHandler>:
{
 8004974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8004978:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800497a:	4b46      	ldr	r3, [pc, #280]	@ (8004a94 <HAL_DMA_IRQHandler+0x120>)
{
 800497c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800497e:	6d84      	ldr	r4, [r0, #88]	@ 0x58
{
 8004980:	4606      	mov	r6, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8004982:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0U;
 8004984:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004986:	6803      	ldr	r3, [r0, #0]
 8004988:	4a43      	ldr	r2, [pc, #268]	@ (8004a98 <HAL_DMA_IRQHandler+0x124>)
 800498a:	4844      	ldr	r0, [pc, #272]	@ (8004a9c <HAL_DMA_IRQHandler+0x128>)
  tmpisr_dma  = regs_dma->ISR;
 800498c:	6827      	ldr	r7, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800498e:	4293      	cmp	r3, r2
 8004990:	bf18      	it	ne
 8004992:	4283      	cmpne	r3, r0
  tmpisr_bdma = regs_bdma->ISR;
 8004994:	6821      	ldr	r1, [r4, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004996:	bf0c      	ite	eq
 8004998:	2001      	moveq	r0, #1
 800499a:	2000      	movne	r0, #0
 800499c:	f000 8086 	beq.w	8004aac <HAL_DMA_IRQHandler+0x138>
 80049a0:	3218      	adds	r2, #24
 80049a2:	4293      	cmp	r3, r2
 80049a4:	f000 827c 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x52c>
 80049a8:	3218      	adds	r2, #24
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f000 8278 	beq.w	8004ea0 <HAL_DMA_IRQHandler+0x52c>
 80049b0:	3218      	adds	r2, #24
 80049b2:	4293      	cmp	r3, r2
 80049b4:	f000 8285 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049b8:	3218      	adds	r2, #24
 80049ba:	4293      	cmp	r3, r2
 80049bc:	f000 8281 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049c0:	3218      	adds	r2, #24
 80049c2:	4293      	cmp	r3, r2
 80049c4:	f000 827d 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049c8:	3218      	adds	r2, #24
 80049ca:	4293      	cmp	r3, r2
 80049cc:	f000 8279 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049d0:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80049d4:	4293      	cmp	r3, r2
 80049d6:	f000 8274 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049da:	3218      	adds	r2, #24
 80049dc:	4293      	cmp	r3, r2
 80049de:	f000 8270 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049e2:	3218      	adds	r2, #24
 80049e4:	4293      	cmp	r3, r2
 80049e6:	f000 826c 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049ea:	3218      	adds	r2, #24
 80049ec:	4293      	cmp	r3, r2
 80049ee:	f000 8268 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049f2:	3218      	adds	r2, #24
 80049f4:	4293      	cmp	r3, r2
 80049f6:	f000 8264 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 80049fa:	3218      	adds	r2, #24
 80049fc:	4293      	cmp	r3, r2
 80049fe:	f000 8260 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 8004a02:	3218      	adds	r2, #24
 8004a04:	4293      	cmp	r3, r2
 8004a06:	f000 825c 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
 8004a0a:	3218      	adds	r2, #24
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	f000 8258 	beq.w	8004ec2 <HAL_DMA_IRQHandler+0x54e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004a12:	4a23      	ldr	r2, [pc, #140]	@ (8004aa0 <HAL_DMA_IRQHandler+0x12c>)
 8004a14:	4823      	ldr	r0, [pc, #140]	@ (8004aa4 <HAL_DMA_IRQHandler+0x130>)
 8004a16:	4283      	cmp	r3, r0
 8004a18:	bf18      	it	ne
 8004a1a:	4293      	cmpne	r3, r2
 8004a1c:	f100 0014 	add.w	r0, r0, #20
 8004a20:	bf0c      	ite	eq
 8004a22:	2201      	moveq	r2, #1
 8004a24:	2200      	movne	r2, #0
 8004a26:	4283      	cmp	r3, r0
 8004a28:	bf08      	it	eq
 8004a2a:	f042 0201 	orreq.w	r2, r2, #1
 8004a2e:	3014      	adds	r0, #20
 8004a30:	4283      	cmp	r3, r0
 8004a32:	bf08      	it	eq
 8004a34:	f042 0201 	orreq.w	r2, r2, #1
 8004a38:	3014      	adds	r0, #20
 8004a3a:	4283      	cmp	r3, r0
 8004a3c:	bf08      	it	eq
 8004a3e:	f042 0201 	orreq.w	r2, r2, #1
 8004a42:	3014      	adds	r0, #20
 8004a44:	4283      	cmp	r3, r0
 8004a46:	bf08      	it	eq
 8004a48:	f042 0201 	orreq.w	r2, r2, #1
 8004a4c:	3014      	adds	r0, #20
 8004a4e:	4283      	cmp	r3, r0
 8004a50:	bf08      	it	eq
 8004a52:	f042 0201 	orreq.w	r2, r2, #1
 8004a56:	b912      	cbnz	r2, 8004a5e <HAL_DMA_IRQHandler+0xea>
 8004a58:	4a13      	ldr	r2, [pc, #76]	@ (8004aa8 <HAL_DMA_IRQHandler+0x134>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d116      	bne.n	8004a8c <HAL_DMA_IRQHandler+0x118>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a5e:	6df0      	ldr	r0, [r6, #92]	@ 0x5c
 8004a60:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a62:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a64:	f000 001f 	and.w	r0, r0, #31
 8004a68:	4085      	lsls	r5, r0
 8004a6a:	420d      	tst	r5, r1
 8004a6c:	f000 8283 	beq.w	8004f76 <HAL_DMA_IRQHandler+0x602>
 8004a70:	0757      	lsls	r7, r2, #29
 8004a72:	f140 8280 	bpl.w	8004f76 <HAL_DMA_IRQHandler+0x602>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a76:	0410      	lsls	r0, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a78:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a7a:	f140 82af 	bpl.w	8004fdc <HAL_DMA_IRQHandler+0x668>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a7e:	03d1      	lsls	r1, r2, #15
 8004a80:	f100 82b2 	bmi.w	8004fe8 <HAL_DMA_IRQHandler+0x674>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a84:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 81f4 	bne.w	8004e74 <HAL_DMA_IRQHandler+0x500>
}
 8004a8c:	b002      	add	sp, #8
 8004a8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a92:	bf00      	nop
 8004a94:	24002068 	.word	0x24002068
 8004a98:	40020028 	.word	0x40020028
 8004a9c:	40020010 	.word	0x40020010
 8004aa0:	58025408 	.word	0x58025408
 8004aa4:	5802541c 	.word	0x5802541c
 8004aa8:	58025494 	.word	0x58025494
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004aac:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8004ab0:	f04f 0c08 	mov.w	ip, #8
 8004ab4:	f00e 021f 	and.w	r2, lr, #31
 8004ab8:	fa0c f102 	lsl.w	r1, ip, r2
 8004abc:	420f      	tst	r7, r1
 8004abe:	f000 81de 	beq.w	8004e7e <HAL_DMA_IRQHandler+0x50a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ac2:	f8d3 c000 	ldr.w	ip, [r3]
 8004ac6:	f01c 0f04 	tst.w	ip, #4
 8004aca:	d00a      	beq.n	8004ae2 <HAL_DMA_IRQHandler+0x16e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004acc:	f8d3 c000 	ldr.w	ip, [r3]
 8004ad0:	f02c 0c04 	bic.w	ip, ip, #4
 8004ad4:	f8c3 c000 	str.w	ip, [r3]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ad8:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ada:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8004adc:	f041 0101 	orr.w	r1, r1, #1
 8004ae0:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ae2:	fa27 f102 	lsr.w	r1, r7, r2
 8004ae6:	07c9      	lsls	r1, r1, #31
 8004ae8:	d55b      	bpl.n	8004ba2 <HAL_DMA_IRQHandler+0x22e>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004aea:	2800      	cmp	r0, #0
 8004aec:	d14f      	bne.n	8004b8e <HAL_DMA_IRQHandler+0x21a>
 8004aee:	49a2      	ldr	r1, [pc, #648]	@ (8004d78 <HAL_DMA_IRQHandler+0x404>)
 8004af0:	f8df c298 	ldr.w	ip, [pc, #664]	@ 8004d8c <HAL_DMA_IRQHandler+0x418>
 8004af4:	4563      	cmp	r3, ip
 8004af6:	bf18      	it	ne
 8004af8:	428b      	cmpne	r3, r1
 8004afa:	f10c 0c18 	add.w	ip, ip, #24
 8004afe:	bf0c      	ite	eq
 8004b00:	2101      	moveq	r1, #1
 8004b02:	2100      	movne	r1, #0
 8004b04:	4563      	cmp	r3, ip
 8004b06:	bf08      	it	eq
 8004b08:	f041 0101 	orreq.w	r1, r1, #1
 8004b0c:	f10c 0c18 	add.w	ip, ip, #24
 8004b10:	4563      	cmp	r3, ip
 8004b12:	bf08      	it	eq
 8004b14:	f041 0101 	orreq.w	r1, r1, #1
 8004b18:	f10c 0c18 	add.w	ip, ip, #24
 8004b1c:	4563      	cmp	r3, ip
 8004b1e:	bf08      	it	eq
 8004b20:	f041 0101 	orreq.w	r1, r1, #1
 8004b24:	f10c 0c18 	add.w	ip, ip, #24
 8004b28:	4563      	cmp	r3, ip
 8004b2a:	bf08      	it	eq
 8004b2c:	f041 0101 	orreq.w	r1, r1, #1
 8004b30:	f50c 7c56 	add.w	ip, ip, #856	@ 0x358
 8004b34:	4563      	cmp	r3, ip
 8004b36:	bf08      	it	eq
 8004b38:	f041 0101 	orreq.w	r1, r1, #1
 8004b3c:	f10c 0c18 	add.w	ip, ip, #24
 8004b40:	4563      	cmp	r3, ip
 8004b42:	bf08      	it	eq
 8004b44:	f041 0101 	orreq.w	r1, r1, #1
 8004b48:	f10c 0c18 	add.w	ip, ip, #24
 8004b4c:	4563      	cmp	r3, ip
 8004b4e:	bf08      	it	eq
 8004b50:	f041 0101 	orreq.w	r1, r1, #1
 8004b54:	f10c 0c18 	add.w	ip, ip, #24
 8004b58:	4563      	cmp	r3, ip
 8004b5a:	bf08      	it	eq
 8004b5c:	f041 0101 	orreq.w	r1, r1, #1
 8004b60:	f10c 0c18 	add.w	ip, ip, #24
 8004b64:	4563      	cmp	r3, ip
 8004b66:	bf08      	it	eq
 8004b68:	f041 0101 	orreq.w	r1, r1, #1
 8004b6c:	f10c 0c18 	add.w	ip, ip, #24
 8004b70:	4563      	cmp	r3, ip
 8004b72:	bf08      	it	eq
 8004b74:	f041 0101 	orreq.w	r1, r1, #1
 8004b78:	f10c 0c18 	add.w	ip, ip, #24
 8004b7c:	4563      	cmp	r3, ip
 8004b7e:	bf08      	it	eq
 8004b80:	f041 0101 	orreq.w	r1, r1, #1
 8004b84:	b919      	cbnz	r1, 8004b8e <HAL_DMA_IRQHandler+0x21a>
 8004b86:	497d      	ldr	r1, [pc, #500]	@ (8004d7c <HAL_DMA_IRQHandler+0x408>)
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	f040 81e3 	bne.w	8004f54 <HAL_DMA_IRQHandler+0x5e0>
 8004b8e:	6959      	ldr	r1, [r3, #20]
 8004b90:	0609      	lsls	r1, r1, #24
 8004b92:	d506      	bpl.n	8004ba2 <HAL_DMA_IRQHandler+0x22e>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b94:	2101      	movs	r1, #1
 8004b96:	4091      	lsls	r1, r2
 8004b98:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b9a:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8004b9c:	f041 0102 	orr.w	r1, r1, #2
 8004ba0:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ba2:	2104      	movs	r1, #4
 8004ba4:	4091      	lsls	r1, r2
 8004ba6:	4239      	tst	r1, r7
 8004ba8:	d05f      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x2f6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004baa:	f8df c1cc 	ldr.w	ip, [pc, #460]	@ 8004d78 <HAL_DMA_IRQHandler+0x404>
 8004bae:	4563      	cmp	r3, ip
 8004bb0:	d051      	beq.n	8004c56 <HAL_DMA_IRQHandler+0x2e2>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d14f      	bne.n	8004c56 <HAL_DMA_IRQHandler+0x2e2>
 8004bb6:	f10c 0c30 	add.w	ip, ip, #48	@ 0x30
 8004bba:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 8004d8c <HAL_DMA_IRQHandler+0x418>
 8004bbe:	4543      	cmp	r3, r8
 8004bc0:	bf18      	it	ne
 8004bc2:	4563      	cmpne	r3, ip
 8004bc4:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8004bc8:	bf0c      	ite	eq
 8004bca:	f04f 0c01 	moveq.w	ip, #1
 8004bce:	f04f 0c00 	movne.w	ip, #0
 8004bd2:	4543      	cmp	r3, r8
 8004bd4:	bf08      	it	eq
 8004bd6:	f04c 0c01 	orreq.w	ip, ip, #1
 8004bda:	f108 0818 	add.w	r8, r8, #24
 8004bde:	4543      	cmp	r3, r8
 8004be0:	bf08      	it	eq
 8004be2:	f04c 0c01 	orreq.w	ip, ip, #1
 8004be6:	f108 0818 	add.w	r8, r8, #24
 8004bea:	4543      	cmp	r3, r8
 8004bec:	bf08      	it	eq
 8004bee:	f04c 0c01 	orreq.w	ip, ip, #1
 8004bf2:	f508 7856 	add.w	r8, r8, #856	@ 0x358
 8004bf6:	4543      	cmp	r3, r8
 8004bf8:	bf08      	it	eq
 8004bfa:	f04c 0c01 	orreq.w	ip, ip, #1
 8004bfe:	f108 0818 	add.w	r8, r8, #24
 8004c02:	4543      	cmp	r3, r8
 8004c04:	bf08      	it	eq
 8004c06:	f04c 0c01 	orreq.w	ip, ip, #1
 8004c0a:	f108 0818 	add.w	r8, r8, #24
 8004c0e:	4543      	cmp	r3, r8
 8004c10:	bf08      	it	eq
 8004c12:	f04c 0c01 	orreq.w	ip, ip, #1
 8004c16:	f108 0818 	add.w	r8, r8, #24
 8004c1a:	4543      	cmp	r3, r8
 8004c1c:	bf08      	it	eq
 8004c1e:	f04c 0c01 	orreq.w	ip, ip, #1
 8004c22:	f108 0818 	add.w	r8, r8, #24
 8004c26:	4543      	cmp	r3, r8
 8004c28:	bf08      	it	eq
 8004c2a:	f04c 0c01 	orreq.w	ip, ip, #1
 8004c2e:	f108 0818 	add.w	r8, r8, #24
 8004c32:	4543      	cmp	r3, r8
 8004c34:	bf08      	it	eq
 8004c36:	f04c 0c01 	orreq.w	ip, ip, #1
 8004c3a:	f108 0818 	add.w	r8, r8, #24
 8004c3e:	4543      	cmp	r3, r8
 8004c40:	bf08      	it	eq
 8004c42:	f04c 0c01 	orreq.w	ip, ip, #1
 8004c46:	f1bc 0f00 	cmp.w	ip, #0
 8004c4a:	d104      	bne.n	8004c56 <HAL_DMA_IRQHandler+0x2e2>
 8004c4c:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8004d7c <HAL_DMA_IRQHandler+0x408>
 8004c50:	4563      	cmp	r3, ip
 8004c52:	f040 8185 	bne.w	8004f60 <HAL_DMA_IRQHandler+0x5ec>
 8004c56:	f8d3 c000 	ldr.w	ip, [r3]
 8004c5a:	f01c 0f02 	tst.w	ip, #2
 8004c5e:	d004      	beq.n	8004c6a <HAL_DMA_IRQHandler+0x2f6>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c60:	60a1      	str	r1, [r4, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c62:	6d71      	ldr	r1, [r6, #84]	@ 0x54
 8004c64:	f041 0104 	orr.w	r1, r1, #4
 8004c68:	6571      	str	r1, [r6, #84]	@ 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c6a:	2110      	movs	r1, #16
 8004c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c70:	423a      	tst	r2, r7
 8004c72:	d05b      	beq.n	8004d2c <HAL_DMA_IRQHandler+0x3b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c74:	4940      	ldr	r1, [pc, #256]	@ (8004d78 <HAL_DMA_IRQHandler+0x404>)
 8004c76:	428b      	cmp	r3, r1
 8004c78:	d042      	beq.n	8004d00 <HAL_DMA_IRQHandler+0x38c>
 8004c7a:	2800      	cmp	r0, #0
 8004c7c:	d140      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x38c>
 8004c7e:	3118      	adds	r1, #24
 8004c80:	483f      	ldr	r0, [pc, #252]	@ (8004d80 <HAL_DMA_IRQHandler+0x40c>)
 8004c82:	4283      	cmp	r3, r0
 8004c84:	bf18      	it	ne
 8004c86:	428b      	cmpne	r3, r1
 8004c88:	f100 0018 	add.w	r0, r0, #24
 8004c8c:	bf0c      	ite	eq
 8004c8e:	2101      	moveq	r1, #1
 8004c90:	2100      	movne	r1, #0
 8004c92:	4283      	cmp	r3, r0
 8004c94:	bf08      	it	eq
 8004c96:	f041 0101 	orreq.w	r1, r1, #1
 8004c9a:	3018      	adds	r0, #24
 8004c9c:	4283      	cmp	r3, r0
 8004c9e:	bf08      	it	eq
 8004ca0:	f041 0101 	orreq.w	r1, r1, #1
 8004ca4:	3018      	adds	r0, #24
 8004ca6:	4283      	cmp	r3, r0
 8004ca8:	bf08      	it	eq
 8004caa:	f041 0101 	orreq.w	r1, r1, #1
 8004cae:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8004cb2:	4283      	cmp	r3, r0
 8004cb4:	bf08      	it	eq
 8004cb6:	f041 0101 	orreq.w	r1, r1, #1
 8004cba:	3018      	adds	r0, #24
 8004cbc:	4283      	cmp	r3, r0
 8004cbe:	bf08      	it	eq
 8004cc0:	f041 0101 	orreq.w	r1, r1, #1
 8004cc4:	3018      	adds	r0, #24
 8004cc6:	4283      	cmp	r3, r0
 8004cc8:	bf08      	it	eq
 8004cca:	f041 0101 	orreq.w	r1, r1, #1
 8004cce:	3018      	adds	r0, #24
 8004cd0:	4283      	cmp	r3, r0
 8004cd2:	bf08      	it	eq
 8004cd4:	f041 0101 	orreq.w	r1, r1, #1
 8004cd8:	3018      	adds	r0, #24
 8004cda:	4283      	cmp	r3, r0
 8004cdc:	bf08      	it	eq
 8004cde:	f041 0101 	orreq.w	r1, r1, #1
 8004ce2:	3018      	adds	r0, #24
 8004ce4:	4283      	cmp	r3, r0
 8004ce6:	bf08      	it	eq
 8004ce8:	f041 0101 	orreq.w	r1, r1, #1
 8004cec:	3018      	adds	r0, #24
 8004cee:	4283      	cmp	r3, r0
 8004cf0:	bf08      	it	eq
 8004cf2:	f041 0101 	orreq.w	r1, r1, #1
 8004cf6:	b919      	cbnz	r1, 8004d00 <HAL_DMA_IRQHandler+0x38c>
 8004cf8:	4920      	ldr	r1, [pc, #128]	@ (8004d7c <HAL_DMA_IRQHandler+0x408>)
 8004cfa:	428b      	cmp	r3, r1
 8004cfc:	f040 8137 	bne.w	8004f6e <HAL_DMA_IRQHandler+0x5fa>
 8004d00:	6819      	ldr	r1, [r3, #0]
 8004d02:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8004d06:	b189      	cbz	r1, 8004d2c <HAL_DMA_IRQHandler+0x3b8>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d08:	60a2      	str	r2, [r4, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	0350      	lsls	r0, r2, #13
 8004d0e:	f100 80e7 	bmi.w	8004ee0 <HAL_DMA_IRQHandler+0x56c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	05d2      	lsls	r2, r2, #23
 8004d16:	d403      	bmi.n	8004d20 <HAL_DMA_IRQHandler+0x3ac>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	f022 0208 	bic.w	r2, r2, #8
 8004d1e:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8004d20:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8004d22:	b11b      	cbz	r3, 8004d2c <HAL_DMA_IRQHandler+0x3b8>
            hdma->XferHalfCpltCallback(hdma);
 8004d24:	4630      	mov	r0, r6
 8004d26:	4798      	blx	r3
 8004d28:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d2c:	f00e 011f 	and.w	r1, lr, #31
 8004d30:	2020      	movs	r0, #32
 8004d32:	4088      	lsls	r0, r1
 8004d34:	4238      	tst	r0, r7
 8004d36:	d073      	beq.n	8004e20 <HAL_DMA_IRQHandler+0x4ac>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004d38:	6832      	ldr	r2, [r6, #0]
 8004d3a:	4b12      	ldr	r3, [pc, #72]	@ (8004d84 <HAL_DMA_IRQHandler+0x410>)
 8004d3c:	4f12      	ldr	r7, [pc, #72]	@ (8004d88 <HAL_DMA_IRQHandler+0x414>)
 8004d3e:	42ba      	cmp	r2, r7
 8004d40:	bf18      	it	ne
 8004d42:	429a      	cmpne	r2, r3
 8004d44:	f107 0718 	add.w	r7, r7, #24
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	42ba      	cmp	r2, r7
 8004d50:	bf08      	it	eq
 8004d52:	f043 0301 	orreq.w	r3, r3, #1
 8004d56:	3718      	adds	r7, #24
 8004d58:	42ba      	cmp	r2, r7
 8004d5a:	bf08      	it	eq
 8004d5c:	f043 0301 	orreq.w	r3, r3, #1
 8004d60:	3718      	adds	r7, #24
 8004d62:	42ba      	cmp	r2, r7
 8004d64:	bf08      	it	eq
 8004d66:	f043 0301 	orreq.w	r3, r3, #1
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	42ba      	cmp	r2, r7
 8004d6e:	bf08      	it	eq
 8004d70:	f043 0301 	orreq.w	r3, r3, #1
 8004d74:	3718      	adds	r7, #24
 8004d76:	e00b      	b.n	8004d90 <HAL_DMA_IRQHandler+0x41c>
 8004d78:	40020040 	.word	0x40020040
 8004d7c:	400204b8 	.word	0x400204b8
 8004d80:	40020070 	.word	0x40020070
 8004d84:	40020010 	.word	0x40020010
 8004d88:	40020028 	.word	0x40020028
 8004d8c:	40020058 	.word	0x40020058
 8004d90:	42ba      	cmp	r2, r7
 8004d92:	bf08      	it	eq
 8004d94:	f043 0301 	orreq.w	r3, r3, #1
 8004d98:	3718      	adds	r7, #24
 8004d9a:	42ba      	cmp	r2, r7
 8004d9c:	bf08      	it	eq
 8004d9e:	f043 0301 	orreq.w	r3, r3, #1
 8004da2:	f507 7756 	add.w	r7, r7, #856	@ 0x358
 8004da6:	42ba      	cmp	r2, r7
 8004da8:	bf08      	it	eq
 8004daa:	f043 0301 	orreq.w	r3, r3, #1
 8004dae:	3718      	adds	r7, #24
 8004db0:	42ba      	cmp	r2, r7
 8004db2:	bf08      	it	eq
 8004db4:	f043 0301 	orreq.w	r3, r3, #1
 8004db8:	3718      	adds	r7, #24
 8004dba:	42ba      	cmp	r2, r7
 8004dbc:	bf08      	it	eq
 8004dbe:	f043 0301 	orreq.w	r3, r3, #1
 8004dc2:	3718      	adds	r7, #24
 8004dc4:	42ba      	cmp	r2, r7
 8004dc6:	bf08      	it	eq
 8004dc8:	f043 0301 	orreq.w	r3, r3, #1
 8004dcc:	3718      	adds	r7, #24
 8004dce:	42ba      	cmp	r2, r7
 8004dd0:	bf08      	it	eq
 8004dd2:	f043 0301 	orreq.w	r3, r3, #1
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	42ba      	cmp	r2, r7
 8004dda:	bf08      	it	eq
 8004ddc:	f043 0301 	orreq.w	r3, r3, #1
 8004de0:	3718      	adds	r7, #24
 8004de2:	42ba      	cmp	r2, r7
 8004de4:	bf08      	it	eq
 8004de6:	f043 0301 	orreq.w	r3, r3, #1
 8004dea:	b91b      	cbnz	r3, 8004df4 <HAL_DMA_IRQHandler+0x480>
 8004dec:	4b89      	ldr	r3, [pc, #548]	@ (8005014 <HAL_DMA_IRQHandler+0x6a0>)
 8004dee:	429a      	cmp	r2, r3
 8004df0:	f040 80d1 	bne.w	8004f96 <HAL_DMA_IRQHandler+0x622>
 8004df4:	6813      	ldr	r3, [r2, #0]
 8004df6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004dfa:	b18b      	cbz	r3, 8004e20 <HAL_DMA_IRQHandler+0x4ac>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dfc:	60a0      	str	r0, [r4, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dfe:	f896 3035 	ldrb.w	r3, [r6, #53]	@ 0x35
 8004e02:	2b04      	cmp	r3, #4
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e04:	6813      	ldr	r3, [r2, #0]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e06:	d074      	beq.n	8004ef2 <HAL_DMA_IRQHandler+0x57e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e08:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e0c:	6813      	ldr	r3, [r2, #0]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e0e:	f000 808a 	beq.w	8004f26 <HAL_DMA_IRQHandler+0x5b2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e12:	031f      	lsls	r7, r3, #12
 8004e14:	f140 8095 	bpl.w	8004f42 <HAL_DMA_IRQHandler+0x5ce>
          if(hdma->XferCpltCallback != NULL)
 8004e18:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 8004e1a:	b10b      	cbz	r3, 8004e20 <HAL_DMA_IRQHandler+0x4ac>
            hdma->XferCpltCallback(hdma);
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e20:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f43f ae32 	beq.w	8004a8c <HAL_DMA_IRQHandler+0x118>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e28:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8004e2a:	07dc      	lsls	r4, r3, #31
 8004e2c:	d51e      	bpl.n	8004e6c <HAL_DMA_IRQHandler+0x4f8>
        __HAL_DMA_DISABLE(hdma);
 8004e2e:	6832      	ldr	r2, [r6, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e30:	2104      	movs	r1, #4
 8004e32:	f886 1035 	strb.w	r1, [r6, #53]	@ 0x35
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e36:	4978      	ldr	r1, [pc, #480]	@ (8005018 <HAL_DMA_IRQHandler+0x6a4>)
        __HAL_DMA_DISABLE(hdma);
 8004e38:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e3a:	fba1 5105 	umull	r5, r1, r1, r5
        __HAL_DMA_DISABLE(hdma);
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e42:	0a89      	lsrs	r1, r1, #10
        __HAL_DMA_DISABLE(hdma);
 8004e44:	6013      	str	r3, [r2, #0]
 8004e46:	e002      	b.n	8004e4e <HAL_DMA_IRQHandler+0x4da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004e48:	6813      	ldr	r3, [r2, #0]
 8004e4a:	07d8      	lsls	r0, r3, #31
 8004e4c:	d504      	bpl.n	8004e58 <HAL_DMA_IRQHandler+0x4e4>
          if (++count > timeout)
 8004e4e:	9b01      	ldr	r3, [sp, #4]
 8004e50:	3301      	adds	r3, #1
 8004e52:	428b      	cmp	r3, r1
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	d9f7      	bls.n	8004e48 <HAL_DMA_IRQHandler+0x4d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e58:	6813      	ldr	r3, [r2, #0]
 8004e5a:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8004e5c:	bf4c      	ite	mi
 8004e5e:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8004e60:	2301      	movpl	r3, #1
 8004e62:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8004e66:	2300      	movs	r3, #0
 8004e68:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
      if(hdma->XferErrorCallback != NULL)
 8004e6c:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f43f ae0c 	beq.w	8004a8c <HAL_DMA_IRQHandler+0x118>
          hdma->XferCpltCallback(hdma);
 8004e74:	4630      	mov	r0, r6
}
 8004e76:	b002      	add	sp, #8
 8004e78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferCpltCallback(hdma);
 8004e7c:	4718      	bx	r3
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e7e:	fa27 f102 	lsr.w	r1, r7, r2
 8004e82:	07c9      	lsls	r1, r1, #31
 8004e84:	f53f ae83 	bmi.w	8004b8e <HAL_DMA_IRQHandler+0x21a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e88:	2104      	movs	r1, #4
 8004e8a:	4091      	lsls	r1, r2
 8004e8c:	420f      	tst	r7, r1
 8004e8e:	f47f aee2 	bne.w	8004c56 <HAL_DMA_IRQHandler+0x2e2>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e92:	2110      	movs	r1, #16
 8004e94:	fa01 f202 	lsl.w	r2, r1, r2
 8004e98:	4217      	tst	r7, r2
 8004e9a:	f47f af31 	bne.w	8004d00 <HAL_DMA_IRQHandler+0x38c>
 8004e9e:	e745      	b.n	8004d2c <HAL_DMA_IRQHandler+0x3b8>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ea0:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8004ea4:	f04f 0c08 	mov.w	ip, #8
 8004ea8:	f00e 021f 	and.w	r2, lr, #31
 8004eac:	fa0c f102 	lsl.w	r1, ip, r2
 8004eb0:	420f      	tst	r7, r1
 8004eb2:	f47f ae06 	bne.w	8004ac2 <HAL_DMA_IRQHandler+0x14e>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eb6:	fa27 f102 	lsr.w	r1, r7, r2
 8004eba:	07c9      	lsls	r1, r1, #31
 8004ebc:	f53f ae67 	bmi.w	8004b8e <HAL_DMA_IRQHandler+0x21a>
 8004ec0:	e66f      	b.n	8004ba2 <HAL_DMA_IRQHandler+0x22e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ec2:	f8d6 e05c 	ldr.w	lr, [r6, #92]	@ 0x5c
 8004ec6:	2108      	movs	r1, #8
 8004ec8:	f00e 021f 	and.w	r2, lr, #31
 8004ecc:	4091      	lsls	r1, r2
 8004ece:	420f      	tst	r7, r1
 8004ed0:	f47f adf7 	bne.w	8004ac2 <HAL_DMA_IRQHandler+0x14e>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ed4:	fa27 f102 	lsr.w	r1, r7, r2
 8004ed8:	07c9      	lsls	r1, r1, #31
 8004eda:	f53f ae58 	bmi.w	8004b8e <HAL_DMA_IRQHandler+0x21a>
 8004ede:	e660      	b.n	8004ba2 <HAL_DMA_IRQHandler+0x22e>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	0319      	lsls	r1, r3, #12
 8004ee4:	f57f af1c 	bpl.w	8004d20 <HAL_DMA_IRQHandler+0x3ac>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ee8:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f47f af1a 	bne.w	8004d24 <HAL_DMA_IRQHandler+0x3b0>
 8004ef0:	e71c      	b.n	8004d2c <HAL_DMA_IRQHandler+0x3b8>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ef2:	f023 0316 	bic.w	r3, r3, #22
 8004ef6:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004ef8:	6953      	ldr	r3, [r2, #20]
 8004efa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004efe:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f00:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8004f02:	b31b      	cbz	r3, 8004f4c <HAL_DMA_IRQHandler+0x5d8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f04:	6813      	ldr	r3, [r2, #0]
 8004f06:	f023 0308 	bic.w	r3, r3, #8
 8004f0a:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f0c:	233f      	movs	r3, #63	@ 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8004f0e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hdma);
 8004f10:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f12:	408b      	lsls	r3, r1
 8004f14:	60a3      	str	r3, [r4, #8]
          if(hdma->XferAbortCallback != NULL)
 8004f16:	6d33      	ldr	r3, [r6, #80]	@ 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8004f18:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8004f1c:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
          if(hdma->XferAbortCallback != NULL)
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1a7      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x500>
 8004f24:	e5b2      	b.n	8004a8c <HAL_DMA_IRQHandler+0x118>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f26:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8004f2a:	f47f af75 	bne.w	8004e18 <HAL_DMA_IRQHandler+0x4a4>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004f2e:	6811      	ldr	r1, [r2, #0]
 8004f30:	f021 0110 	bic.w	r1, r1, #16
 8004f34:	6011      	str	r1, [r2, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8004f36:	2201      	movs	r2, #1
            __HAL_UNLOCK(hdma);
 8004f38:	f886 3034 	strb.w	r3, [r6, #52]	@ 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8004f3c:	f886 2035 	strb.w	r2, [r6, #53]	@ 0x35
            __HAL_UNLOCK(hdma);
 8004f40:	e76a      	b.n	8004e18 <HAL_DMA_IRQHandler+0x4a4>
            if(hdma->XferM1CpltCallback != NULL)
 8004f42:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f47f af69 	bne.w	8004e1c <HAL_DMA_IRQHandler+0x4a8>
 8004f4a:	e769      	b.n	8004e20 <HAL_DMA_IRQHandler+0x4ac>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f4c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1d8      	bne.n	8004f04 <HAL_DMA_IRQHandler+0x590>
 8004f52:	e7db      	b.n	8004f0c <HAL_DMA_IRQHandler+0x598>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004f54:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f56:	2104      	movs	r1, #4
 8004f58:	4091      	lsls	r1, r2
 8004f5a:	4239      	tst	r1, r7
 8004f5c:	f43f ae85 	beq.w	8004c6a <HAL_DMA_IRQHandler+0x2f6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f60:	6819      	ldr	r1, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f62:	2110      	movs	r1, #16
 8004f64:	fa01 f202 	lsl.w	r2, r1, r2
 8004f68:	4217      	tst	r7, r2
 8004f6a:	f43f aedf 	beq.w	8004d2c <HAL_DMA_IRQHandler+0x3b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8004f74:	e6c7      	b.n	8004d06 <HAL_DMA_IRQHandler+0x392>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f76:	2502      	movs	r5, #2
 8004f78:	4085      	lsls	r5, r0
 8004f7a:	420d      	tst	r5, r1
 8004f7c:	d00f      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x62a>
 8004f7e:	0797      	lsls	r7, r2, #30
 8004f80:	d50d      	bpl.n	8004f9e <HAL_DMA_IRQHandler+0x62a>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f82:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f84:	6065      	str	r5, [r4, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f86:	d534      	bpl.n	8004ff2 <HAL_DMA_IRQHandler+0x67e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f88:	03d7      	lsls	r7, r2, #15
 8004f8a:	d43e      	bmi.n	800500a <HAL_DMA_IRQHandler+0x696>
          if(hdma->XferM1CpltCallback != NULL)
 8004f8c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f47f af70 	bne.w	8004e74 <HAL_DMA_IRQHandler+0x500>
 8004f94:	e57a      	b.n	8004a8c <HAL_DMA_IRQHandler+0x118>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f96:	6813      	ldr	r3, [r2, #0]
 8004f98:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f9c:	e72d      	b.n	8004dfa <HAL_DMA_IRQHandler+0x486>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f9e:	2508      	movs	r5, #8
 8004fa0:	4085      	lsls	r5, r0
 8004fa2:	420d      	tst	r5, r1
 8004fa4:	f43f ad72 	beq.w	8004a8c <HAL_DMA_IRQHandler+0x118>
 8004fa8:	0715      	lsls	r5, r2, #28
 8004faa:	f57f ad6f 	bpl.w	8004a8c <HAL_DMA_IRQHandler+0x118>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fae:	681a      	ldr	r2, [r3, #0]
      __HAL_UNLOCK(hdma);
 8004fb0:	2100      	movs	r1, #0
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fb2:	f022 020e 	bic.w	r2, r2, #14
 8004fb6:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fb8:	2301      	movs	r3, #1
      if (hdma->XferErrorCallback != NULL)
 8004fba:	6cf2      	ldr	r2, [r6, #76]	@ 0x4c
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004fbc:	fa03 f000 	lsl.w	r0, r3, r0
 8004fc0:	6060      	str	r0, [r4, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004fc2:	6573      	str	r3, [r6, #84]	@ 0x54
      __HAL_UNLOCK(hdma);
 8004fc4:	f886 1034 	strb.w	r1, [r6, #52]	@ 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8004fc8:	f886 3035 	strb.w	r3, [r6, #53]	@ 0x35
      if (hdma->XferErrorCallback != NULL)
 8004fcc:	2a00      	cmp	r2, #0
 8004fce:	f43f ad5d 	beq.w	8004a8c <HAL_DMA_IRQHandler+0x118>
        hdma->XferErrorCallback(hdma);
 8004fd2:	4630      	mov	r0, r6
}
 8004fd4:	b002      	add	sp, #8
 8004fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8004fda:	4710      	bx	r2
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004fdc:	0692      	lsls	r2, r2, #26
 8004fde:	d403      	bmi.n	8004fe8 <HAL_DMA_IRQHandler+0x674>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	f022 0204 	bic.w	r2, r2, #4
 8004fe6:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8004fe8:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f47f af42 	bne.w	8004e74 <HAL_DMA_IRQHandler+0x500>
 8004ff0:	e54c      	b.n	8004a8c <HAL_DMA_IRQHandler+0x118>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004ff2:	f012 0220 	ands.w	r2, r2, #32
 8004ff6:	d108      	bne.n	800500a <HAL_DMA_IRQHandler+0x696>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ff8:	6819      	ldr	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	2001      	movs	r0, #1
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ffc:	f021 010a 	bic.w	r1, r1, #10
 8005000:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005002:	f886 0035 	strb.w	r0, [r6, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8005006:	f886 2034 	strb.w	r2, [r6, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800500a:	6bf3      	ldr	r3, [r6, #60]	@ 0x3c
 800500c:	2b00      	cmp	r3, #0
 800500e:	f47f af31 	bne.w	8004e74 <HAL_DMA_IRQHandler+0x500>
 8005012:	e53b      	b.n	8004a8c <HAL_DMA_IRQHandler+0x118>
 8005014:	400204b8 	.word	0x400204b8
 8005018:	1b4e81b5 	.word	0x1b4e81b5

0800501c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800501c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005020:	680c      	ldr	r4, [r1, #0]
{
 8005022:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005024:	2c00      	cmp	r4, #0
 8005026:	f000 80a5 	beq.w	8005174 <HAL_GPIO_Init+0x158>
  uint32_t position = 0x00U;
 800502a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800502c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005030:	f04f 4eb0 	mov.w	lr, #1476395008	@ 0x58000000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005034:	9100      	str	r1, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005036:	fa0b fc03 	lsl.w	ip, fp, r3
    if (iocurrent != 0x00U)
 800503a:	ea1c 0a04 	ands.w	sl, ip, r4
 800503e:	f000 8094 	beq.w	800516a <HAL_GPIO_Init+0x14e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005042:	9900      	ldr	r1, [sp, #0]
 8005044:	005f      	lsls	r7, r3, #1
 8005046:	684d      	ldr	r5, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005048:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800504a:	f005 0203 	and.w	r2, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800504e:	fa01 f607 	lsl.w	r6, r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005052:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005056:	43f6      	mvns	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005058:	f1b8 0f01 	cmp.w	r8, #1
 800505c:	f240 808d 	bls.w	800517a <HAL_GPIO_Init+0x15e>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005060:	2a03      	cmp	r2, #3
 8005062:	f040 80cb 	bne.w	80051fc <HAL_GPIO_Init+0x1e0>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005066:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8005068:	6807      	ldr	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800506a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800506e:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005072:	ea42 0206 	orr.w	r2, r2, r6
      GPIOx->MODER = temp;
 8005076:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005078:	d077      	beq.n	800516a <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507a:	4e7f      	ldr	r6, [pc, #508]	@ (8005278 <HAL_GPIO_Init+0x25c>)
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800507c:	f003 0703 	and.w	r7, r3, #3
 8005080:	210f      	movs	r1, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005082:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005086:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005088:	f042 0202 	orr.w	r2, r2, #2
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800508c:	fa01 fc07 	lsl.w	ip, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005090:	497a      	ldr	r1, [pc, #488]	@ (800527c <HAL_GPIO_Init+0x260>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005092:	f8c6 20f4 	str.w	r2, [r6, #244]	@ 0xf4
 8005096:	f8d6 20f4 	ldr.w	r2, [r6, #244]	@ 0xf4
 800509a:	f023 0603 	bic.w	r6, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800509e:	4288      	cmp	r0, r1
 80050a0:	f106 46b0 	add.w	r6, r6, #1476395008	@ 0x58000000
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a4:	f002 0202 	and.w	r2, r2, #2
 80050a8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80050ac:	9203      	str	r2, [sp, #12]
 80050ae:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80050b0:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050b2:	ea22 020c 	bic.w	r2, r2, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050b6:	d031      	beq.n	800511c <HAL_GPIO_Init+0x100>
 80050b8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80050bc:	4288      	cmp	r0, r1
 80050be:	f000 80b0 	beq.w	8005222 <HAL_GPIO_Init+0x206>
 80050c2:	496f      	ldr	r1, [pc, #444]	@ (8005280 <HAL_GPIO_Init+0x264>)
 80050c4:	4288      	cmp	r0, r1
 80050c6:	f000 80b2 	beq.w	800522e <HAL_GPIO_Init+0x212>
 80050ca:	f8df c1b8 	ldr.w	ip, [pc, #440]	@ 8005284 <HAL_GPIO_Init+0x268>
 80050ce:	4560      	cmp	r0, ip
 80050d0:	f000 80a1 	beq.w	8005216 <HAL_GPIO_Init+0x1fa>
 80050d4:	f8df c1b0 	ldr.w	ip, [pc, #432]	@ 8005288 <HAL_GPIO_Init+0x26c>
 80050d8:	4560      	cmp	r0, ip
 80050da:	f000 80b4 	beq.w	8005246 <HAL_GPIO_Init+0x22a>
 80050de:	f8df c1ac 	ldr.w	ip, [pc, #428]	@ 800528c <HAL_GPIO_Init+0x270>
 80050e2:	4560      	cmp	r0, ip
 80050e4:	f000 80b5 	beq.w	8005252 <HAL_GPIO_Init+0x236>
 80050e8:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8005290 <HAL_GPIO_Init+0x274>
 80050ec:	4560      	cmp	r0, ip
 80050ee:	f000 80a4 	beq.w	800523a <HAL_GPIO_Init+0x21e>
 80050f2:	f8df c1a0 	ldr.w	ip, [pc, #416]	@ 8005294 <HAL_GPIO_Init+0x278>
 80050f6:	4560      	cmp	r0, ip
 80050f8:	f000 80b1 	beq.w	800525e <HAL_GPIO_Init+0x242>
 80050fc:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8005298 <HAL_GPIO_Init+0x27c>
 8005100:	4560      	cmp	r0, ip
 8005102:	f000 80b2 	beq.w	800526a <HAL_GPIO_Init+0x24e>
 8005106:	f8df c194 	ldr.w	ip, [pc, #404]	@ 800529c <HAL_GPIO_Init+0x280>
 800510a:	4560      	cmp	r0, ip
 800510c:	bf0c      	ite	eq
 800510e:	f04f 0c09 	moveq.w	ip, #9
 8005112:	f04f 0c0a 	movne.w	ip, #10
 8005116:	fa0c f707 	lsl.w	r7, ip, r7
 800511a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800511c:	60b2      	str	r2, [r6, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800511e:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR1;
 8005120:	f8de 2000 	ldr.w	r2, [lr]
        temp &= ~(iocurrent);
 8005124:	ea6f 060a 	mvn.w	r6, sl
        {
          temp |= iocurrent;
 8005128:	bf4c      	ite	mi
 800512a:	ea4a 0202 	orrmi.w	r2, sl, r2
        temp &= ~(iocurrent);
 800512e:	4032      	andpl	r2, r6
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005130:	02a9      	lsls	r1, r5, #10
        EXTI->RTSR1 = temp;
 8005132:	f8ce 2000 	str.w	r2, [lr]
        temp = EXTI->FTSR1;
 8005136:	f8de 2004 	ldr.w	r2, [lr, #4]
        temp &= ~(iocurrent);
 800513a:	bf54      	ite	pl
 800513c:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 800513e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005142:	03af      	lsls	r7, r5, #14
        EXTI->FTSR1 = temp;
 8005144:	f8ce 2004 	str.w	r2, [lr, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8005148:	f8de 2084 	ldr.w	r2, [lr, #132]	@ 0x84
        temp &= ~(iocurrent);
 800514c:	bf54      	ite	pl
 800514e:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005150:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005154:	03e9      	lsls	r1, r5, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8005156:	f8ce 2084 	str.w	r2, [lr, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 800515a:	f8de 2080 	ldr.w	r2, [lr, #128]	@ 0x80
        temp &= ~(iocurrent);
 800515e:	bf54      	ite	pl
 8005160:	4032      	andpl	r2, r6
        {
          temp |= iocurrent;
 8005162:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005166:	f8ce 2080 	str.w	r2, [lr, #128]	@ 0x80
      }
    }

    position++;
 800516a:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800516c:	fa34 f203 	lsrs.w	r2, r4, r3
 8005170:	f47f af61 	bne.w	8005036 <HAL_GPIO_Init+0x1a>
  }
}
 8005174:	b005      	add	sp, #20
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800517a:	9900      	ldr	r1, [sp, #0]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800517c:	2a02      	cmp	r2, #2
        temp = GPIOx->OSPEEDR;
 800517e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005182:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005184:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005188:	fa01 f807 	lsl.w	r8, r1, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800518c:	9900      	ldr	r1, [sp, #0]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800518e:	ea48 0809 	orr.w	r8, r8, r9
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005192:	6889      	ldr	r1, [r1, #8]
        GPIOx->OSPEEDR = temp;
 8005194:	f8c0 8008 	str.w	r8, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005198:	f3c5 1800 	ubfx	r8, r5, #4, #1
        temp = GPIOx->OTYPER;
 800519c:	f8d0 9004 	ldr.w	r9, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a0:	fa08 f803 	lsl.w	r8, r8, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051a4:	ea29 0c0c 	bic.w	ip, r9, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051a8:	ea48 0c0c 	orr.w	ip, r8, ip
        GPIOx->OTYPER = temp;
 80051ac:	f8c0 c004 	str.w	ip, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051b0:	fa01 fc07 	lsl.w	ip, r1, r7
      temp = GPIOx->PUPDR;
 80051b4:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80051b8:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051bc:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 80051c0:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051c4:	f47f af4f 	bne.w	8005066 <HAL_GPIO_Init+0x4a>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051c8:	f003 0c07 	and.w	ip, r3, #7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051cc:	9900      	ldr	r1, [sp, #0]
        temp = GPIOx->AFR[position >> 3U];
 80051ce:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051d6:	6909      	ldr	r1, [r1, #16]
 80051d8:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80051dc:	fa01 f10c 	lsl.w	r1, r1, ip
        temp = GPIOx->AFR[position >> 3U];
 80051e0:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051e4:	9101      	str	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051e6:	210f      	movs	r1, #15
 80051e8:	fa01 fc0c 	lsl.w	ip, r1, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ec:	9901      	ldr	r1, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051ee:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051f2:	ea41 0c09 	orr.w	ip, r1, r9
        GPIOx->AFR[position >> 3U] = temp;
 80051f6:	f8c8 c020 	str.w	ip, [r8, #32]
 80051fa:	e734      	b.n	8005066 <HAL_GPIO_Init+0x4a>
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051fc:	9900      	ldr	r1, [sp, #0]
      temp = GPIOx->PUPDR;
 80051fe:	f8d0 800c 	ldr.w	r8, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005202:	6889      	ldr	r1, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005204:	ea08 0806 	and.w	r8, r8, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005208:	fa01 fc07 	lsl.w	ip, r1, r7
 800520c:	ea4c 0c08 	orr.w	ip, ip, r8
      GPIOx->PUPDR = temp;
 8005210:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005214:	e727      	b.n	8005066 <HAL_GPIO_Init+0x4a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005216:	f04f 0c03 	mov.w	ip, #3
 800521a:	fa0c f707 	lsl.w	r7, ip, r7
 800521e:	433a      	orrs	r2, r7
 8005220:	e77c      	b.n	800511c <HAL_GPIO_Init+0x100>
 8005222:	f04f 0c01 	mov.w	ip, #1
 8005226:	fa0c f707 	lsl.w	r7, ip, r7
 800522a:	433a      	orrs	r2, r7
 800522c:	e776      	b.n	800511c <HAL_GPIO_Init+0x100>
 800522e:	f04f 0c02 	mov.w	ip, #2
 8005232:	fa0c f707 	lsl.w	r7, ip, r7
 8005236:	433a      	orrs	r2, r7
 8005238:	e770      	b.n	800511c <HAL_GPIO_Init+0x100>
 800523a:	f04f 0c06 	mov.w	ip, #6
 800523e:	fa0c f707 	lsl.w	r7, ip, r7
 8005242:	433a      	orrs	r2, r7
 8005244:	e76a      	b.n	800511c <HAL_GPIO_Init+0x100>
 8005246:	f04f 0c04 	mov.w	ip, #4
 800524a:	fa0c f707 	lsl.w	r7, ip, r7
 800524e:	433a      	orrs	r2, r7
 8005250:	e764      	b.n	800511c <HAL_GPIO_Init+0x100>
 8005252:	f04f 0c05 	mov.w	ip, #5
 8005256:	fa0c f707 	lsl.w	r7, ip, r7
 800525a:	433a      	orrs	r2, r7
 800525c:	e75e      	b.n	800511c <HAL_GPIO_Init+0x100>
 800525e:	f04f 0c07 	mov.w	ip, #7
 8005262:	fa0c f707 	lsl.w	r7, ip, r7
 8005266:	433a      	orrs	r2, r7
 8005268:	e758      	b.n	800511c <HAL_GPIO_Init+0x100>
 800526a:	f04f 0c08 	mov.w	ip, #8
 800526e:	fa0c f707 	lsl.w	r7, ip, r7
 8005272:	433a      	orrs	r2, r7
 8005274:	e752      	b.n	800511c <HAL_GPIO_Init+0x100>
 8005276:	bf00      	nop
 8005278:	58024400 	.word	0x58024400
 800527c:	58020000 	.word	0x58020000
 8005280:	58020800 	.word	0x58020800
 8005284:	58020c00 	.word	0x58020c00
 8005288:	58021000 	.word	0x58021000
 800528c:	58021400 	.word	0x58021400
 8005290:	58021800 	.word	0x58021800
 8005294:	58021c00 	.word	0x58021c00
 8005298:	58022000 	.word	0x58022000
 800529c:	58022400 	.word	0x58022400

080052a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a0:	b902      	cbnz	r2, 80052a4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80052a2:	0409      	lsls	r1, r1, #16
 80052a4:	6181      	str	r1, [r0, #24]
  }
}
 80052a6:	4770      	bx	lr

080052a8 <HAL_GPIO_EXTI_IRQHandler>:
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80052a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052ac:	f8d2 1088 	ldr.w	r1, [r2, #136]	@ 0x88
 80052b0:	4201      	tst	r1, r0
 80052b2:	d100      	bne.n	80052b6 <HAL_GPIO_EXTI_IRQHandler+0xe>
 80052b4:	4770      	bx	lr
{
 80052b6:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052b8:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052bc:	f7fb ff6c 	bl	8001198 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80052c0:	bd08      	pop	{r3, pc}
 80052c2:	bf00      	nop

080052c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052c4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052c6:	4c10      	ldr	r4, [pc, #64]	@ (8005308 <HAL_PWREx_ConfigSupply+0x44>)
 80052c8:	68e3      	ldr	r3, [r4, #12]
 80052ca:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052ce:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052d0:	d105      	bne.n	80052de <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	1a18      	subs	r0, r3, r0
 80052d8:	bf18      	it	ne
 80052da:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80052dc:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052de:	f023 0307 	bic.w	r3, r3, #7
 80052e2:	4303      	orrs	r3, r0
 80052e4:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80052e6:	f7fd f8db 	bl	80024a0 <HAL_GetTick>
 80052ea:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052ec:	e005      	b.n	80052fa <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052ee:	f7fd f8d7 	bl	80024a0 <HAL_GetTick>
 80052f2:	1b40      	subs	r0, r0, r5
 80052f4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80052f8:	d804      	bhi.n	8005304 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052fa:	6863      	ldr	r3, [r4, #4]
 80052fc:	049b      	lsls	r3, r3, #18
 80052fe:	d5f6      	bpl.n	80052ee <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_OK;
 8005300:	2000      	movs	r0, #0
}
 8005302:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005304:	2001      	movs	r0, #1
}
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	58024800 	.word	0x58024800

0800530c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800530c:	4b33      	ldr	r3, [pc, #204]	@ (80053dc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800530e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005310:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005312:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005314:	6add      	ldr	r5, [r3, #44]	@ 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8005316:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800531a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800531c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005320:	d036      	beq.n	8005390 <HAL_RCC_GetSysClockFreq.part.0+0x84>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005322:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005326:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800532a:	f002 0203 	and.w	r2, r2, #3
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800532e:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005332:	fb05 f101 	mul.w	r1, r5, r1
 8005336:	2a01      	cmp	r2, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800533c:	ee06 1a90 	vmov	s13, r1
 8005340:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005344:	d002      	beq.n	800534c <HAL_RCC_GetSysClockFreq.part.0+0x40>
 8005346:	2a02      	cmp	r2, #2
 8005348:	d042      	beq.n	80053d0 <HAL_RCC_GetSysClockFreq.part.0+0xc4>
 800534a:	b31a      	cbz	r2, 8005394 <HAL_RCC_GetSysClockFreq.part.0+0x88>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800534c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 80053e0 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8005350:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8005354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005366:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800536a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536e:	ee67 7a86 	vmul.f32	s15, s15, s12
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005372:	4b1a      	ldr	r3, [pc, #104]	@ (80053dc <HAL_RCC_GetSysClockFreq.part.0+0xd0>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005376:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800537a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800537c:	ee07 3a10 	vmov	s14, r3
 8005380:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005384:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005388:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800538c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8005390:	bc30      	pop	{r4, r5}
 8005392:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	0692      	lsls	r2, r2, #26
 8005398:	d51d      	bpl.n	80053d6 <HAL_RCC_GetSysClockFreq.part.0+0xca>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800539a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800539c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053a0:	4a10      	ldr	r2, [pc, #64]	@ (80053e4 <HAL_RCC_GetSysClockFreq.part.0+0xd8>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053a4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053ac:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ae:	ee06 3a10 	vmov	s12, r3
 80053b2:	ee05 2a90 	vmov	s11, r2
 80053b6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80053ba:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80053be:	ee36 6a27 	vadd.f32	s12, s12, s15
 80053c2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80053c6:	ee36 7a26 	vadd.f32	s14, s12, s13
 80053ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053ce:	e7d0      	b.n	8005372 <HAL_RCC_GetSysClockFreq.part.0+0x66>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053d0:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80053e8 <HAL_RCC_GetSysClockFreq.part.0+0xdc>
 80053d4:	e7bc      	b.n	8005350 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053d6:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80053ec <HAL_RCC_GetSysClockFreq.part.0+0xe0>
 80053da:	e7b9      	b.n	8005350 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80053dc:	58024400 	.word	0x58024400
 80053e0:	4a742400 	.word	0x4a742400
 80053e4:	03d09000 	.word	0x03d09000
 80053e8:	4bbebc20 	.word	0x4bbebc20
 80053ec:	4c742400 	.word	0x4c742400

080053f0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f000 82e9 	beq.w	80059c8 <HAL_RCC_OscConfig+0x5d8>
{
 80053f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f8:	6803      	ldr	r3, [r0, #0]
 80053fa:	4604      	mov	r4, r0
 80053fc:	07d9      	lsls	r1, r3, #31
 80053fe:	d52e      	bpl.n	800545e <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005400:	4997      	ldr	r1, [pc, #604]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 8005402:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005404:	6a89      	ldr	r1, [r1, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005406:	f002 0238 	and.w	r2, r2, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800540a:	2a10      	cmp	r2, #16
 800540c:	f000 80ee 	beq.w	80055ec <HAL_RCC_OscConfig+0x1fc>
 8005410:	2a18      	cmp	r2, #24
 8005412:	f000 80e6 	beq.w	80055e2 <HAL_RCC_OscConfig+0x1f2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005416:	6863      	ldr	r3, [r4, #4]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800541c:	f000 8111 	beq.w	8005642 <HAL_RCC_OscConfig+0x252>
 8005420:	2b00      	cmp	r3, #0
 8005422:	f000 8167 	beq.w	80056f4 <HAL_RCC_OscConfig+0x304>
 8005426:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800542a:	4b8d      	ldr	r3, [pc, #564]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	f000 828a 	beq.w	8005946 <HAL_RCC_OscConfig+0x556>
 8005432:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800543e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005440:	f7fd f82e 	bl	80024a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005444:	4e86      	ldr	r6, [pc, #536]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8005446:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005448:	e005      	b.n	8005456 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800544a:	f7fd f829 	bl	80024a0 <HAL_GetTick>
 800544e:	1b40      	subs	r0, r0, r5
 8005450:	2864      	cmp	r0, #100	@ 0x64
 8005452:	f200 814d 	bhi.w	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005456:	6833      	ldr	r3, [r6, #0]
 8005458:	039b      	lsls	r3, r3, #14
 800545a:	d5f6      	bpl.n	800544a <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545c:	6823      	ldr	r3, [r4, #0]
 800545e:	079d      	lsls	r5, r3, #30
 8005460:	d470      	bmi.n	8005544 <HAL_RCC_OscConfig+0x154>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005462:	06d9      	lsls	r1, r3, #27
 8005464:	d533      	bpl.n	80054ce <HAL_RCC_OscConfig+0xde>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005466:	4a7e      	ldr	r2, [pc, #504]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 8005468:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800546a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005470:	2b08      	cmp	r3, #8
 8005472:	f000 80cb 	beq.w	800560c <HAL_RCC_OscConfig+0x21c>
 8005476:	2b18      	cmp	r3, #24
 8005478:	f000 80c3 	beq.w	8005602 <HAL_RCC_OscConfig+0x212>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800547c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800547e:	4d78      	ldr	r5, [pc, #480]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 816f 	beq.w	8005764 <HAL_RCC_OscConfig+0x374>
        __HAL_RCC_CSI_ENABLE();
 8005486:	682b      	ldr	r3, [r5, #0]
 8005488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800548c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800548e:	f7fd f807 	bl	80024a0 <HAL_GetTick>
 8005492:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005494:	e005      	b.n	80054a2 <HAL_RCC_OscConfig+0xb2>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005496:	f7fd f803 	bl	80024a0 <HAL_GetTick>
 800549a:	1b80      	subs	r0, r0, r6
 800549c:	2802      	cmp	r0, #2
 800549e:	f200 8127 	bhi.w	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	05db      	lsls	r3, r3, #23
 80054a6:	d5f6      	bpl.n	8005496 <HAL_RCC_OscConfig+0xa6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054a8:	f7fd f812 	bl	80024d0 <HAL_GetREVID>
 80054ac:	f241 0303 	movw	r3, #4099	@ 0x1003
 80054b0:	4298      	cmp	r0, r3
 80054b2:	f200 8269 	bhi.w	8005988 <HAL_RCC_OscConfig+0x598>
 80054b6:	6a22      	ldr	r2, [r4, #32]
 80054b8:	686b      	ldr	r3, [r5, #4]
 80054ba:	2a20      	cmp	r2, #32
 80054bc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80054c0:	bf0c      	ite	eq
 80054c2:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 80054c6:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80054ca:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	071d      	lsls	r5, r3, #28
 80054d0:	d516      	bpl.n	8005500 <HAL_RCC_OscConfig+0x110>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054d2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80054d4:	4d62      	ldr	r5, [pc, #392]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 8122 	beq.w	8005720 <HAL_RCC_OscConfig+0x330>
      __HAL_RCC_LSI_ENABLE();
 80054dc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80054de:	f043 0301 	orr.w	r3, r3, #1
 80054e2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 80054e4:	f7fc ffdc 	bl	80024a0 <HAL_GetTick>
 80054e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ea:	e005      	b.n	80054f8 <HAL_RCC_OscConfig+0x108>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ec:	f7fc ffd8 	bl	80024a0 <HAL_GetTick>
 80054f0:	1b80      	subs	r0, r0, r6
 80054f2:	2802      	cmp	r0, #2
 80054f4:	f200 80fc 	bhi.w	80056f0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054f8:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80054fa:	0798      	lsls	r0, r3, #30
 80054fc:	d5f6      	bpl.n	80054ec <HAL_RCC_OscConfig+0xfc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054fe:	6823      	ldr	r3, [r4, #0]
 8005500:	069a      	lsls	r2, r3, #26
 8005502:	d516      	bpl.n	8005532 <HAL_RCC_OscConfig+0x142>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005504:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8005506:	4d56      	ldr	r5, [pc, #344]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 811a 	beq.w	8005742 <HAL_RCC_OscConfig+0x352>
      __HAL_RCC_HSI48_ENABLE();
 800550e:	682b      	ldr	r3, [r5, #0]
 8005510:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005514:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005516:	f7fc ffc3 	bl	80024a0 <HAL_GetTick>
 800551a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800551c:	e005      	b.n	800552a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551e:	f7fc ffbf 	bl	80024a0 <HAL_GetTick>
 8005522:	1b80      	subs	r0, r0, r6
 8005524:	2802      	cmp	r0, #2
 8005526:	f200 80e3 	bhi.w	80056f0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800552a:	682b      	ldr	r3, [r5, #0]
 800552c:	049f      	lsls	r7, r3, #18
 800552e:	d5f6      	bpl.n	800551e <HAL_RCC_OscConfig+0x12e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005530:	6823      	ldr	r3, [r4, #0]
 8005532:	0759      	lsls	r1, r3, #29
 8005534:	f100 808b 	bmi.w	800564e <HAL_RCC_OscConfig+0x25e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005538:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800553a:	2b00      	cmp	r3, #0
 800553c:	f040 80bf 	bne.w	80056be <HAL_RCC_OscConfig+0x2ce>
  return HAL_OK;
 8005540:	2000      	movs	r0, #0
}
 8005542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005544:	4a46      	ldr	r2, [pc, #280]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 8005546:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005548:	6a92      	ldr	r2, [r2, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800554a:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800554e:	d12d      	bne.n	80055ac <HAL_RCC_OscConfig+0x1bc>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005550:	4b43      	ldr	r3, [pc, #268]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005552:	68e2      	ldr	r2, [r4, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	0759      	lsls	r1, r3, #29
 8005558:	d501      	bpl.n	800555e <HAL_RCC_OscConfig+0x16e>
 800555a:	2a00      	cmp	r2, #0
 800555c:	d04f      	beq.n	80055fe <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800555e:	4d40      	ldr	r5, [pc, #256]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	f023 0319 	bic.w	r3, r3, #25
 8005566:	4313      	orrs	r3, r2
 8005568:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800556a:	f7fc ff99 	bl	80024a0 <HAL_GetTick>
 800556e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005570:	e005      	b.n	800557e <HAL_RCC_OscConfig+0x18e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005572:	f7fc ff95 	bl	80024a0 <HAL_GetTick>
 8005576:	1b80      	subs	r0, r0, r6
 8005578:	2802      	cmp	r0, #2
 800557a:	f200 80b9 	bhi.w	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	075b      	lsls	r3, r3, #29
 8005582:	d5f6      	bpl.n	8005572 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005584:	f7fc ffa4 	bl	80024d0 <HAL_GetREVID>
 8005588:	f241 0303 	movw	r3, #4099	@ 0x1003
 800558c:	4298      	cmp	r0, r3
 800558e:	f200 8110 	bhi.w	80057b2 <HAL_RCC_OscConfig+0x3c2>
 8005592:	6922      	ldr	r2, [r4, #16]
 8005594:	686b      	ldr	r3, [r5, #4]
 8005596:	2a40      	cmp	r2, #64	@ 0x40
 8005598:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800559c:	bf0c      	ite	eq
 800559e:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 80055a2:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80055a6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	e75a      	b.n	8005462 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80055ac:	2b18      	cmp	r3, #24
 80055ae:	f000 80fc 	beq.w	80057aa <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055b2:	4d2b      	ldr	r5, [pc, #172]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055b4:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055b6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	f000 80e5 	beq.w	8005788 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055be:	f023 0319 	bic.w	r3, r3, #25
 80055c2:	4313      	orrs	r3, r2
 80055c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80055c6:	f7fc ff6b 	bl	80024a0 <HAL_GetTick>
 80055ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055cc:	e005      	b.n	80055da <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ce:	f7fc ff67 	bl	80024a0 <HAL_GetTick>
 80055d2:	1b80      	subs	r0, r0, r6
 80055d4:	2802      	cmp	r0, #2
 80055d6:	f200 808b 	bhi.w	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055da:	682b      	ldr	r3, [r5, #0]
 80055dc:	075f      	lsls	r7, r3, #29
 80055de:	d5f6      	bpl.n	80055ce <HAL_RCC_OscConfig+0x1de>
 80055e0:	e7d0      	b.n	8005584 <HAL_RCC_OscConfig+0x194>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055e2:	f001 0103 	and.w	r1, r1, #3
 80055e6:	2902      	cmp	r1, #2
 80055e8:	f47f af15 	bne.w	8005416 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	0392      	lsls	r2, r2, #14
 80055f2:	f57f af34 	bpl.w	800545e <HAL_RCC_OscConfig+0x6e>
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	2a00      	cmp	r2, #0
 80055fa:	f47f af30 	bne.w	800545e <HAL_RCC_OscConfig+0x6e>
    return HAL_ERROR;
 80055fe:	2001      	movs	r0, #1
}
 8005600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005602:	f002 0203 	and.w	r2, r2, #3
 8005606:	2a01      	cmp	r2, #1
 8005608:	f47f af38 	bne.w	800547c <HAL_RCC_OscConfig+0x8c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800560c:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	05da      	lsls	r2, r3, #23
 8005612:	d502      	bpl.n	800561a <HAL_RCC_OscConfig+0x22a>
 8005614:	69e3      	ldr	r3, [r4, #28]
 8005616:	2b80      	cmp	r3, #128	@ 0x80
 8005618:	d1f1      	bne.n	80055fe <HAL_RCC_OscConfig+0x20e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800561a:	f7fc ff59 	bl	80024d0 <HAL_GetREVID>
 800561e:	f241 0303 	movw	r3, #4099	@ 0x1003
 8005622:	4298      	cmp	r0, r3
 8005624:	f200 80ce 	bhi.w	80057c4 <HAL_RCC_OscConfig+0x3d4>
 8005628:	6a22      	ldr	r2, [r4, #32]
 800562a:	2a20      	cmp	r2, #32
 800562c:	f000 81bb 	beq.w	80059a6 <HAL_RCC_OscConfig+0x5b6>
 8005630:	490b      	ldr	r1, [pc, #44]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 8005632:	684b      	ldr	r3, [r1, #4]
 8005634:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005638:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800563c:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	e745      	b.n	80054ce <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005642:	4a07      	ldr	r2, [pc, #28]	@ (8005660 <HAL_RCC_OscConfig+0x270>)
 8005644:	6813      	ldr	r3, [r2, #0]
 8005646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800564a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800564c:	e6f8      	b.n	8005440 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
 800564e:	4d05      	ldr	r5, [pc, #20]	@ (8005664 <HAL_RCC_OscConfig+0x274>)
 8005650:	682b      	ldr	r3, [r5, #0]
 8005652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005656:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005658:	f7fc ff22 	bl	80024a0 <HAL_GetTick>
 800565c:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x282>
 8005660:	58024400 	.word	0x58024400
 8005664:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005668:	f7fc ff1a 	bl	80024a0 <HAL_GetTick>
 800566c:	1b80      	subs	r0, r0, r6
 800566e:	2864      	cmp	r0, #100	@ 0x64
 8005670:	d83e      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005672:	682b      	ldr	r3, [r5, #0]
 8005674:	05da      	lsls	r2, r3, #23
 8005676:	d5f7      	bpl.n	8005668 <HAL_RCC_OscConfig+0x278>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005678:	68a3      	ldr	r3, [r4, #8]
 800567a:	2b01      	cmp	r3, #1
 800567c:	f000 818d 	beq.w	800599a <HAL_RCC_OscConfig+0x5aa>
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8168 	beq.w	8005956 <HAL_RCC_OscConfig+0x566>
 8005686:	2b05      	cmp	r3, #5
 8005688:	4b85      	ldr	r3, [pc, #532]	@ (80058a0 <HAL_RCC_OscConfig+0x4b0>)
 800568a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800568c:	f000 8194 	beq.w	80059b8 <HAL_RCC_OscConfig+0x5c8>
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	671a      	str	r2, [r3, #112]	@ 0x70
 8005696:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	671a      	str	r2, [r3, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800569e:	f7fc feff 	bl	80024a0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056a2:	4e7f      	ldr	r6, [pc, #508]	@ (80058a0 <HAL_RCC_OscConfig+0x4b0>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a4:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80056a8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056aa:	e004      	b.n	80056b6 <HAL_RCC_OscConfig+0x2c6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ac:	f7fc fef8 	bl	80024a0 <HAL_GetTick>
 80056b0:	1b40      	subs	r0, r0, r5
 80056b2:	42b8      	cmp	r0, r7
 80056b4:	d81c      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b6:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80056b8:	079b      	lsls	r3, r3, #30
 80056ba:	d5f7      	bpl.n	80056ac <HAL_RCC_OscConfig+0x2bc>
 80056bc:	e73c      	b.n	8005538 <HAL_RCC_OscConfig+0x148>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056be:	4d78      	ldr	r5, [pc, #480]	@ (80058a0 <HAL_RCC_OscConfig+0x4b0>)
 80056c0:	692a      	ldr	r2, [r5, #16]
 80056c2:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 80056c6:	2a18      	cmp	r2, #24
 80056c8:	f000 80f0 	beq.w	80058ac <HAL_RCC_OscConfig+0x4bc>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056cc:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80056ce:	682b      	ldr	r3, [r5, #0]
 80056d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056d4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056d6:	d07f      	beq.n	80057d8 <HAL_RCC_OscConfig+0x3e8>
        tickstart = HAL_GetTick();
 80056d8:	f7fc fee2 	bl	80024a0 <HAL_GetTick>
 80056dc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056de:	682b      	ldr	r3, [r5, #0]
 80056e0:	019b      	lsls	r3, r3, #6
 80056e2:	f57f af2d 	bpl.w	8005540 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e6:	f7fc fedb 	bl	80024a0 <HAL_GetTick>
 80056ea:	1b00      	subs	r0, r0, r4
 80056ec:	2802      	cmp	r0, #2
 80056ee:	d9f6      	bls.n	80056de <HAL_RCC_OscConfig+0x2ee>
            return HAL_TIMEOUT;
 80056f0:	2003      	movs	r0, #3
}
 80056f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f4:	4d6a      	ldr	r5, [pc, #424]	@ (80058a0 <HAL_RCC_OscConfig+0x4b0>)
 80056f6:	682b      	ldr	r3, [r5, #0]
 80056f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056fc:	602b      	str	r3, [r5, #0]
 80056fe:	682b      	ldr	r3, [r5, #0]
 8005700:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005704:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005706:	f7fc fecb 	bl	80024a0 <HAL_GetTick>
 800570a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800570c:	e004      	b.n	8005718 <HAL_RCC_OscConfig+0x328>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800570e:	f7fc fec7 	bl	80024a0 <HAL_GetTick>
 8005712:	1b80      	subs	r0, r0, r6
 8005714:	2864      	cmp	r0, #100	@ 0x64
 8005716:	d8eb      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	039f      	lsls	r7, r3, #14
 800571c:	d4f7      	bmi.n	800570e <HAL_RCC_OscConfig+0x31e>
 800571e:	e69d      	b.n	800545c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8005720:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8005728:	f7fc feba 	bl	80024a0 <HAL_GetTick>
 800572c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800572e:	e004      	b.n	800573a <HAL_RCC_OscConfig+0x34a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005730:	f7fc feb6 	bl	80024a0 <HAL_GetTick>
 8005734:	1b80      	subs	r0, r0, r6
 8005736:	2802      	cmp	r0, #2
 8005738:	d8da      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800573a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800573c:	0799      	lsls	r1, r3, #30
 800573e:	d4f7      	bmi.n	8005730 <HAL_RCC_OscConfig+0x340>
 8005740:	e6dd      	b.n	80054fe <HAL_RCC_OscConfig+0x10e>
      __HAL_RCC_HSI48_DISABLE();
 8005742:	682b      	ldr	r3, [r5, #0]
 8005744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005748:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800574a:	f7fc fea9 	bl	80024a0 <HAL_GetTick>
 800574e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005750:	e004      	b.n	800575c <HAL_RCC_OscConfig+0x36c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005752:	f7fc fea5 	bl	80024a0 <HAL_GetTick>
 8005756:	1b80      	subs	r0, r0, r6
 8005758:	2802      	cmp	r0, #2
 800575a:	d8c9      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800575c:	682b      	ldr	r3, [r5, #0]
 800575e:	0498      	lsls	r0, r3, #18
 8005760:	d4f7      	bmi.n	8005752 <HAL_RCC_OscConfig+0x362>
 8005762:	e6e5      	b.n	8005530 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_CSI_DISABLE();
 8005764:	682b      	ldr	r3, [r5, #0]
 8005766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800576c:	f7fc fe98 	bl	80024a0 <HAL_GetTick>
 8005770:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005772:	e004      	b.n	800577e <HAL_RCC_OscConfig+0x38e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005774:	f7fc fe94 	bl	80024a0 <HAL_GetTick>
 8005778:	1b80      	subs	r0, r0, r6
 800577a:	2802      	cmp	r0, #2
 800577c:	d8b8      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800577e:	682b      	ldr	r3, [r5, #0]
 8005780:	05df      	lsls	r7, r3, #23
 8005782:	d4f7      	bmi.n	8005774 <HAL_RCC_OscConfig+0x384>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	e6a2      	b.n	80054ce <HAL_RCC_OscConfig+0xde>
        __HAL_RCC_HSI_DISABLE();
 8005788:	f023 0301 	bic.w	r3, r3, #1
 800578c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800578e:	f7fc fe87 	bl	80024a0 <HAL_GetTick>
 8005792:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005794:	e004      	b.n	80057a0 <HAL_RCC_OscConfig+0x3b0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005796:	f7fc fe83 	bl	80024a0 <HAL_GetTick>
 800579a:	1b80      	subs	r0, r0, r6
 800579c:	2802      	cmp	r0, #2
 800579e:	d8a7      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80057a0:	682b      	ldr	r3, [r5, #0]
 80057a2:	0758      	lsls	r0, r3, #29
 80057a4:	d4f7      	bmi.n	8005796 <HAL_RCC_OscConfig+0x3a6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	e65b      	b.n	8005462 <HAL_RCC_OscConfig+0x72>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057aa:	0790      	lsls	r0, r2, #30
 80057ac:	f47f af01 	bne.w	80055b2 <HAL_RCC_OscConfig+0x1c2>
 80057b0:	e6ce      	b.n	8005550 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057b2:	686b      	ldr	r3, [r5, #4]
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80057ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80057be:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	e64e      	b.n	8005462 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80057c4:	4a36      	ldr	r2, [pc, #216]	@ (80058a0 <HAL_RCC_OscConfig+0x4b0>)
 80057c6:	6a21      	ldr	r1, [r4, #32]
 80057c8:	68d3      	ldr	r3, [r2, #12]
 80057ca:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 80057ce:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80057d2:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	e67a      	b.n	80054ce <HAL_RCC_OscConfig+0xde>
        tickstart = HAL_GetTick();
 80057d8:	f7fc fe62 	bl	80024a0 <HAL_GetTick>
 80057dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057de:	e004      	b.n	80057ea <HAL_RCC_OscConfig+0x3fa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fc fe5e 	bl	80024a0 <HAL_GetTick>
 80057e4:	1b80      	subs	r0, r0, r6
 80057e6:	2802      	cmp	r0, #2
 80057e8:	d882      	bhi.n	80056f0 <HAL_RCC_OscConfig+0x300>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057ea:	682b      	ldr	r3, [r5, #0]
 80057ec:	0199      	lsls	r1, r3, #6
 80057ee:	d4f7      	bmi.n	80057e0 <HAL_RCC_OscConfig+0x3f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057f0:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 80057f2:	4b2c      	ldr	r3, [pc, #176]	@ (80058a4 <HAL_RCC_OscConfig+0x4b4>)
 80057f4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80057f6:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057f8:	492b      	ldr	r1, [pc, #172]	@ (80058a8 <HAL_RCC_OscConfig+0x4b8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057fa:	4e29      	ldr	r6, [pc, #164]	@ (80058a0 <HAL_RCC_OscConfig+0x4b0>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057fc:	4313      	orrs	r3, r2
 80057fe:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005800:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005804:	62ab      	str	r3, [r5, #40]	@ 0x28
 8005806:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	@ 0x34
 800580a:	3b01      	subs	r3, #1
 800580c:	3a01      	subs	r2, #1
 800580e:	025b      	lsls	r3, r3, #9
 8005810:	0412      	lsls	r2, r2, #16
 8005812:	b29b      	uxth	r3, r3
 8005814:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005818:	4313      	orrs	r3, r2
 800581a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800581c:	3a01      	subs	r2, #1
 800581e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005822:	4313      	orrs	r3, r2
 8005824:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8005826:	3a01      	subs	r2, #1
 8005828:	0612      	lsls	r2, r2, #24
 800582a:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800582e:	4313      	orrs	r3, r2
 8005830:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8005832:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800583a:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
 800583c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800583e:	4011      	ands	r1, r2
 8005840:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8005844:	6369      	str	r1, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005846:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005848:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800584a:	f023 030c 	bic.w	r3, r3, #12
 800584e:	4313      	orrs	r3, r2
 8005850:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005852:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005854:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005856:	f023 0302 	bic.w	r3, r3, #2
 800585a:	4313      	orrs	r3, r2
 800585c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800585e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005864:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005866:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800586c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800586e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005874:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8005876:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800587e:	682b      	ldr	r3, [r5, #0]
 8005880:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005884:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005886:	f7fc fe0b 	bl	80024a0 <HAL_GetTick>
 800588a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800588c:	6833      	ldr	r3, [r6, #0]
 800588e:	019a      	lsls	r2, r3, #6
 8005890:	f53f ae56 	bmi.w	8005540 <HAL_RCC_OscConfig+0x150>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fc fe04 	bl	80024a0 <HAL_GetTick>
 8005898:	1b00      	subs	r0, r0, r4
 800589a:	2802      	cmp	r0, #2
 800589c:	d9f6      	bls.n	800588c <HAL_RCC_OscConfig+0x49c>
 800589e:	e727      	b.n	80056f0 <HAL_RCC_OscConfig+0x300>
 80058a0:	58024400 	.word	0x58024400
 80058a4:	fffffc0c 	.word	0xfffffc0c
 80058a8:	ffff0007 	.word	0xffff0007
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ac:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058ae:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058b0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058b2:	f43f aea4 	beq.w	80055fe <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058b6:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ba:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80058bc:	428b      	cmp	r3, r1
 80058be:	f47f ae9e 	bne.w	80055fe <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058c2:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80058c8:	429a      	cmp	r2, r3
 80058ca:	f47f ae98 	bne.w	80055fe <HAL_RCC_OscConfig+0x20e>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058ce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80058d0:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80058d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	f47f ae91 	bne.w	80055fe <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058de:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80058e2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	f47f ae8a 	bne.w	80055fe <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058ea:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80058ec:	f3c0 4206 	ubfx	r2, r0, #16, #7
 80058f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	f47f ae83 	bne.w	80055fe <HAL_RCC_OscConfig+0x20e>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058f8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80058fa:	f3c0 6006 	ubfx	r0, r0, #24, #7
 80058fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005900:	4298      	cmp	r0, r3
 8005902:	f47f ae7c 	bne.w	80055fe <HAL_RCC_OscConfig+0x20e>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005906:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005908:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800590a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800590e:	429a      	cmp	r2, r3
 8005910:	f43f ae16 	beq.w	8005540 <HAL_RCC_OscConfig+0x150>
          __HAL_RCC_PLLFRACN_DISABLE();
 8005914:	4a2d      	ldr	r2, [pc, #180]	@ (80059cc <HAL_RCC_OscConfig+0x5dc>)
 8005916:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800591e:	f7fc fdbf 	bl	80024a0 <HAL_GetTick>
 8005922:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005924:	f7fc fdbc 	bl	80024a0 <HAL_GetTick>
 8005928:	42a8      	cmp	r0, r5
 800592a:	d0fb      	beq.n	8005924 <HAL_RCC_OscConfig+0x534>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800592c:	4a27      	ldr	r2, [pc, #156]	@ (80059cc <HAL_RCC_OscConfig+0x5dc>)
 800592e:	4b28      	ldr	r3, [pc, #160]	@ (80059d0 <HAL_RCC_OscConfig+0x5e0>)
 8005930:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 8005932:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005934:	4003      	ands	r3, r0
 8005936:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800593a:	6353      	str	r3, [r2, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800593c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005944:	e5fc      	b.n	8005540 <HAL_RCC_OscConfig+0x150>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005946:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005952:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005954:	e574      	b.n	8005440 <HAL_RCC_OscConfig+0x50>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005956:	4d1d      	ldr	r5, [pc, #116]	@ (80059cc <HAL_RCC_OscConfig+0x5dc>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005958:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800595c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	672b      	str	r3, [r5, #112]	@ 0x70
 8005964:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005966:	f023 0304 	bic.w	r3, r3, #4
 800596a:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800596c:	f7fc fd98 	bl	80024a0 <HAL_GetTick>
 8005970:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005972:	e005      	b.n	8005980 <HAL_RCC_OscConfig+0x590>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005974:	f7fc fd94 	bl	80024a0 <HAL_GetTick>
 8005978:	1b80      	subs	r0, r0, r6
 800597a:	42b8      	cmp	r0, r7
 800597c:	f63f aeb8 	bhi.w	80056f0 <HAL_RCC_OscConfig+0x300>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005980:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8005982:	0798      	lsls	r0, r3, #30
 8005984:	d4f6      	bmi.n	8005974 <HAL_RCC_OscConfig+0x584>
 8005986:	e5d7      	b.n	8005538 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005988:	68eb      	ldr	r3, [r5, #12]
 800598a:	6a22      	ldr	r2, [r4, #32]
 800598c:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8005990:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005994:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	e599      	b.n	80054ce <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800599a:	4a0c      	ldr	r2, [pc, #48]	@ (80059cc <HAL_RCC_OscConfig+0x5dc>)
 800599c:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800599e:	f043 0301 	orr.w	r3, r3, #1
 80059a2:	6713      	str	r3, [r2, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059a4:	e67b      	b.n	800569e <HAL_RCC_OscConfig+0x2ae>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059a6:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <HAL_RCC_OscConfig+0x5dc>)
 80059a8:	6853      	ldr	r3, [r2, #4]
 80059aa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80059ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059b2:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	e58a      	b.n	80054ce <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059b8:	f042 0204 	orr.w	r2, r2, #4
 80059bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80059be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059c6:	e66a      	b.n	800569e <HAL_RCC_OscConfig+0x2ae>
    return HAL_ERROR;
 80059c8:	2001      	movs	r0, #1
}
 80059ca:	4770      	bx	lr
 80059cc:	58024400 	.word	0x58024400
 80059d0:	ffff0007 	.word	0xffff0007

080059d4 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059d4:	4a3f      	ldr	r2, [pc, #252]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x100>)
 80059d6:	6913      	ldr	r3, [r2, #16]
 80059d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d004      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x16>
 80059e0:	2b18      	cmp	r3, #24
 80059e2:	d00d      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x2c>
 80059e4:	b11b      	cbz	r3, 80059ee <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 80059e6:	483c      	ldr	r0, [pc, #240]	@ (8005ad8 <HAL_RCC_GetSysClockFreq+0x104>)
 80059e8:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059ea:	483c      	ldr	r0, [pc, #240]	@ (8005adc <HAL_RCC_GetSysClockFreq+0x108>)
 80059ec:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	0699      	lsls	r1, r3, #26
 80059f2:	d548      	bpl.n	8005a86 <HAL_RCC_GetSysClockFreq+0xb2>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059f4:	6813      	ldr	r3, [r2, #0]
 80059f6:	483a      	ldr	r0, [pc, #232]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80059f8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80059fc:	40d8      	lsrs	r0, r3
 80059fe:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a00:	6a93      	ldr	r3, [r2, #40]	@ 0x28
{
 8005a02:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a04:	6a94      	ldr	r4, [r2, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a06:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
      if (pllm != 0U)
 8005a08:	f414 7f7c 	tst.w	r4, #1008	@ 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a0c:	6b51      	ldr	r1, [r2, #52]	@ 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005a0e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8005a12:	d036      	beq.n	8005a82 <HAL_RCC_GetSysClockFreq+0xae>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a14:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005a18:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005a1c:	f003 0303 	and.w	r3, r3, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a20:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005a24:	fb05 f101 	mul.w	r1, r5, r1
 8005a28:	2b01      	cmp	r3, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a2e:	ee06 1a90 	vmov	s13, r1
 8005a32:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 8005a36:	d002      	beq.n	8005a3e <HAL_RCC_GetSysClockFreq+0x6a>
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d026      	beq.n	8005a8a <HAL_RCC_GetSysClockFreq+0xb6>
 8005a3c:	b343      	cbz	r3, 8005a90 <HAL_RCC_GetSysClockFreq+0xbc>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a3e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005ae4 <HAL_RCC_GetSysClockFreq+0x110>
 8005a42:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8005a46:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4c:	ee07 3a10 	vmov	s14, r3
 8005a50:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8005a54:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a58:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005a5c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005a60:	ee27 7a06 	vmul.f32	s14, s14, s12
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005a64:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a68:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8005a6c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005a6e:	ee07 3a90 	vmov	s15, r3
 8005a72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7e:	ee17 0a90 	vmov	r0, s15
}
 8005a82:	bc30      	pop	{r4, r5}
 8005a84:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a86:	4816      	ldr	r0, [pc, #88]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0x10c>)
}
 8005a88:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a8a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005ae8 <HAL_RCC_GetSysClockFreq+0x114>
 8005a8e:	e7d8      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a90:	6813      	ldr	r3, [r2, #0]
 8005a92:	069b      	lsls	r3, r3, #26
 8005a94:	d51a      	bpl.n	8005acc <HAL_RCC_GetSysClockFreq+0xf8>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a96:	6810      	ldr	r0, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a9c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a9e:	4910      	ldr	r1, [pc, #64]	@ (8005ae0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005aa0:	f3c0 02c1 	ubfx	r2, r0, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aa8:	40d1      	lsrs	r1, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aaa:	ee06 3a10 	vmov	s12, r3
 8005aae:	ee05 1a90 	vmov	s11, r1
 8005ab2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8005ab6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005aba:	ee36 6a07 	vadd.f32	s12, s12, s14
 8005abe:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8005ac2:	ee76 7a26 	vadd.f32	s15, s12, s13
 8005ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005aca:	e7cb      	b.n	8005a64 <HAL_RCC_GetSysClockFreq+0x90>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005acc:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005aec <HAL_RCC_GetSysClockFreq+0x118>
 8005ad0:	e7b7      	b.n	8005a42 <HAL_RCC_GetSysClockFreq+0x6e>
 8005ad2:	bf00      	nop
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	003d0900 	.word	0x003d0900
 8005adc:	017d7840 	.word	0x017d7840
 8005ae0:	03d09000 	.word	0x03d09000
 8005ae4:	4a742400 	.word	0x4a742400
 8005ae8:	4bbebc20 	.word	0x4bbebc20
 8005aec:	4c742400 	.word	0x4c742400

08005af0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005af0:	2800      	cmp	r0, #0
 8005af2:	f000 810e 	beq.w	8005d12 <HAL_RCC_ClockConfig+0x222>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af6:	4a8d      	ldr	r2, [pc, #564]	@ (8005d2c <HAL_RCC_ClockConfig+0x23c>)
 8005af8:	6813      	ldr	r3, [r2, #0]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	428b      	cmp	r3, r1
{
 8005b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b04:	4604      	mov	r4, r0
 8005b06:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b08:	d20c      	bcs.n	8005b24 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	6813      	ldr	r3, [r2, #0]
 8005b0c:	f023 030f 	bic.w	r3, r3, #15
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b14:	6813      	ldr	r3, [r2, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	428b      	cmp	r3, r1
 8005b1c:	d002      	beq.n	8005b24 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005b1e:	2001      	movs	r0, #1
}
 8005b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	0758      	lsls	r0, r3, #29
 8005b28:	d50b      	bpl.n	8005b42 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b2a:	4981      	ldr	r1, [pc, #516]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b2c:	6920      	ldr	r0, [r4, #16]
 8005b2e:	698a      	ldr	r2, [r1, #24]
 8005b30:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005b34:	4290      	cmp	r0, r2
 8005b36:	d904      	bls.n	8005b42 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b38:	698a      	ldr	r2, [r1, #24]
 8005b3a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b3e:	4302      	orrs	r2, r0
 8005b40:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b42:	0719      	lsls	r1, r3, #28
 8005b44:	d50b      	bpl.n	8005b5e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b46:	497a      	ldr	r1, [pc, #488]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b48:	6960      	ldr	r0, [r4, #20]
 8005b4a:	69ca      	ldr	r2, [r1, #28]
 8005b4c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005b50:	4290      	cmp	r0, r2
 8005b52:	d904      	bls.n	8005b5e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b54:	69ca      	ldr	r2, [r1, #28]
 8005b56:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b5a:	4302      	orrs	r2, r0
 8005b5c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b5e:	06da      	lsls	r2, r3, #27
 8005b60:	d50b      	bpl.n	8005b7a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b62:	4973      	ldr	r1, [pc, #460]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b64:	69a0      	ldr	r0, [r4, #24]
 8005b66:	69ca      	ldr	r2, [r1, #28]
 8005b68:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005b6c:	4290      	cmp	r0, r2
 8005b6e:	d904      	bls.n	8005b7a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b70:	69ca      	ldr	r2, [r1, #28]
 8005b72:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b76:	4302      	orrs	r2, r0
 8005b78:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b7a:	069f      	lsls	r7, r3, #26
 8005b7c:	d50b      	bpl.n	8005b96 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b7e:	496c      	ldr	r1, [pc, #432]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005b80:	69e0      	ldr	r0, [r4, #28]
 8005b82:	6a0a      	ldr	r2, [r1, #32]
 8005b84:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005b88:	4290      	cmp	r0, r2
 8005b8a:	d904      	bls.n	8005b96 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005b8c:	6a0a      	ldr	r2, [r1, #32]
 8005b8e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005b92:	4302      	orrs	r2, r0
 8005b94:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b96:	079e      	lsls	r6, r3, #30
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b98:	f003 0201 	and.w	r2, r3, #1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b9c:	f140 80ab 	bpl.w	8005cf6 <HAL_RCC_ClockConfig+0x206>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ba0:	4e63      	ldr	r6, [pc, #396]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005ba2:	68e0      	ldr	r0, [r4, #12]
 8005ba4:	69b1      	ldr	r1, [r6, #24]
 8005ba6:	f001 010f 	and.w	r1, r1, #15
 8005baa:	4288      	cmp	r0, r1
 8005bac:	d904      	bls.n	8005bb8 <HAL_RCC_ClockConfig+0xc8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bae:	69b1      	ldr	r1, [r6, #24]
 8005bb0:	f021 010f 	bic.w	r1, r1, #15
 8005bb4:	4301      	orrs	r1, r0
 8005bb6:	61b1      	str	r1, [r6, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	d030      	beq.n	8005c1e <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bbc:	4a5c      	ldr	r2, [pc, #368]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005bbe:	68a1      	ldr	r1, [r4, #8]
 8005bc0:	6993      	ldr	r3, [r2, #24]
 8005bc2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005bc6:	430b      	orrs	r3, r1
 8005bc8:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bca:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bcc:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bce:	2902      	cmp	r1, #2
 8005bd0:	f000 80a1 	beq.w	8005d16 <HAL_RCC_ClockConfig+0x226>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bd4:	2903      	cmp	r1, #3
 8005bd6:	f000 8098 	beq.w	8005d0a <HAL_RCC_ClockConfig+0x21a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bda:	2901      	cmp	r1, #1
 8005bdc:	f000 80a1 	beq.w	8005d22 <HAL_RCC_ClockConfig+0x232>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be0:	075f      	lsls	r7, r3, #29
 8005be2:	d59c      	bpl.n	8005b1e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005be4:	4e52      	ldr	r6, [pc, #328]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005be6:	f241 3888 	movw	r8, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bea:	6933      	ldr	r3, [r6, #16]
 8005bec:	f023 0307 	bic.w	r3, r3, #7
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8005bf4:	f7fc fc54 	bl	80024a0 <HAL_GetTick>
 8005bf8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfa:	e005      	b.n	8005c08 <HAL_RCC_ClockConfig+0x118>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfc:	f7fc fc50 	bl	80024a0 <HAL_GetTick>
 8005c00:	1bc0      	subs	r0, r0, r7
 8005c02:	4540      	cmp	r0, r8
 8005c04:	f200 808b 	bhi.w	8005d1e <HAL_RCC_ClockConfig+0x22e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c08:	6933      	ldr	r3, [r6, #16]
 8005c0a:	6862      	ldr	r2, [r4, #4]
 8005c0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c10:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005c14:	d1f2      	bne.n	8005bfc <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c16:	6823      	ldr	r3, [r4, #0]
 8005c18:	079e      	lsls	r6, r3, #30
 8005c1a:	d506      	bpl.n	8005c2a <HAL_RCC_ClockConfig+0x13a>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c1c:	68e0      	ldr	r0, [r4, #12]
 8005c1e:	4944      	ldr	r1, [pc, #272]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005c20:	698a      	ldr	r2, [r1, #24]
 8005c22:	f002 020f 	and.w	r2, r2, #15
 8005c26:	4282      	cmp	r2, r0
 8005c28:	d869      	bhi.n	8005cfe <HAL_RCC_ClockConfig+0x20e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c2a:	4940      	ldr	r1, [pc, #256]	@ (8005d2c <HAL_RCC_ClockConfig+0x23c>)
 8005c2c:	680a      	ldr	r2, [r1, #0]
 8005c2e:	f002 020f 	and.w	r2, r2, #15
 8005c32:	42aa      	cmp	r2, r5
 8005c34:	d90a      	bls.n	8005c4c <HAL_RCC_ClockConfig+0x15c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c36:	680a      	ldr	r2, [r1, #0]
 8005c38:	f022 020f 	bic.w	r2, r2, #15
 8005c3c:	432a      	orrs	r2, r5
 8005c3e:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c40:	680a      	ldr	r2, [r1, #0]
 8005c42:	f002 020f 	and.w	r2, r2, #15
 8005c46:	42aa      	cmp	r2, r5
 8005c48:	f47f af69 	bne.w	8005b1e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c4c:	0758      	lsls	r0, r3, #29
 8005c4e:	d50b      	bpl.n	8005c68 <HAL_RCC_ClockConfig+0x178>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c50:	4937      	ldr	r1, [pc, #220]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005c52:	6920      	ldr	r0, [r4, #16]
 8005c54:	698a      	ldr	r2, [r1, #24]
 8005c56:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005c5a:	4290      	cmp	r0, r2
 8005c5c:	d204      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x178>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c5e:	698a      	ldr	r2, [r1, #24]
 8005c60:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c64:	4302      	orrs	r2, r0
 8005c66:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c68:	0719      	lsls	r1, r3, #28
 8005c6a:	d50b      	bpl.n	8005c84 <HAL_RCC_ClockConfig+0x194>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c6c:	4930      	ldr	r1, [pc, #192]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005c6e:	6960      	ldr	r0, [r4, #20]
 8005c70:	69ca      	ldr	r2, [r1, #28]
 8005c72:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8005c76:	4290      	cmp	r0, r2
 8005c78:	d204      	bcs.n	8005c84 <HAL_RCC_ClockConfig+0x194>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c7a:	69ca      	ldr	r2, [r1, #28]
 8005c7c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005c80:	4302      	orrs	r2, r0
 8005c82:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c84:	06da      	lsls	r2, r3, #27
 8005c86:	d50b      	bpl.n	8005ca0 <HAL_RCC_ClockConfig+0x1b0>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c88:	4929      	ldr	r1, [pc, #164]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005c8a:	69a0      	ldr	r0, [r4, #24]
 8005c8c:	69ca      	ldr	r2, [r1, #28]
 8005c8e:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8005c92:	4290      	cmp	r0, r2
 8005c94:	d204      	bcs.n	8005ca0 <HAL_RCC_ClockConfig+0x1b0>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c96:	69ca      	ldr	r2, [r1, #28]
 8005c98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c9c:	4302      	orrs	r2, r0
 8005c9e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ca0:	069b      	lsls	r3, r3, #26
 8005ca2:	d50b      	bpl.n	8005cbc <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ca4:	4a22      	ldr	r2, [pc, #136]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005ca6:	69e1      	ldr	r1, [r4, #28]
 8005ca8:	6a13      	ldr	r3, [r2, #32]
 8005caa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005cae:	4299      	cmp	r1, r3
 8005cb0:	d204      	bcs.n	8005cbc <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005cb2:	6a13      	ldr	r3, [r2, #32]
 8005cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cbc:	f7ff fe8a 	bl	80059d4 <HAL_RCC_GetSysClockFreq>
 8005cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d30 <HAL_RCC_ClockConfig+0x240>)
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	481b      	ldr	r0, [pc, #108]	@ (8005d34 <HAL_RCC_ClockConfig+0x244>)
 8005cc6:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cc8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cca:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8005cce:	4d1a      	ldr	r5, [pc, #104]	@ (8005d38 <HAL_RCC_ClockConfig+0x248>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cd0:	f002 020f 	and.w	r2, r2, #15
 8005cd4:	4c19      	ldr	r4, [pc, #100]	@ (8005d3c <HAL_RCC_ClockConfig+0x24c>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cd6:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cd8:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005cda:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8005cde:	4818      	ldr	r0, [pc, #96]	@ (8005d40 <HAL_RCC_ClockConfig+0x250>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ce0:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ce4:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8005ce6:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8005ce8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cea:	40d3      	lsrs	r3, r2
 8005cec:	6023      	str	r3, [r4, #0]
}
 8005cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8005cf2:	f7fc bb73 	b.w	80023dc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	f47f af60 	bne.w	8005bbc <HAL_RCC_ClockConfig+0xcc>
 8005cfc:	e795      	b.n	8005c2a <HAL_RCC_ClockConfig+0x13a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cfe:	698a      	ldr	r2, [r1, #24]
 8005d00:	f022 020f 	bic.w	r2, r2, #15
 8005d04:	4302      	orrs	r2, r0
 8005d06:	618a      	str	r2, [r1, #24]
 8005d08:	e78f      	b.n	8005c2a <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d0a:	019a      	lsls	r2, r3, #6
 8005d0c:	f53f af6a 	bmi.w	8005be4 <HAL_RCC_ClockConfig+0xf4>
 8005d10:	e705      	b.n	8005b1e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005d12:	2001      	movs	r0, #1
}
 8005d14:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d16:	0398      	lsls	r0, r3, #14
 8005d18:	f53f af64 	bmi.w	8005be4 <HAL_RCC_ClockConfig+0xf4>
 8005d1c:	e6ff      	b.n	8005b1e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8005d1e:	2003      	movs	r0, #3
 8005d20:	e6fe      	b.n	8005b20 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d22:	05db      	lsls	r3, r3, #23
 8005d24:	f53f af5e 	bmi.w	8005be4 <HAL_RCC_ClockConfig+0xf4>
 8005d28:	e6f9      	b.n	8005b1e <HAL_RCC_ClockConfig+0x2e>
 8005d2a:	bf00      	nop
 8005d2c:	52002000 	.word	0x52002000
 8005d30:	58024400 	.word	0x58024400
 8005d34:	0800e130 	.word	0x0800e130
 8005d38:	24002068 	.word	0x24002068
 8005d3c:	24002064 	.word	0x24002064
 8005d40:	24002070 	.word	0x24002070

08005d44 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d44:	4a18      	ldr	r2, [pc, #96]	@ (8005da8 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d46:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d48:	6913      	ldr	r3, [r2, #16]
 8005d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d019      	beq.n	8005d86 <HAL_RCC_GetHCLKFreq+0x42>
 8005d52:	2b18      	cmp	r3, #24
 8005d54:	d022      	beq.n	8005d9c <HAL_RCC_GetHCLKFreq+0x58>
 8005d56:	b1c3      	cbz	r3, 8005d8a <HAL_RCC_GetHCLKFreq+0x46>
      sysclockfreq = CSI_VALUE;
 8005d58:	4b14      	ldr	r3, [pc, #80]	@ (8005dac <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d5a:	4913      	ldr	r1, [pc, #76]	@ (8005da8 <HAL_RCC_GetHCLKFreq+0x64>)
 8005d5c:	4814      	ldr	r0, [pc, #80]	@ (8005db0 <HAL_RCC_GetHCLKFreq+0x6c>)
 8005d5e:	698a      	ldr	r2, [r1, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d60:	6989      	ldr	r1, [r1, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d62:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d66:	4c13      	ldr	r4, [pc, #76]	@ (8005db4 <HAL_RCC_GetHCLKFreq+0x70>)
 8005d68:	f001 010f 	and.w	r1, r1, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d6c:	4d12      	ldr	r5, [pc, #72]	@ (8005db8 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d6e:	5c82      	ldrb	r2, [r0, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d70:	5c40      	ldrb	r0, [r0, r1]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d72:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d76:	f000 001f 	and.w	r0, r0, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005d7a:	40d3      	lsrs	r3, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d7c:	fa23 f000 	lsr.w	r0, r3, r0
  SystemCoreClock = common_system_clock;
 8005d80:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d82:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005d84:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d86:	4b0d      	ldr	r3, [pc, #52]	@ (8005dbc <HAL_RCC_GetHCLKFreq+0x78>)
 8005d88:	e7e7      	b.n	8005d5a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	069b      	lsls	r3, r3, #26
 8005d8e:	d509      	bpl.n	8005da4 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d90:	6812      	ldr	r2, [r2, #0]
 8005d92:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005d94:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005d98:	40d3      	lsrs	r3, r2
 8005d9a:	e7de      	b.n	8005d5a <HAL_RCC_GetHCLKFreq+0x16>
 8005d9c:	f7ff fab6 	bl	800530c <HAL_RCC_GetSysClockFreq.part.0>
 8005da0:	4603      	mov	r3, r0
 8005da2:	e7da      	b.n	8005d5a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005da4:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <HAL_RCC_GetHCLKFreq+0x7c>)
 8005da6:	e7d8      	b.n	8005d5a <HAL_RCC_GetHCLKFreq+0x16>
 8005da8:	58024400 	.word	0x58024400
 8005dac:	003d0900 	.word	0x003d0900
 8005db0:	0800e130 	.word	0x0800e130
 8005db4:	24002064 	.word	0x24002064
 8005db8:	24002068 	.word	0x24002068
 8005dbc:	017d7840 	.word	0x017d7840
 8005dc0:	03d09000 	.word	0x03d09000

08005dc4 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005e38 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dc6:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dc8:	6913      	ldr	r3, [r2, #16]
 8005dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dce:	2b10      	cmp	r3, #16
 8005dd0:	d020      	beq.n	8005e14 <HAL_RCC_GetPCLK1Freq+0x50>
 8005dd2:	2b18      	cmp	r3, #24
 8005dd4:	d029      	beq.n	8005e2a <HAL_RCC_GetPCLK1Freq+0x66>
 8005dd6:	b1fb      	cbz	r3, 8005e18 <HAL_RCC_GetPCLK1Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8005dd8:	4b18      	ldr	r3, [pc, #96]	@ (8005e3c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dda:	4a17      	ldr	r2, [pc, #92]	@ (8005e38 <HAL_RCC_GetPCLK1Freq+0x74>)
 8005ddc:	4918      	ldr	r1, [pc, #96]	@ (8005e40 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8005dde:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8005de0:	4d18      	ldr	r5, [pc, #96]	@ (8005e44 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005de2:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005de6:	4c18      	ldr	r4, [pc, #96]	@ (8005e48 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005de8:	5c08      	ldrb	r0, [r1, r0]
 8005dea:	f000 001f 	and.w	r0, r0, #31
 8005dee:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df0:	6990      	ldr	r0, [r2, #24]
 8005df2:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005df6:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005df8:	5c08      	ldrb	r0, [r1, r0]
 8005dfa:	f000 001f 	and.w	r0, r0, #31
 8005dfe:	40c3      	lsrs	r3, r0
 8005e00:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e02:	69d2      	ldr	r2, [r2, #28]
 8005e04:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8005e08:	5c88      	ldrb	r0, [r1, r2]
 8005e0a:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e0e:	fa23 f000 	lsr.w	r0, r3, r0
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e14:	4b0d      	ldr	r3, [pc, #52]	@ (8005e4c <HAL_RCC_GetPCLK1Freq+0x88>)
 8005e16:	e7e0      	b.n	8005dda <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e18:	6813      	ldr	r3, [r2, #0]
 8005e1a:	069b      	lsls	r3, r3, #26
 8005e1c:	d509      	bpl.n	8005e32 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e1e:	6812      	ldr	r2, [r2, #0]
 8005e20:	4b0b      	ldr	r3, [pc, #44]	@ (8005e50 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8005e22:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005e26:	40d3      	lsrs	r3, r2
 8005e28:	e7d7      	b.n	8005dda <HAL_RCC_GetPCLK1Freq+0x16>
 8005e2a:	f7ff fa6f 	bl	800530c <HAL_RCC_GetSysClockFreq.part.0>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	e7d3      	b.n	8005dda <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e32:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8005e34:	e7d1      	b.n	8005dda <HAL_RCC_GetPCLK1Freq+0x16>
 8005e36:	bf00      	nop
 8005e38:	58024400 	.word	0x58024400
 8005e3c:	003d0900 	.word	0x003d0900
 8005e40:	0800e130 	.word	0x0800e130
 8005e44:	24002068 	.word	0x24002068
 8005e48:	24002064 	.word	0x24002064
 8005e4c:	017d7840 	.word	0x017d7840
 8005e50:	03d09000 	.word	0x03d09000

08005e54 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e54:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec8 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e56:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e58:	6913      	ldr	r3, [r2, #16]
 8005e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e5e:	2b10      	cmp	r3, #16
 8005e60:	d020      	beq.n	8005ea4 <HAL_RCC_GetPCLK2Freq+0x50>
 8005e62:	2b18      	cmp	r3, #24
 8005e64:	d029      	beq.n	8005eba <HAL_RCC_GetPCLK2Freq+0x66>
 8005e66:	b1fb      	cbz	r3, 8005ea8 <HAL_RCC_GetPCLK2Freq+0x54>
      sysclockfreq = CSI_VALUE;
 8005e68:	4b18      	ldr	r3, [pc, #96]	@ (8005ecc <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e6a:	4a17      	ldr	r2, [pc, #92]	@ (8005ec8 <HAL_RCC_GetPCLK2Freq+0x74>)
 8005e6c:	4918      	ldr	r1, [pc, #96]	@ (8005ed0 <HAL_RCC_GetPCLK2Freq+0x7c>)
 8005e6e:	6990      	ldr	r0, [r2, #24]
  SystemCoreClock = common_system_clock;
 8005e70:	4d18      	ldr	r5, [pc, #96]	@ (8005ed4 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e72:	f3c0 2003 	ubfx	r0, r0, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e76:	4c18      	ldr	r4, [pc, #96]	@ (8005ed8 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005e78:	5c08      	ldrb	r0, [r1, r0]
 8005e7a:	f000 001f 	and.w	r0, r0, #31
 8005e7e:	40c3      	lsrs	r3, r0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e80:	6990      	ldr	r0, [r2, #24]
 8005e82:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 8005e86:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e88:	5c08      	ldrb	r0, [r1, r0]
 8005e8a:	f000 001f 	and.w	r0, r0, #31
 8005e8e:	40c3      	lsrs	r3, r0
 8005e90:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e92:	69d2      	ldr	r2, [r2, #28]
 8005e94:	f3c2 2202 	ubfx	r2, r2, #8, #3
 8005e98:	5c88      	ldrb	r0, [r1, r2]
 8005e9a:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e9e:	fa23 f000 	lsr.w	r0, r3, r0
 8005ea2:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8005edc <HAL_RCC_GetPCLK2Freq+0x88>)
 8005ea6:	e7e0      	b.n	8005e6a <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ea8:	6813      	ldr	r3, [r2, #0]
 8005eaa:	069b      	lsls	r3, r3, #26
 8005eac:	d509      	bpl.n	8005ec2 <HAL_RCC_GetPCLK2Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8005eb2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005eb6:	40d3      	lsrs	r3, r2
 8005eb8:	e7d7      	b.n	8005e6a <HAL_RCC_GetPCLK2Freq+0x16>
 8005eba:	f7ff fa27 	bl	800530c <HAL_RCC_GetSysClockFreq.part.0>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	e7d3      	b.n	8005e6a <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ec2:	4b07      	ldr	r3, [pc, #28]	@ (8005ee0 <HAL_RCC_GetPCLK2Freq+0x8c>)
 8005ec4:	e7d1      	b.n	8005e6a <HAL_RCC_GetPCLK2Freq+0x16>
 8005ec6:	bf00      	nop
 8005ec8:	58024400 	.word	0x58024400
 8005ecc:	003d0900 	.word	0x003d0900
 8005ed0:	0800e130 	.word	0x0800e130
 8005ed4:	24002068 	.word	0x24002068
 8005ed8:	24002064 	.word	0x24002064
 8005edc:	017d7840 	.word	0x017d7840
 8005ee0:	03d09000 	.word	0x03d09000

08005ee4 <RCCEx_PLL2_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8005ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ee6:	4c36      	ldr	r4, [pc, #216]	@ (8005fc0 <RCCEx_PLL2_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8005ee8:	4606      	mov	r6, r0
 8005eea:	460f      	mov	r7, r1
    __HAL_RCC_PLL2_DISABLE();
 8005eec:	6823      	ldr	r3, [r4, #0]
 8005eee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ef2:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef4:	f7fc fad4 	bl	80024a0 <HAL_GetTick>
 8005ef8:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005efa:	e004      	b.n	8005f06 <RCCEx_PLL2_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005efc:	f7fc fad0 	bl	80024a0 <HAL_GetTick>
 8005f00:	1b40      	subs	r0, r0, r5
 8005f02:	2802      	cmp	r0, #2
 8005f04:	d856      	bhi.n	8005fb4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	011a      	lsls	r2, r3, #4
 8005f0a:	d4f7      	bmi.n	8005efc <RCCEx_PLL2_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f0c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f0e:	6832      	ldr	r2, [r6, #0]
 8005f10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f14:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8005f18:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f1a:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	3a01      	subs	r2, #1
 8005f22:	025b      	lsls	r3, r3, #9
 8005f24:	0412      	lsls	r2, r2, #16
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	6872      	ldr	r2, [r6, #4]
 8005f30:	3a01      	subs	r2, #1
 8005f32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f36:	4313      	orrs	r3, r2
 8005f38:	6932      	ldr	r2, [r6, #16]
 8005f3a:	3a01      	subs	r2, #1
 8005f3c:	0612      	lsls	r2, r2, #24
 8005f3e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005f42:	4313      	orrs	r3, r2
 8005f44:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f46:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005f48:	6972      	ldr	r2, [r6, #20]
 8005f4a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005f54:	69b3      	ldr	r3, [r6, #24]
 8005f56:	f022 0220 	bic.w	r2, r2, #32
 8005f5a:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f5c:	4b19      	ldr	r3, [pc, #100]	@ (8005fc4 <RCCEx_PLL2_Config.part.0+0xe0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f5e:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f60:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005f62:	f022 0210 	bic.w	r2, r2, #16
 8005f66:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f68:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005f6a:	69f2      	ldr	r2, [r6, #28]
 8005f6c:	400b      	ands	r3, r1
 8005f6e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005f72:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f74:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005f76:	f043 0310 	orr.w	r3, r3, #16
 8005f7a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f7c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8005f7e:	b1df      	cbz	r7, 8005fb8 <RCCEx_PLL2_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005f80:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005f82:	bf0c      	ite	eq
 8005f84:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005f88:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8005f8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005fc0 <RCCEx_PLL2_Config.part.0+0xdc>)
 8005f90:	6823      	ldr	r3, [r4, #0]
 8005f92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f96:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f98:	f7fc fa82 	bl	80024a0 <HAL_GetTick>
 8005f9c:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005f9e:	e004      	b.n	8005faa <RCCEx_PLL2_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fa0:	f7fc fa7e 	bl	80024a0 <HAL_GetTick>
 8005fa4:	1b40      	subs	r0, r0, r5
 8005fa6:	2802      	cmp	r0, #2
 8005fa8:	d804      	bhi.n	8005fb4 <RCCEx_PLL2_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	d5f7      	bpl.n	8005fa0 <RCCEx_PLL2_Config.part.0+0xbc>
    }

  }


  return status;
 8005fb0:	2000      	movs	r0, #0
}
 8005fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8005fb4:	2003      	movs	r0, #3
}
 8005fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005fb8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005fbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005fbe:	e7e6      	b.n	8005f8e <RCCEx_PLL2_Config.part.0+0xaa>
 8005fc0:	58024400 	.word	0x58024400
 8005fc4:	ffff0007 	.word	0xffff0007

08005fc8 <RCCEx_PLL3_Config.part.0>:
  * @param  Divider  divider parameter to be updated
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005fca:	4c36      	ldr	r4, [pc, #216]	@ (80060a4 <RCCEx_PLL3_Config.part.0+0xdc>)
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
 8005fcc:	4606      	mov	r6, r0
 8005fce:	460f      	mov	r7, r1
    __HAL_RCC_PLL3_DISABLE();
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fd6:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd8:	f7fc fa62 	bl	80024a0 <HAL_GetTick>
 8005fdc:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fde:	e004      	b.n	8005fea <RCCEx_PLL3_Config.part.0+0x22>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005fe0:	f7fc fa5e 	bl	80024a0 <HAL_GetTick>
 8005fe4:	1b40      	subs	r0, r0, r5
 8005fe6:	2802      	cmp	r0, #2
 8005fe8:	d856      	bhi.n	8006098 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	009a      	lsls	r2, r3, #2
 8005fee:	d4f7      	bmi.n	8005fe0 <RCCEx_PLL3_Config.part.0+0x18>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ff0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ff2:	6832      	ldr	r2, [r6, #0]
 8005ff4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005ff8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8005ffc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ffe:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8006002:	3b01      	subs	r3, #1
 8006004:	3a01      	subs	r2, #1
 8006006:	025b      	lsls	r3, r3, #9
 8006008:	0412      	lsls	r2, r2, #16
 800600a:	b29b      	uxth	r3, r3
 800600c:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006010:	4313      	orrs	r3, r2
 8006012:	6872      	ldr	r2, [r6, #4]
 8006014:	3a01      	subs	r2, #1
 8006016:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800601a:	4313      	orrs	r3, r2
 800601c:	6932      	ldr	r2, [r6, #16]
 800601e:	3a01      	subs	r2, #1
 8006020:	0612      	lsls	r2, r2, #24
 8006022:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006026:	4313      	orrs	r3, r2
 8006028:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800602a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800602c:	6972      	ldr	r2, [r6, #20]
 800602e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006032:	4313      	orrs	r3, r2
 8006034:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006036:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006038:	69b3      	ldr	r3, [r6, #24]
 800603a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800603e:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006040:	4b19      	ldr	r3, [pc, #100]	@ (80060a8 <RCCEx_PLL3_Config.part.0+0xe0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006042:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006044:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006046:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800604a:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800604c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800604e:	69f2      	ldr	r2, [r6, #28]
 8006050:	400b      	ands	r3, r1
 8006052:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006056:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006058:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800605a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800605e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006060:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006062:	b1df      	cbz	r7, 800609c <RCCEx_PLL3_Config.part.0+0xd4>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006064:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006066:	bf0c      	ite	eq
 8006068:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800606c:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8006070:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006072:	4c0c      	ldr	r4, [pc, #48]	@ (80060a4 <RCCEx_PLL3_Config.part.0+0xdc>)
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800607a:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800607c:	f7fc fa10 	bl	80024a0 <HAL_GetTick>
 8006080:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006082:	e004      	b.n	800608e <RCCEx_PLL3_Config.part.0+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006084:	f7fc fa0c 	bl	80024a0 <HAL_GetTick>
 8006088:	1b40      	subs	r0, r0, r5
 800608a:	2802      	cmp	r0, #2
 800608c:	d804      	bhi.n	8006098 <RCCEx_PLL3_Config.part.0+0xd0>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	d5f7      	bpl.n	8006084 <RCCEx_PLL3_Config.part.0+0xbc>
    }

  }


  return status;
 8006094:	2000      	movs	r0, #0
}
 8006096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006098:	2003      	movs	r0, #3
}
 800609a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800609c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80060a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060a2:	e7e6      	b.n	8006072 <RCCEx_PLL3_Config.part.0+0xaa>
 80060a4:	58024400 	.word	0x58024400
 80060a8:	ffff0007 	.word	0xffff0007

080060ac <HAL_RCCEx_PeriphCLKConfig>:
{
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060b0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 80060b4:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060b6:	011d      	lsls	r5, r3, #4
 80060b8:	f003 6600 	and.w	r6, r3, #134217728	@ 0x8000000
 80060bc:	d525      	bpl.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80060be:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80060c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80060c4:	f000 8660 	beq.w	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80060c8:	d814      	bhi.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80060ca:	2900      	cmp	r1, #0
 80060cc:	f000 86fa 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe18>
 80060d0:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80060d4:	f040 8466 	bne.w	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060d8:	49ad      	ldr	r1, [pc, #692]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80060da:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80060dc:	f001 0103 	and.w	r1, r1, #3
 80060e0:	2903      	cmp	r1, #3
 80060e2:	f000 845f 	beq.w	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 80060e6:	2102      	movs	r1, #2
 80060e8:	3008      	adds	r0, #8
 80060ea:	f7ff fefb 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 80060ee:	4606      	mov	r6, r0
        break;
 80060f0:	f000 be56 	b.w	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xcf4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 80060f4:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 80060f8:	f040 8454 	bne.w	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060fc:	4da4      	ldr	r5, [pc, #656]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060fe:	2600      	movs	r6, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006100:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8006102:	f420 1040 	bic.w	r0, r0, #3145728	@ 0x300000
 8006106:	4301      	orrs	r1, r0
 8006108:	6529      	str	r1, [r5, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800610a:	05d8      	lsls	r0, r3, #23
 800610c:	d50a      	bpl.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x78>
    switch (PeriphClkInit->Sai1ClockSelection)
 800610e:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8006110:	2904      	cmp	r1, #4
 8006112:	d806      	bhi.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006114:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006118:	064c04a8 	.word	0x064c04a8
 800611c:	04ad0661 	.word	0x04ad0661
 8006120:	04ad      	.short	0x04ad
 8006122:	2601      	movs	r6, #1
 8006124:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006126:	0599      	lsls	r1, r3, #22
 8006128:	d524      	bpl.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800612a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800612c:	2980      	cmp	r1, #128	@ 0x80
 800612e:	f000 8664 	beq.w	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8006132:	f200 8122 	bhi.w	800637a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8006136:	2900      	cmp	r1, #0
 8006138:	f000 84ac 	beq.w	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800613c:	2940      	cmp	r1, #64	@ 0x40
 800613e:	f040 8123 	bne.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006142:	4993      	ldr	r1, [pc, #588]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006144:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006146:	f001 0103 	and.w	r1, r1, #3
 800614a:	2903      	cmp	r1, #3
 800614c:	f000 811c 	beq.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006150:	2100      	movs	r1, #0
 8006152:	f104 0008 	add.w	r0, r4, #8
 8006156:	f7ff fec5 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 800615a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800615c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006160:	2d00      	cmp	r5, #0
 8006162:	f040 851b 	bne.w	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006166:	4f8a      	ldr	r7, [pc, #552]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006168:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800616a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800616c:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8006170:	4301      	orrs	r1, r0
 8006172:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006174:	055f      	lsls	r7, r3, #21
 8006176:	d528      	bpl.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4AClockSelection)
 8006178:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
 800617c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8006180:	f000 864f 	beq.w	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xd76>
 8006184:	f200 8106 	bhi.w	8006394 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8006188:	2900      	cmp	r1, #0
 800618a:	f000 8463 	beq.w	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
 800618e:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006192:	f040 8107 	bne.w	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006196:	497e      	ldr	r1, [pc, #504]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006198:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800619a:	f001 0103 	and.w	r1, r1, #3
 800619e:	2903      	cmp	r1, #3
 80061a0:	f000 8100 	beq.w	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 80061a4:	2100      	movs	r1, #0
 80061a6:	f104 0008 	add.w	r0, r4, #8
 80061aa:	f7ff fe9b 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 80061ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80061b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80061b4:	2d00      	cmp	r5, #0
 80061b6:	f040 84f4 	bne.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80061ba:	4f75      	ldr	r7, [pc, #468]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80061bc:	f8d4 00a8 	ldr.w	r0, [r4, #168]	@ 0xa8
 80061c0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80061c2:	f421 0160 	bic.w	r1, r1, #14680064	@ 0xe00000
 80061c6:	4301      	orrs	r1, r0
 80061c8:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80061ca:	0518      	lsls	r0, r3, #20
 80061cc:	d528      	bpl.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->Sai4BClockSelection)
 80061ce:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 80061d2:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80061d6:	f000 85ac 	beq.w	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xc86>
 80061da:	f200 80e6 	bhi.w	80063aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 80061de:	2900      	cmp	r1, #0
 80061e0:	f000 8425 	beq.w	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x982>
 80061e4:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80061e8:	f040 80e7 	bne.w	80063ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061ec:	4968      	ldr	r1, [pc, #416]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80061ee:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80061f0:	f001 0103 	and.w	r1, r1, #3
 80061f4:	2903      	cmp	r1, #3
 80061f6:	f000 80e0 	beq.w	80063ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
 80061fa:	2100      	movs	r1, #0
 80061fc:	f104 0008 	add.w	r0, r4, #8
 8006200:	f7ff fe70 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006204:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006206:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800620a:	2d00      	cmp	r5, #0
 800620c:	f040 84cc 	bne.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006210:	4f5f      	ldr	r7, [pc, #380]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006212:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 8006216:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006218:	f021 61e0 	bic.w	r1, r1, #117440512	@ 0x7000000
 800621c:	4301      	orrs	r1, r0
 800621e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006220:	0199      	lsls	r1, r3, #6
 8006222:	d518      	bpl.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->QspiClockSelection)
 8006224:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8006226:	2920      	cmp	r1, #32
 8006228:	f000 84ff 	beq.w	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
 800622c:	f200 80c8 	bhi.w	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8006230:	b139      	cbz	r1, 8006242 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006232:	2910      	cmp	r1, #16
 8006234:	f040 80c7 	bne.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006238:	4855      	ldr	r0, [pc, #340]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800623a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800623c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006240:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006242:	2d00      	cmp	r5, #0
 8006244:	f040 849f 	bne.w	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xada>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006248:	4f51      	ldr	r7, [pc, #324]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800624a:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800624c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800624e:	f021 0130 	bic.w	r1, r1, #48	@ 0x30
 8006252:	4301      	orrs	r1, r0
 8006254:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006256:	04df      	lsls	r7, r3, #19
 8006258:	d526      	bpl.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi123ClockSelection)
 800625a:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800625c:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006260:	f000 857b 	beq.w	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xcae>
 8006264:	f200 80b2 	bhi.w	80063cc <HAL_RCCEx_PeriphCLKConfig+0x320>
 8006268:	2900      	cmp	r1, #0
 800626a:	f000 83ea 	beq.w	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x996>
 800626e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006272:	f040 80b3 	bne.w	80063dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006276:	4946      	ldr	r1, [pc, #280]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006278:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800627a:	f001 0103 	and.w	r1, r1, #3
 800627e:	2903      	cmp	r1, #3
 8006280:	f000 80ac 	beq.w	80063dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006284:	2100      	movs	r1, #0
 8006286:	f104 0008 	add.w	r0, r4, #8
 800628a:	f7ff fe2b 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 800628e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006290:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006294:	2d00      	cmp	r5, #0
 8006296:	f040 848a 	bne.w	8006bae <HAL_RCCEx_PeriphCLKConfig+0xb02>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800629a:	4f3d      	ldr	r7, [pc, #244]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800629c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 800629e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062a0:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80062a4:	4301      	orrs	r1, r0
 80062a6:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80062a8:	0498      	lsls	r0, r3, #18
 80062aa:	d524      	bpl.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi45ClockSelection)
 80062ac:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80062ae:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 80062b2:	f000 8516 	beq.w	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xc36>
 80062b6:	f200 8094 	bhi.w	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80062ba:	b191      	cbz	r1, 80062e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80062bc:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 80062c0:	f040 8099 	bne.w	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062c4:	4932      	ldr	r1, [pc, #200]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062c6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80062c8:	f001 0103 	and.w	r1, r1, #3
 80062cc:	2903      	cmp	r1, #3
 80062ce:	f000 8092 	beq.w	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80062d2:	2101      	movs	r1, #1
 80062d4:	f104 0008 	add.w	r0, r4, #8
 80062d8:	f7ff fe04 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 80062dc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062de:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	f040 8476 	bne.w	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80062e8:	4f29      	ldr	r7, [pc, #164]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80062ea:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80062ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80062ee:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80062f2:	4301      	orrs	r1, r0
 80062f4:	6539      	str	r1, [r7, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062f6:	0459      	lsls	r1, r3, #17
 80062f8:	d523      	bpl.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch (PeriphClkInit->Spi6ClockSelection)
 80062fa:	f8d4 10b0 	ldr.w	r1, [r4, #176]	@ 0xb0
 80062fe:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006302:	f000 8502 	beq.w	8006d0a <HAL_RCCEx_PeriphCLKConfig+0xc5e>
 8006306:	d879      	bhi.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x350>
 8006308:	b181      	cbz	r1, 800632c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800630a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800630e:	d17d      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x360>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006310:	491f      	ldr	r1, [pc, #124]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006312:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006314:	f001 0103 	and.w	r1, r1, #3
 8006318:	2903      	cmp	r1, #3
 800631a:	d077      	beq.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800631c:	2101      	movs	r1, #1
 800631e:	f104 0008 	add.w	r0, r4, #8
 8006322:	f7ff fddf 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006326:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006328:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800632c:	2d00      	cmp	r5, #0
 800632e:	f040 8454 	bne.w	8006bda <HAL_RCCEx_PeriphCLKConfig+0xb2e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006332:	4f17      	ldr	r7, [pc, #92]	@ (8006390 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006334:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 8006338:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800633a:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 800633e:	4301      	orrs	r1, r0
 8006340:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006342:	041f      	lsls	r7, r3, #16
 8006344:	d50d      	bpl.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    switch (PeriphClkInit->FdcanClockSelection)
 8006346:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8006348:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 800634c:	f000 82e2 	beq.w	8006914 <HAL_RCCEx_PeriphCLKConfig+0x868>
 8006350:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006354:	f000 83f0 	beq.w	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xa8c>
 8006358:	2900      	cmp	r1, #0
 800635a:	f000 82e0 	beq.w	800691e <HAL_RCCEx_PeriphCLKConfig+0x872>
 800635e:	2601      	movs	r6, #1
 8006360:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006362:	01d8      	lsls	r0, r3, #7
 8006364:	d55e      	bpl.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x378>
    switch (PeriphClkInit->FmcClockSelection)
 8006366:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006368:	2903      	cmp	r1, #3
 800636a:	f200 85cd 	bhi.w	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800636e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006372:	0055      	.short	0x0055
 8006374:	04930050 	.word	0x04930050
 8006378:	0055      	.short	0x0055
    switch (PeriphClkInit->Sai23ClockSelection)
 800637a:	29c0      	cmp	r1, #192	@ 0xc0
 800637c:	f43f aef0 	beq.w	8006160 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006380:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006384:	f43f aeec 	beq.w	8006160 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8006388:	2601      	movs	r6, #1
 800638a:	4635      	mov	r5, r6
 800638c:	e6f2      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Sai4AClockSelection)
 8006394:	f5b1 0fc0 	cmp.w	r1, #6291456	@ 0x600000
 8006398:	f43f af0c 	beq.w	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 800639c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80063a0:	f43f af08 	beq.w	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 80063a4:	2601      	movs	r6, #1
 80063a6:	4635      	mov	r5, r6
 80063a8:	e70f      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
    switch (PeriphClkInit->Sai4BClockSelection)
 80063aa:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80063ae:	f43f af2c 	beq.w	800620a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80063b2:	f1b1 6f80 	cmp.w	r1, #67108864	@ 0x4000000
 80063b6:	f43f af28 	beq.w	800620a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80063ba:	2601      	movs	r6, #1
 80063bc:	4635      	mov	r5, r6
 80063be:	e72f      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch (PeriphClkInit->QspiClockSelection)
 80063c0:	2930      	cmp	r1, #48	@ 0x30
 80063c2:	f43f af3e 	beq.w	8006242 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063c6:	2601      	movs	r6, #1
 80063c8:	4635      	mov	r5, r6
 80063ca:	e744      	b.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    switch (PeriphClkInit->Spi123ClockSelection)
 80063cc:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 80063d0:	f43f af60 	beq.w	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80063d4:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80063d8:	f43f af5c 	beq.w	8006294 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80063dc:	2601      	movs	r6, #1
 80063de:	4635      	mov	r5, r6
 80063e0:	e762      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    switch (PeriphClkInit->Spi45ClockSelection)
 80063e2:	f421 3080 	bic.w	r0, r1, #65536	@ 0x10000
 80063e6:	f5b0 2f80 	cmp.w	r0, #262144	@ 0x40000
 80063ea:	f43f af7a 	beq.w	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80063ee:	f5b1 3f40 	cmp.w	r1, #196608	@ 0x30000
 80063f2:	f43f af76 	beq.w	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80063f6:	2601      	movs	r6, #1
 80063f8:	4635      	mov	r5, r6
 80063fa:	e77c      	b.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    switch (PeriphClkInit->Spi6ClockSelection)
 80063fc:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 8006400:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006404:	d092      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8006406:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 800640a:	d08f      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800640c:	2601      	movs	r6, #1
 800640e:	4635      	mov	r5, r6
 8006410:	e797      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x296>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006412:	4837      	ldr	r0, [pc, #220]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006414:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006416:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800641a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800641c:	2d00      	cmp	r5, #0
 800641e:	f000 83b5 	beq.w	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8006422:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006424:	0259      	lsls	r1, r3, #9
 8006426:	f100 82c0 	bmi.w	80069aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800642a:	07df      	lsls	r7, r3, #31
 800642c:	d52f      	bpl.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800642e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8006430:	2928      	cmp	r1, #40	@ 0x28
 8006432:	d82a      	bhi.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006434:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006438:	002902ab 	.word	0x002902ab
 800643c:	00290029 	.word	0x00290029
 8006440:	00290029 	.word	0x00290029
 8006444:	00290029 	.word	0x00290029
 8006448:	0029029c 	.word	0x0029029c
 800644c:	00290029 	.word	0x00290029
 8006450:	00290029 	.word	0x00290029
 8006454:	00290029 	.word	0x00290029
 8006458:	0029052d 	.word	0x0029052d
 800645c:	00290029 	.word	0x00290029
 8006460:	00290029 	.word	0x00290029
 8006464:	00290029 	.word	0x00290029
 8006468:	002902ab 	.word	0x002902ab
 800646c:	00290029 	.word	0x00290029
 8006470:	00290029 	.word	0x00290029
 8006474:	00290029 	.word	0x00290029
 8006478:	002902ab 	.word	0x002902ab
 800647c:	00290029 	.word	0x00290029
 8006480:	00290029 	.word	0x00290029
 8006484:	00290029 	.word	0x00290029
 8006488:	02ab      	.short	0x02ab
 800648a:	2601      	movs	r6, #1
 800648c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800648e:	0798      	lsls	r0, r3, #30
 8006490:	d51e      	bpl.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006492:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8006494:	2905      	cmp	r1, #5
 8006496:	f200 851c 	bhi.w	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 800649a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800649e:	0015      	.short	0x0015
 80064a0:	04e80006 	.word	0x04e80006
 80064a4:	00150015 	.word	0x00150015
 80064a8:	0015      	.short	0x0015
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064aa:	4911      	ldr	r1, [pc, #68]	@ (80064f0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80064ac:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80064ae:	f001 0103 	and.w	r1, r1, #3
 80064b2:	2903      	cmp	r1, #3
 80064b4:	f000 850d 	beq.w	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 80064b8:	2101      	movs	r1, #1
 80064ba:	f104 0008 	add.w	r0, r4, #8
 80064be:	f7ff fd11 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 80064c2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064c4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	f000 837b 	beq.w	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
 80064ce:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064d0:	0759      	lsls	r1, r3, #29
 80064d2:	d522      	bpl.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80064d4:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 80064d8:	2905      	cmp	r1, #5
 80064da:	f200 84fe 	bhi.w	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 80064de:	e8df f011 	tbh	[pc, r1, lsl #1]
 80064e2:	0018      	.short	0x0018
 80064e4:	04b40009 	.word	0x04b40009
 80064e8:	00180018 	.word	0x00180018
 80064ec:	0018      	.short	0x0018
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064f4:	49b0      	ldr	r1, [pc, #704]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80064f6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80064f8:	f001 0103 	and.w	r1, r1, #3
 80064fc:	2903      	cmp	r1, #3
 80064fe:	f000 84ec 	beq.w	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8006502:	2101      	movs	r1, #1
 8006504:	f104 0008 	add.w	r0, r4, #8
 8006508:	f7ff fcec 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 800650c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800650e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006512:	2d00      	cmp	r5, #0
 8006514:	f000 8364 	beq.w	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xb34>
 8006518:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800651a:	069f      	lsls	r7, r3, #26
 800651c:	d526      	bpl.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800651e:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 8006522:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8006526:	f000 836e 	beq.w	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
 800652a:	f200 8194 	bhi.w	8006856 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800652e:	b191      	cbz	r1, 8006556 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8006530:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8006534:	f040 8199 	bne.w	800686a <HAL_RCCEx_PeriphCLKConfig+0x7be>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006538:	499f      	ldr	r1, [pc, #636]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800653a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800653c:	f001 0103 	and.w	r1, r1, #3
 8006540:	2903      	cmp	r1, #3
 8006542:	f000 8192 	beq.w	800686a <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8006546:	2100      	movs	r1, #0
 8006548:	f104 0008 	add.w	r0, r4, #8
 800654c:	f7ff fcca 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006550:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006552:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006556:	2d00      	cmp	r5, #0
 8006558:	f040 834b 	bne.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800655c:	4f96      	ldr	r7, [pc, #600]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800655e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8006562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006564:	f021 41e0 	bic.w	r1, r1, #1879048192	@ 0x70000000
 8006568:	4301      	orrs	r1, r0
 800656a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800656c:	0658      	lsls	r0, r3, #25
 800656e:	d526      	bpl.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006570:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 8006574:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006578:	f000 83a1 	beq.w	8006cbe <HAL_RCCEx_PeriphCLKConfig+0xc12>
 800657c:	f200 8178 	bhi.w	8006870 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
 8006580:	b191      	cbz	r1, 80065a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8006582:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006586:	f040 817d 	bne.w	8006884 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800658a:	498b      	ldr	r1, [pc, #556]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800658c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800658e:	f001 0103 	and.w	r1, r1, #3
 8006592:	2903      	cmp	r1, #3
 8006594:	f000 8176 	beq.w	8006884 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8006598:	2100      	movs	r1, #0
 800659a:	f104 0008 	add.w	r0, r4, #8
 800659e:	f7ff fca1 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 80065a2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065a4:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80065a8:	2d00      	cmp	r5, #0
 80065aa:	f040 8328 	bne.w	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xb52>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065ae:	4f82      	ldr	r7, [pc, #520]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80065b0:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80065b4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80065b6:	f421 51e0 	bic.w	r1, r1, #7168	@ 0x1c00
 80065ba:	4301      	orrs	r1, r0
 80065bc:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065be:	0619      	lsls	r1, r3, #24
 80065c0:	d526      	bpl.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->Lptim345ClockSelection)
 80065c2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	@ 0xa0
 80065c6:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
 80065ca:	f000 8353 	beq.w	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 80065ce:	f200 815c 	bhi.w	800688a <HAL_RCCEx_PeriphCLKConfig+0x7de>
 80065d2:	b191      	cbz	r1, 80065fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 80065d4:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80065d8:	f040 8161 	bne.w	800689e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065dc:	4976      	ldr	r1, [pc, #472]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80065de:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80065e0:	f001 0103 	and.w	r1, r1, #3
 80065e4:	2903      	cmp	r1, #3
 80065e6:	f000 815a 	beq.w	800689e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 80065ea:	2100      	movs	r1, #0
 80065ec:	f104 0008 	add.w	r0, r4, #8
 80065f0:	f7ff fc78 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 80065f4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80065f6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80065fa:	2d00      	cmp	r5, #0
 80065fc:	f040 82fb 	bne.w	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006600:	4f6d      	ldr	r7, [pc, #436]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006602:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
 8006606:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006608:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800660c:	4301      	orrs	r1, r0
 800660e:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006610:	071f      	lsls	r7, r3, #28
 8006612:	d50b      	bpl.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x580>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006614:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
 8006618:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800661c:	f000 8250 	beq.w	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006620:	4f65      	ldr	r7, [pc, #404]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006622:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006624:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8006628:	4301      	orrs	r1, r0
 800662a:	6579      	str	r1, [r7, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800662c:	06d8      	lsls	r0, r3, #27
 800662e:	d50b      	bpl.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006630:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
 8006634:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8006638:	f000 8257 	beq.w	8006aea <HAL_RCCEx_PeriphCLKConfig+0xa3e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800663c:	4f5e      	ldr	r7, [pc, #376]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 800663e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006640:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
 8006644:	4301      	orrs	r1, r0
 8006646:	65b9      	str	r1, [r7, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006648:	0319      	lsls	r1, r3, #12
 800664a:	d50e      	bpl.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    switch (PeriphClkInit->AdcClockSelection)
 800664c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
 8006650:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 8006654:	f000 816e 	beq.w	8006934 <HAL_RCCEx_PeriphCLKConfig+0x888>
 8006658:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800665c:	f000 8179 	beq.w	8006952 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006660:	2900      	cmp	r1, #0
 8006662:	f000 827a 	beq.w	8006b5a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006666:	2601      	movs	r6, #1
 8006668:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800666a:	035f      	lsls	r7, r3, #13
 800666c:	d50f      	bpl.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    switch (PeriphClkInit->UsbClockSelection)
 800666e:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 8006672:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8006676:	f000 82eb 	beq.w	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800667a:	f5b1 1f40 	cmp.w	r1, #3145728	@ 0x300000
 800667e:	f000 813d 	beq.w	80068fc <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006682:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8006686:	f000 8134 	beq.w	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800668a:	2601      	movs	r6, #1
 800668c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800668e:	03d8      	lsls	r0, r3, #15
 8006690:	d520      	bpl.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x628>
    switch (PeriphClkInit->SdmmcClockSelection)
 8006692:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8006694:	2900      	cmp	r1, #0
 8006696:	f000 8245 	beq.w	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xa78>
 800669a:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800669e:	f040 8125 	bne.w	80068ec <HAL_RCCEx_PeriphCLKConfig+0x840>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066a2:	4945      	ldr	r1, [pc, #276]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80066a4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80066a6:	f001 0103 	and.w	r1, r1, #3
 80066aa:	2903      	cmp	r1, #3
 80066ac:	f000 811e 	beq.w	80068ec <HAL_RCCEx_PeriphCLKConfig+0x840>
 80066b0:	2102      	movs	r1, #2
 80066b2:	f104 0008 	add.w	r0, r4, #8
 80066b6:	f7ff fc15 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 80066ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066bc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	f040 8237 	bne.w	8006b34 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066c6:	4f3c      	ldr	r7, [pc, #240]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80066c8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 80066ca:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80066cc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80066d0:	4301      	orrs	r1, r0
 80066d2:	64f9      	str	r1, [r7, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066d4:	0099      	lsls	r1, r3, #2
 80066d6:	d50e      	bpl.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066d8:	4937      	ldr	r1, [pc, #220]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 80066da:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80066dc:	f001 0103 	and.w	r1, r1, #3
 80066e0:	2903      	cmp	r1, #3
 80066e2:	d007      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
 80066e4:	2102      	movs	r1, #2
 80066e6:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80066ea:	f7ff fc6d 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066ee:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066f2:	b100      	cbz	r0, 80066f6 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      status = HAL_ERROR;
 80066f4:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066f6:	039f      	lsls	r7, r3, #14
 80066f8:	f140 80e0 	bpl.w	80068bc <HAL_RCCEx_PeriphCLKConfig+0x810>
    switch (PeriphClkInit->RngClockSelection)
 80066fc:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8006700:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006704:	f000 8205 	beq.w	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 8006708:	f240 80cc 	bls.w	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
 800670c:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8006710:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8006714:	f000 80c9 	beq.w	80068aa <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006718:	2501      	movs	r5, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800671a:	02d8      	lsls	r0, r3, #11
 800671c:	d506      	bpl.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x680>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800671e:	4826      	ldr	r0, [pc, #152]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006720:	6f66      	ldr	r6, [r4, #116]	@ 0x74
 8006722:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8006724:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006728:	4331      	orrs	r1, r6
 800672a:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800672c:	00d9      	lsls	r1, r3, #3
 800672e:	d507      	bpl.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x694>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006730:	4821      	ldr	r0, [pc, #132]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006732:	f8d4 60b8 	ldr.w	r6, [r4, #184]	@ 0xb8
 8006736:	6901      	ldr	r1, [r0, #16]
 8006738:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800673c:	4331      	orrs	r1, r6
 800673e:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006740:	029f      	lsls	r7, r3, #10
 8006742:	d506      	bpl.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006744:	481c      	ldr	r0, [pc, #112]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006746:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
 8006748:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800674a:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800674e:	4331      	orrs	r1, r6
 8006750:	6501      	str	r1, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006752:	005e      	lsls	r6, r3, #1
 8006754:	d509      	bpl.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x6be>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006756:	4918      	ldr	r1, [pc, #96]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006758:	6908      	ldr	r0, [r1, #16]
 800675a:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800675e:	6108      	str	r0, [r1, #16]
 8006760:	6908      	ldr	r0, [r1, #16]
 8006762:	f8d4 60bc 	ldr.w	r6, [r4, #188]	@ 0xbc
 8006766:	4330      	orrs	r0, r6
 8006768:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800676a:	2b00      	cmp	r3, #0
 800676c:	da06      	bge.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800676e:	4812      	ldr	r0, [pc, #72]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006770:	6d66      	ldr	r6, [r4, #84]	@ 0x54
 8006772:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8006774:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 8006778:	4331      	orrs	r1, r6
 800677a:	64c1      	str	r1, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800677c:	0218      	lsls	r0, r3, #8
 800677e:	d507      	bpl.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006780:	490d      	ldr	r1, [pc, #52]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006782:	f8d4 008c 	ldr.w	r0, [r4, #140]	@ 0x8c
 8006786:	6d4b      	ldr	r3, [r1, #84]	@ 0x54
 8006788:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800678c:	4303      	orrs	r3, r0
 800678e:	654b      	str	r3, [r1, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006790:	07d1      	lsls	r1, r2, #31
 8006792:	d513      	bpl.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006794:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>)
 8006796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006798:	f003 0303 	and.w	r3, r3, #3
 800679c:	2b03      	cmp	r3, #3
 800679e:	f000 818d 	beq.w	8006abc <HAL_RCCEx_PeriphCLKConfig+0xa10>
 80067a2:	2100      	movs	r1, #0
 80067a4:	f104 0008 	add.w	r0, r4, #8
 80067a8:	f7ff fb9c 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067ac:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80067ae:	2800      	cmp	r0, #0
 80067b0:	f040 8204 	bne.w	8006bbc <HAL_RCCEx_PeriphCLKConfig+0xb10>
 80067b4:	e002      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x710>
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067bc:	0793      	lsls	r3, r2, #30
 80067be:	d50f      	bpl.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x734>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067c0:	4bb2      	ldr	r3, [pc, #712]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80067c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	f000 816c 	beq.w	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80067ce:	2101      	movs	r1, #1
 80067d0:	f104 0008 	add.w	r0, r4, #8
 80067d4:	f7ff fb86 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067d8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80067da:	2800      	cmp	r0, #0
 80067dc:	f040 81f0 	bne.w	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067e0:	0757      	lsls	r7, r2, #29
 80067e2:	d50f      	bpl.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067e4:	4ba9      	ldr	r3, [pc, #676]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	f000 815c 	beq.w	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 80067f2:	2102      	movs	r1, #2
 80067f4:	f104 0008 	add.w	r0, r4, #8
 80067f8:	f7ff fb74 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80067fc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80067fe:	2800      	cmp	r0, #0
 8006800:	f040 81d8 	bne.w	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006804:	0716      	lsls	r6, r2, #28
 8006806:	d50f      	bpl.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006808:	4ba0      	ldr	r3, [pc, #640]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800680a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680c:	f003 0303 	and.w	r3, r3, #3
 8006810:	2b03      	cmp	r3, #3
 8006812:	f000 814c 	beq.w	8006aae <HAL_RCCEx_PeriphCLKConfig+0xa02>
 8006816:	2100      	movs	r1, #0
 8006818:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800681c:	f7ff fbd4 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006820:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006822:	2800      	cmp	r0, #0
 8006824:	f040 81c8 	bne.w	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006828:	06d0      	lsls	r0, r2, #27
 800682a:	d54a      	bpl.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x816>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800682c:	4b97      	ldr	r3, [pc, #604]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800682e:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	2b03      	cmp	r3, #3
 800683a:	f000 813a 	beq.w	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800683e:	2101      	movs	r1, #1
 8006840:	4630      	mov	r0, r6
 8006842:	f7ff fbc1 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 8006846:	2800      	cmp	r0, #0
 8006848:	d03a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x814>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800684a:	6863      	ldr	r3, [r4, #4]
 800684c:	069a      	lsls	r2, r3, #26
 800684e:	f140 808c 	bpl.w	800696a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 8006852:	4605      	mov	r5, r0
 8006854:	e039      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x81e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006856:	f021 5080 	bic.w	r0, r1, #268435456	@ 0x10000000
 800685a:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800685e:	f43f ae7a 	beq.w	8006556 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8006862:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
 8006866:	f43f ae76 	beq.w	8006556 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 800686a:	2601      	movs	r6, #1
 800686c:	4635      	mov	r5, r6
 800686e:	e67d      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006870:	f421 6080 	bic.w	r0, r1, #1024	@ 0x400
 8006874:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8006878:	f43f ae96 	beq.w	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 800687c:	f5b1 6f40 	cmp.w	r1, #3072	@ 0xc00
 8006880:	f43f ae92 	beq.w	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
 8006884:	2601      	movs	r6, #1
 8006886:	4635      	mov	r5, r6
 8006888:	e699      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x512>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800688a:	f421 5000 	bic.w	r0, r1, #8192	@ 0x2000
 800688e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006892:	f43f aeb2 	beq.w	80065fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 8006896:	f5b1 4fc0 	cmp.w	r1, #24576	@ 0x6000
 800689a:	f43f aeae 	beq.w	80065fa <HAL_RCCEx_PeriphCLKConfig+0x54e>
 800689e:	2601      	movs	r6, #1
 80068a0:	4635      	mov	r5, r6
 80068a2:	e6b5      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch (PeriphClkInit->RngClockSelection)
 80068a4:	2900      	cmp	r1, #0
 80068a6:	f47f af37 	bne.w	8006718 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    if (ret == HAL_OK)
 80068aa:	2d00      	cmp	r5, #0
 80068ac:	f47f af35 	bne.w	800671a <HAL_RCCEx_PeriphCLKConfig+0x66e>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068b0:	4d76      	ldr	r5, [pc, #472]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80068b2:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 80068b4:	f420 7040 	bic.w	r0, r0, #768	@ 0x300
 80068b8:	4301      	orrs	r1, r0
 80068ba:	6569      	str	r1, [r5, #84]	@ 0x54
      status = HAL_ERROR;
 80068bc:	4635      	mov	r5, r6
 80068be:	e72c      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x66e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068c0:	6862      	ldr	r2, [r4, #4]
 80068c2:	0693      	lsls	r3, r2, #26
 80068c4:	d50d      	bpl.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x836>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068c6:	f104 0628 	add.w	r6, r4, #40	@ 0x28
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80068ca:	4b70      	ldr	r3, [pc, #448]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80068cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d049      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80068d6:	2102      	movs	r1, #2
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff fb75 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
    if (ret == HAL_OK)
 80068de:	2800      	cmp	r0, #0
 80068e0:	d143      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x8be>
  if (status == HAL_OK)
 80068e2:	1e28      	subs	r0, r5, #0
 80068e4:	bf18      	it	ne
 80068e6:	2001      	movne	r0, #1
}
 80068e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ec:	2601      	movs	r6, #1
 80068ee:	4635      	mov	r5, r6
 80068f0:	e6f0      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x628>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f2:	4866      	ldr	r0, [pc, #408]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80068f4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80068f6:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 80068fa:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 80068fc:	2d00      	cmp	r5, #0
 80068fe:	f040 8140 	bne.w	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006902:	4f62      	ldr	r7, [pc, #392]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006904:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8006908:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800690a:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 800690e:	4301      	orrs	r1, r0
 8006910:	6579      	str	r1, [r7, #84]	@ 0x54
 8006912:	e6bc      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006914:	485d      	ldr	r0, [pc, #372]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006916:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006918:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 800691c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 800691e:	2d00      	cmp	r5, #0
 8006920:	f040 812c 	bne.w	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xad0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006924:	4f59      	ldr	r7, [pc, #356]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006926:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8006928:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800692a:	f021 5140 	bic.w	r1, r1, #805306368	@ 0x30000000
 800692e:	4301      	orrs	r1, r0
 8006930:	6539      	str	r1, [r7, #80]	@ 0x50
 8006932:	e516      	b.n	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006934:	4955      	ldr	r1, [pc, #340]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006936:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006938:	f001 0103 	and.w	r1, r1, #3
 800693c:	2903      	cmp	r1, #3
 800693e:	f43f ae92 	beq.w	8006666 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006942:	2102      	movs	r1, #2
 8006944:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006948:	f7ff fb3e 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 800694c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800694e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006952:	2d00      	cmp	r5, #0
 8006954:	f040 8151 	bne.w	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xb4e>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006958:	4f4c      	ldr	r7, [pc, #304]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 800695a:	f8d4 00a4 	ldr.w	r0, [r4, #164]	@ 0xa4
 800695e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006960:	f421 3140 	bic.w	r1, r1, #196608	@ 0x30000
 8006964:	4301      	orrs	r1, r0
 8006966:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006968:	e67f      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  return HAL_ERROR;
 800696a:	2001      	movs	r0, #1
}
 800696c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006970:	4946      	ldr	r1, [pc, #280]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006972:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006974:	f001 0103 	and.w	r1, r1, #3
 8006978:	2903      	cmp	r1, #3
 800697a:	f43f ad86 	beq.w	800648a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800697e:	2101      	movs	r1, #1
 8006980:	f104 0008 	add.w	r0, r4, #8
 8006984:	f7ff faae 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006988:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800698a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 800698e:	2d00      	cmp	r5, #0
 8006990:	f040 8137 	bne.w	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb56>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006994:	4f3d      	ldr	r7, [pc, #244]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006996:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8006998:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800699a:	f021 0138 	bic.w	r1, r1, #56	@ 0x38
 800699e:	4301      	orrs	r1, r0
 80069a0:	6579      	str	r1, [r7, #84]	@ 0x54
 80069a2:	e574      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80069a4:	2601      	movs	r6, #1
 80069a6:	f7ff bbb0 	b.w	800610a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069aa:	4f39      	ldr	r7, [pc, #228]	@ (8006a90 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069b2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80069b4:	f7fb fd74 	bl	80024a0 <HAL_GetTick>
 80069b8:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ba:	e006      	b.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x91e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069bc:	f7fb fd70 	bl	80024a0 <HAL_GetTick>
 80069c0:	eba0 0008 	sub.w	r0, r0, r8
 80069c4:	2864      	cmp	r0, #100	@ 0x64
 80069c6:	f200 8277 	bhi.w	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	05da      	lsls	r2, r3, #23
 80069ce:	d5f5      	bpl.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x910>
    if (ret == HAL_OK)
 80069d0:	2d00      	cmp	r5, #0
 80069d2:	f040 8272 	bne.w	8006eba <HAL_RCCEx_PeriphCLKConfig+0xe0e>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80069d6:	4a2d      	ldr	r2, [pc, #180]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 80069d8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80069dc:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 80069de:	4059      	eors	r1, r3
 80069e0:	f411 7f40 	tst.w	r1, #768	@ 0x300
 80069e4:	d00b      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x952>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069e6:	6f11      	ldr	r1, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 80069e8:	6f10      	ldr	r0, [r2, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069ea:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80069ee:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 80069f2:	6710      	str	r0, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069f4:	6f10      	ldr	r0, [r2, #112]	@ 0x70
 80069f6:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
 80069fa:	6710      	str	r0, [r2, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 80069fc:	6711      	str	r1, [r2, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80069fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a02:	f000 8285 	beq.w	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xe64>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a06:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8006a0a:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 8006a0e:	f000 8293 	beq.w	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
 8006a12:	491e      	ldr	r1, [pc, #120]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a14:	690a      	ldr	r2, [r1, #16]
 8006a16:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 8006a1a:	610a      	str	r2, [r1, #16]
 8006a1c:	481b      	ldr	r0, [pc, #108]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a1e:	f3c3 010b 	ubfx	r1, r3, #0, #12
 8006a22:	6f07      	ldr	r7, [r0, #112]	@ 0x70
 8006a24:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a26:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a2a:	6701      	str	r1, [r0, #112]	@ 0x70
 8006a2c:	e4fd      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2e:	4817      	ldr	r0, [pc, #92]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a30:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a32:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a36:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	f040 80b5 	bne.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8006a3e:	f7ff bbe7 	b.w	8006210 <HAL_RCCEx_PeriphCLKConfig+0x164>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a42:	4812      	ldr	r0, [pc, #72]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a44:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a46:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a4a:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	f040 80ae 	bne.w	8006bae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006a52:	e422      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a54:	480d      	ldr	r0, [pc, #52]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a56:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a58:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a5c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	f040 809f 	bne.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8006a64:	f7ff bba9 	b.w	80061ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a68:	4808      	ldr	r0, [pc, #32]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a6a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a6c:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a70:	62c1      	str	r1, [r0, #44]	@ 0x2c
        break;
 8006a72:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	f040 81ad 	bne.w	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0xd28>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a7a:	4f04      	ldr	r7, [pc, #16]	@ (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8006a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006a80:	f021 0107 	bic.w	r1, r1, #7
 8006a84:	4301      	orrs	r1, r0
 8006a86:	6539      	str	r1, [r7, #80]	@ 0x50
 8006a88:	f7ff bb4d 	b.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006a8c:	58024400 	.word	0x58024400
 8006a90:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a94:	48bb      	ldr	r0, [pc, #748]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006a96:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006a98:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006a9c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006a9e:	2d00      	cmp	r5, #0
 8006aa0:	d17c      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8006aa2:	f7ff bb60 	b.w	8006166 <HAL_RCCEx_PeriphCLKConfig+0xba>
    return HAL_ERROR;
 8006aa6:	2501      	movs	r5, #1
 8006aa8:	e69a      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x734>
 8006aaa:	2501      	movs	r5, #1
 8006aac:	e6aa      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x758>
    return HAL_ERROR;
 8006aae:	2501      	movs	r5, #1
 8006ab0:	e6ba      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006ab2:	0691      	lsls	r1, r2, #26
 8006ab4:	f57f af59 	bpl.w	800696a <HAL_RCCEx_PeriphCLKConfig+0x8be>
    return HAL_ERROR;
 8006ab8:	2501      	movs	r5, #1
 8006aba:	e706      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x81e>
    return HAL_ERROR;
 8006abc:	2501      	movs	r5, #1
 8006abe:	e67d      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ac0:	49b0      	ldr	r1, [pc, #704]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006ac2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ac4:	f001 0103 	and.w	r1, r1, #3
 8006ac8:	2903      	cmp	r1, #3
 8006aca:	f000 820a 	beq.w	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8006ace:	2102      	movs	r1, #2
 8006ad0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006ad4:	f7ff fa78 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	f000 820f 	beq.w	8006efc <HAL_RCCEx_PeriphCLKConfig+0xe50>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ade:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
        status = HAL_ERROR;
 8006ae2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ae4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ae8:	e59a      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x574>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006aea:	49a6      	ldr	r1, [pc, #664]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006aec:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006aee:	f001 0103 	and.w	r1, r1, #3
 8006af2:	2903      	cmp	r1, #3
 8006af4:	f000 81f8 	beq.w	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8006af8:	2102      	movs	r1, #2
 8006afa:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006afe:	f7ff fa63 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006b02:	2800      	cmp	r0, #0
 8006b04:	f040 81f3 	bne.w	8006eee <HAL_RCCEx_PeriphCLKConfig+0xe42>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b08:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b0c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006b10:	e594      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x590>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b12:	4f9c      	ldr	r7, [pc, #624]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b16:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8006b1a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	f47f adfc 	bne.w	800671a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006b22:	e6c5      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x804>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b24:	4897      	ldr	r0, [pc, #604]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006b26:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006b28:	f441 3100 	orr.w	r1, r1, #131072	@ 0x20000
 8006b2c:	62c1      	str	r1, [r0, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006b2e:	2d00      	cmp	r5, #0
 8006b30:	f43f adc9 	beq.w	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8006b34:	462e      	mov	r6, r5
 8006b36:	e5cd      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x628>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b38:	4992      	ldr	r1, [pc, #584]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006b3a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006b3c:	f001 0103 	and.w	r1, r1, #3
 8006b40:	2903      	cmp	r1, #3
 8006b42:	f43f ac0c 	beq.w	800635e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8006b46:	2101      	movs	r1, #1
 8006b48:	f104 0008 	add.w	r0, r4, #8
 8006b4c:	f7ff f9ca 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006b50:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b52:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006b56:	b98d      	cbnz	r5, 8006b7c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8006b58:	e6e4      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x878>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b5a:	488a      	ldr	r0, [pc, #552]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006b5c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8006b5e:	f000 0003 	and.w	r0, r0, #3
 8006b62:	2803      	cmp	r0, #3
 8006b64:	f43f ad7f 	beq.w	8006666 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8006b68:	f104 0008 	add.w	r0, r4, #8
 8006b6c:	f7ff f9ba 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006b70:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b72:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006b76:	2d00      	cmp	r5, #0
 8006b78:	d13f      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xb4e>
 8006b7a:	e6ed      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8006b7c:	462e      	mov	r6, r5
 8006b7e:	f7ff bbf0 	b.w	8006362 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006b82:	462e      	mov	r6, r5
 8006b84:	e583      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x5e2>
 8006b86:	462e      	mov	r6, r5
 8006b88:	f7ff bb65 	b.w	8006256 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b8c:	4f7d      	ldr	r7, [pc, #500]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006b8e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8006b90:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8006b92:	f021 0103 	bic.w	r1, r1, #3
 8006b96:	4301      	orrs	r1, r0
 8006b98:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8006b9a:	e443      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8006b9c:	462e      	mov	r6, r5
 8006b9e:	f7ff bae9 	b.w	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8006ba2:	462e      	mov	r6, r5
 8006ba4:	f7ff bb11 	b.w	80061ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
 8006ba8:	462e      	mov	r6, r5
 8006baa:	f7ff bb39 	b.w	8006220 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8006bae:	462e      	mov	r6, r5
 8006bb0:	f7ff bb7a 	b.w	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	e625      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x758>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006bb8:	4605      	mov	r5, r0
 8006bba:	e635      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	e5fd      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x710>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	e60d      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x734>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006bc4:	4f6f      	ldr	r7, [pc, #444]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006bc6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8006bc8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006bca:	f021 0107 	bic.w	r1, r1, #7
 8006bce:	4301      	orrs	r1, r0
 8006bd0:	6579      	str	r1, [r7, #84]	@ 0x54
 8006bd2:	e47d      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006bd4:	462e      	mov	r6, r5
 8006bd6:	f7ff bb8e 	b.w	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 8006bda:	462e      	mov	r6, r5
 8006bdc:	f7ff bbb1 	b.w	8006342 <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006be0:	4f68      	ldr	r7, [pc, #416]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006be2:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8006be6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006be8:	f021 0107 	bic.w	r1, r1, #7
 8006bec:	4301      	orrs	r1, r0
 8006bee:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bf0:	e493      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x46e>
 8006bf2:	462e      	mov	r6, r5
 8006bf4:	e4ba      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8006bf6:	462e      	mov	r6, r5
 8006bf8:	e50a      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x564>
 8006bfa:	462e      	mov	r6, r5
 8006bfc:	e535      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8006bfe:	462e      	mov	r6, r5
 8006c00:	e4dd      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x512>
 8006c02:	462e      	mov	r6, r5
 8006c04:	e443      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c06:	495f      	ldr	r1, [pc, #380]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006c08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c0a:	f001 0103 	and.w	r1, r1, #3
 8006c0e:	2903      	cmp	r1, #3
 8006c10:	f43f ae2b 	beq.w	800686a <HAL_RCCEx_PeriphCLKConfig+0x7be>
 8006c14:	2102      	movs	r1, #2
 8006c16:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006c1a:	f7ff f9d5 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006c1e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c20:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	d1e4      	bne.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xb46>
 8006c28:	e498      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c2a:	4956      	ldr	r1, [pc, #344]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006c2c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c2e:	f001 0103 	and.w	r1, r1, #3
 8006c32:	2903      	cmp	r1, #3
 8006c34:	f43f abc7 	beq.w	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 8006c38:	2102      	movs	r1, #2
 8006c3a:	f104 0008 	add.w	r0, r4, #8
 8006c3e:	f7ff f951 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006c42:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c44:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c48:	2d00      	cmp	r5, #0
 8006c4a:	d19c      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xada>
 8006c4c:	f7ff bafc 	b.w	8006248 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c50:	494c      	ldr	r1, [pc, #304]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006c52:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c54:	f001 0103 	and.w	r1, r1, #3
 8006c58:	2903      	cmp	r1, #3
 8006c5a:	f43f ad16 	beq.w	800668a <HAL_RCCEx_PeriphCLKConfig+0x5de>
 8006c5e:	2101      	movs	r1, #1
 8006c60:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006c64:	f7ff f9b0 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006c68:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c6a:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c6e:	2d00      	cmp	r5, #0
 8006c70:	d187      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8006c72:	e646      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c74:	4943      	ldr	r1, [pc, #268]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006c76:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c78:	f001 0103 	and.w	r1, r1, #3
 8006c7c:	2903      	cmp	r1, #3
 8006c7e:	f43f ae0e 	beq.w	800689e <HAL_RCCEx_PeriphCLKConfig+0x7f2>
 8006c82:	2102      	movs	r1, #2
 8006c84:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006c88:	f7ff f99e 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006c8c:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006c8e:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006c92:	2d00      	cmp	r5, #0
 8006c94:	d1af      	bne.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8006c96:	e4b3      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x554>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c98:	493a      	ldr	r1, [pc, #232]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006c9a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006c9c:	f001 0103 	and.w	r1, r1, #3
 8006ca0:	2903      	cmp	r1, #3
 8006ca2:	f000 8131 	beq.w	8006f08 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006ca6:	2102      	movs	r1, #2
 8006ca8:	f104 0008 	add.w	r0, r4, #8
 8006cac:	f7ff f91a 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006cb0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cb2:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	f47f abb3 	bne.w	8006422 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006cbc:	e766      	b.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xae0>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006cbe:	4931      	ldr	r1, [pc, #196]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006cc0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006cc2:	f001 0103 	and.w	r1, r1, #3
 8006cc6:	2903      	cmp	r1, #3
 8006cc8:	f43f addc 	beq.w	8006884 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
 8006ccc:	2102      	movs	r1, #2
 8006cce:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006cd2:	f7ff f979 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006cd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	d18e      	bne.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0xb52>
 8006ce0:	e465      	b.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x502>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ce2:	4928      	ldr	r1, [pc, #160]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006ce4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006ce6:	f001 0103 	and.w	r1, r1, #3
 8006cea:	2903      	cmp	r1, #3
 8006cec:	f43f ab83 	beq.w	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006cf6:	f7ff f967 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006cfa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cfc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d00:	2d00      	cmp	r5, #0
 8006d02:	f47f af67 	bne.w	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
 8006d06:	f7ff baef 	b.w	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d0a:	491e      	ldr	r1, [pc, #120]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006d0c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d0e:	f001 0103 	and.w	r1, r1, #3
 8006d12:	2903      	cmp	r1, #3
 8006d14:	f43f ab7a 	beq.w	800640c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006d18:	2101      	movs	r1, #1
 8006d1a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006d1e:	f7ff f953 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006d22:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d24:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d28:	2d00      	cmp	r5, #0
 8006d2a:	f47f af56 	bne.w	8006bda <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006d2e:	f7ff bb00 	b.w	8006332 <HAL_RCCEx_PeriphCLKConfig+0x286>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d32:	4914      	ldr	r1, [pc, #80]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006d34:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d36:	f001 0103 	and.w	r1, r1, #3
 8006d3a:	2903      	cmp	r1, #3
 8006d3c:	f43f ab3d 	beq.w	80063ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8006d40:	2100      	movs	r1, #0
 8006d42:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006d46:	f7ff f93f 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006d4a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d4c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	f47f af29 	bne.w	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8006d56:	f7ff ba5b 	b.w	8006210 <HAL_RCCEx_PeriphCLKConfig+0x164>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d5a:	490a      	ldr	r1, [pc, #40]	@ (8006d84 <HAL_RCCEx_PeriphCLKConfig+0xcd8>)
 8006d5c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d5e:	f001 0103 	and.w	r1, r1, #3
 8006d62:	2903      	cmp	r1, #3
 8006d64:	f43f ab3a 	beq.w	80063dc <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006d68:	2100      	movs	r1, #0
 8006d6a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006d6e:	f7ff f92b 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006d72:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d74:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006d78:	2d00      	cmp	r5, #0
 8006d7a:	f47f af18 	bne.w	8006bae <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006d7e:	f7ff ba8c 	b.w	800629a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d82:	bf00      	nop
 8006d84:	58024400 	.word	0x58024400
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d88:	4973      	ldr	r1, [pc, #460]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006d8a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006d8c:	f001 0103 	and.w	r1, r1, #3
 8006d90:	2903      	cmp	r1, #3
 8006d92:	f43f ae07 	beq.w	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006d96:	2102      	movs	r1, #2
 8006d98:	3028      	adds	r0, #40	@ 0x28
 8006d9a:	f7ff f915 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006d9e:	4606      	mov	r6, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006da0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006da4:	2e00      	cmp	r6, #0
 8006da6:	f47f a9b0 	bne.w	800610a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006daa:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8006dac:	f7ff b9a6 	b.w	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006db0:	4969      	ldr	r1, [pc, #420]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006db2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006db4:	f001 0103 	and.w	r1, r1, #3
 8006db8:	2903      	cmp	r1, #3
 8006dba:	f43f a9b2 	beq.w	8006122 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	f104 0008 	add.w	r0, r4, #8
 8006dc4:	f7ff f88e 	bl	8005ee4 <RCCEx_PLL2_Config.part.0>
 8006dc8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006dca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006dce:	2d00      	cmp	r5, #0
 8006dd0:	f43f ae53 	beq.w	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x9ce>
 8006dd4:	462e      	mov	r6, r5
 8006dd6:	f7ff b9a6 	b.w	8006126 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dda:	495f      	ldr	r1, [pc, #380]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006ddc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006dde:	f001 0103 	and.w	r1, r1, #3
 8006de2:	2903      	cmp	r1, #3
 8006de4:	f43f a99d 	beq.w	8006122 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006de8:	2100      	movs	r1, #0
 8006dea:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006dee:	f7ff f8eb 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006df2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006df4:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
 8006df8:	e63c      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dfa:	4957      	ldr	r1, [pc, #348]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006dfc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006dfe:	f001 0103 	and.w	r1, r1, #3
 8006e02:	2903      	cmp	r1, #3
 8006e04:	f43f aac0 	beq.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8006e08:	2100      	movs	r1, #0
 8006e0a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e0e:	f7ff f8db 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006e12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e14:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	f47f aebf 	bne.w	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8006e1e:	f7ff b9a2 	b.w	8006166 <HAL_RCCEx_PeriphCLKConfig+0xba>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e22:	494d      	ldr	r1, [pc, #308]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006e24:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e26:	f001 0103 	and.w	r1, r1, #3
 8006e2a:	2903      	cmp	r1, #3
 8006e2c:	f43f aaba 	beq.w	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8006e30:	2100      	movs	r1, #0
 8006e32:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e36:	f7ff f8c7 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006e3a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e3c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e40:	2d00      	cmp	r5, #0
 8006e42:	f47f aeae 	bne.w	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
 8006e46:	f7ff b9b8 	b.w	80061ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e4a:	4943      	ldr	r1, [pc, #268]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006e4c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e4e:	f001 0103 	and.w	r1, r1, #3
 8006e52:	2903      	cmp	r1, #3
 8006e54:	d041      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0xe2e>
 8006e56:	2101      	movs	r1, #1
 8006e58:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e5c:	f7ff f8b4 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006e60:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e62:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	f47f ab56 	bne.w	8006518 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8006e6c:	e6b8      	b.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xb34>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6e:	493a      	ldr	r1, [pc, #232]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006e70:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e72:	f001 0103 	and.w	r1, r1, #3
 8006e76:	2903      	cmp	r1, #3
 8006e78:	d02b      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xe26>
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006e80:	f7ff f8a2 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006e84:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e86:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006e8a:	2d00      	cmp	r5, #0
 8006e8c:	f47f ab1f 	bne.w	80064ce <HAL_RCCEx_PeriphCLKConfig+0x422>
 8006e90:	e698      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e92:	4931      	ldr	r1, [pc, #196]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006e94:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8006e96:	f001 0103 	and.w	r1, r1, #3
 8006e9a:	2903      	cmp	r1, #3
 8006e9c:	f43f aaf5 	beq.w	800648a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006ea0:	2101      	movs	r1, #1
 8006ea2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8006ea6:	f7ff f88f 	bl	8005fc8 <RCCEx_PLL3_Config.part.0>
 8006eaa:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006eac:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	f47f aea6 	bne.w	8006c02 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8006eb6:	e56d      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
        ret = HAL_TIMEOUT;
 8006eb8:	2503      	movs	r5, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006eba:	462e      	mov	r6, r5
 8006ebc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ec0:	f7ff bab3 	b.w	800642a <HAL_RCCEx_PeriphCLKConfig+0x37e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ec4:	4d24      	ldr	r5, [pc, #144]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006ec6:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8006ec8:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8006ecc:	62e8      	str	r0, [r5, #44]	@ 0x2c
    if (ret == HAL_OK)
 8006ece:	f7ff b915 	b.w	80060fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8006ed2:	2601      	movs	r6, #1
 8006ed4:	4635      	mov	r5, r6
 8006ed6:	f7ff bafb 	b.w	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006eda:	2601      	movs	r6, #1
 8006edc:	4635      	mov	r5, r6
 8006ede:	f7ff bb1c 	b.w	800651a <HAL_RCCEx_PeriphCLKConfig+0x46e>
        status = HAL_ERROR;
 8006ee2:	2601      	movs	r6, #1
 8006ee4:	f7ff bb9c 	b.w	8006620 <HAL_RCCEx_PeriphCLKConfig+0x574>
        status = HAL_ERROR;
 8006ee8:	2601      	movs	r6, #1
 8006eea:	f7ff bba7 	b.w	800663c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eee:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
        status = HAL_ERROR;
 8006ef2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ef4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ef8:	f7ff bba0 	b.w	800663c <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006efc:	f8d4 0084 	ldr.w	r0, [r4, #132]	@ 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f00:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006f04:	f7ff bb8c 	b.w	8006620 <HAL_RCCEx_PeriphCLKConfig+0x574>
 8006f08:	2601      	movs	r6, #1
 8006f0a:	4635      	mov	r5, r6
 8006f0c:	f7ff ba8a 	b.w	8006424 <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
 8006f10:	f7fb fac6 	bl	80024a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f14:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>
        tickstart = HAL_GetTick();
 8006f18:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f1a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f1e:	e004      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f20:	f7fb fabe 	bl	80024a0 <HAL_GetTick>
 8006f24:	1bc0      	subs	r0, r0, r7
 8006f26:	4548      	cmp	r0, r9
 8006f28:	d810      	bhi.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xea0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f2a:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	d5f6      	bpl.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xe74>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f32:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8006f36:	e566      	b.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006f38:	4807      	ldr	r0, [pc, #28]	@ (8006f58 <HAL_RCCEx_PeriphCLKConfig+0xeac>)
 8006f3a:	4a08      	ldr	r2, [pc, #32]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0xeb0>)
 8006f3c:	6901      	ldr	r1, [r0, #16]
 8006f3e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8006f42:	f421 517c 	bic.w	r1, r1, #16128	@ 0x3f00
 8006f46:	430a      	orrs	r2, r1
 8006f48:	6102      	str	r2, [r0, #16]
 8006f4a:	e567      	b.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x970>
        status = ret;
 8006f4c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006f4e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006f52:	4635      	mov	r5, r6
 8006f54:	f7ff ba69 	b.w	800642a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	00ffffcf 	.word	0x00ffffcf

08006f60 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8006f60:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f62:	f7fe feef 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8006f66:	4b05      	ldr	r3, [pc, #20]	@ (8006f7c <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8006f68:	4a05      	ldr	r2, [pc, #20]	@ (8006f80 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006f70:	5cd3      	ldrb	r3, [r2, r3]
 8006f72:	f003 031f 	and.w	r3, r3, #31
}
 8006f76:	40d8      	lsrs	r0, r3
 8006f78:	bd08      	pop	{r3, pc}
 8006f7a:	bf00      	nop
 8006f7c:	58024400 	.word	0x58024400
 8006f80:	0800e130 	.word	0x0800e130

08006f84 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f84:	4a47      	ldr	r2, [pc, #284]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
{
 8006f86:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f8a:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f8c:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll2m != 0U)
 8006f8e:	f415 3f7c 	tst.w	r5, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f92:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f96:	6bd4      	ldr	r4, [r2, #60]	@ 0x3c
  if (pll2m != 0U)
 8006f98:	d05b      	beq.n	8007052 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006f9a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f9e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fa2:	f001 0103 	and.w	r1, r1, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fa6:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006faa:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8006fae:	2901      	cmp	r1, #1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fb4:	ee06 4a90 	vmov	s13, r4
 8006fb8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x42>
 8006fbe:	2902      	cmp	r1, #2
 8006fc0:	d06a      	beq.n	8007098 <HAL_RCCEx_GetPLL2ClockFreq+0x114>
 8006fc2:	2900      	cmp	r1, #0
 8006fc4:	d04a      	beq.n	800705c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006fc6:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80070a8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006fca:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8006fce:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8006fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fe0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006fe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fe8:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006fec:	4a2d      	ldr	r2, [pc, #180]	@ (80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x120>)
 8006fee:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8006ff2:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8006ff4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006ff8:	ee07 3a10 	vmov	s14, r3
 8006ffc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007000:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007002:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007006:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800700a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800700e:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007012:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007014:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007018:	ee07 3a10 	vmov	s14, r3
 800701c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007020:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007024:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007028:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800702c:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007030:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8007032:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007036:	ee06 3a90 	vmov	s13, r3
 800703a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800703e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007042:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007046:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800704a:	ee17 3a90 	vmov	r3, s15
 800704e:	6083      	str	r3, [r0, #8]
}
 8007050:	4770      	bx	lr
 8007052:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007054:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007058:	6083      	str	r3, [r0, #8]
}
 800705a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800705c:	6813      	ldr	r3, [r2, #0]
 800705e:	069b      	lsls	r3, r3, #26
 8007060:	d51d      	bpl.n	800709e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007062:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007064:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007068:	6b93      	ldr	r3, [r2, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800706a:	4910      	ldr	r1, [pc, #64]	@ (80070ac <HAL_RCCEx_GetPLL2ClockFreq+0x128>)
 800706c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007070:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007074:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007076:	ee06 3a10 	vmov	s12, r3
 800707a:	ee05 1a90 	vmov	s11, r1
 800707e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007082:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007086:	ee36 6a27 	vadd.f32	s12, s12, s15
 800708a:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800708e:	ee36 7a26 	vadd.f32	s14, s12, s13
 8007092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007096:	e7a9      	b.n	8006fec <HAL_RCCEx_GetPLL2ClockFreq+0x68>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007098:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80070b0 <HAL_RCCEx_GetPLL2ClockFreq+0x12c>
 800709c:	e795      	b.n	8006fca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800709e:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80070b4 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
 80070a2:	e792      	b.n	8006fca <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 80070a4:	58024400 	.word	0x58024400
 80070a8:	4a742400 	.word	0x4a742400
 80070ac:	03d09000 	.word	0x03d09000
 80070b0:	4bbebc20 	.word	0x4bbebc20
 80070b4:	4c742400 	.word	0x4c742400

080070b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070b8:	4a47      	ldr	r2, [pc, #284]	@ (80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
{
 80070ba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070be:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070c0:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll3m != 0U)
 80070c2:	f015 7f7c 	tst.w	r5, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80070c6:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070ca:	6c54      	ldr	r4, [r2, #68]	@ 0x44
  if (pll3m != 0U)
 80070cc:	d05b      	beq.n	8007186 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070ce:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80070d2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070d6:	f001 0103 	and.w	r1, r1, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070da:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80070de:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80070e2:	2901      	cmp	r1, #1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80070e8:	ee06 4a90 	vmov	s13, r4
 80070ec:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 80070f0:	d003      	beq.n	80070fa <HAL_RCCEx_GetPLL3ClockFreq+0x42>
 80070f2:	2902      	cmp	r1, #2
 80070f4:	d06a      	beq.n	80071cc <HAL_RCCEx_GetPLL3ClockFreq+0x114>
 80070f6:	2900      	cmp	r1, #0
 80070f8:	d04a      	beq.n	8007190 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070fa:	eddf 7a38 	vldr	s15, [pc, #224]	@ 80071dc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80070fe:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007102:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007108:	ee07 3a90 	vmov	s15, r3
 800710c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007114:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800711c:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007120:	4a2d      	ldr	r2, [pc, #180]	@ (80071d8 <HAL_RCCEx_GetPLL3ClockFreq+0x120>)
 8007122:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007126:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007128:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800712c:	ee07 3a10 	vmov	s14, r3
 8007130:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007134:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007136:	ee37 7a06 	vadd.f32	s14, s14, s12
 800713a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800713e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007142:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007146:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007148:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800714c:	ee07 3a10 	vmov	s14, r3
 8007150:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007154:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800715c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007160:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007164:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8007166:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800716a:	ee06 3a90 	vmov	s13, r3
 800716e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007172:	ee76 6a86 	vadd.f32	s13, s13, s12
 8007176:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800717a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800717e:	ee17 3a90 	vmov	r3, s15
 8007182:	6083      	str	r3, [r0, #8]
}
 8007184:	4770      	bx	lr
 8007186:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007188:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800718c:	6083      	str	r3, [r0, #8]
}
 800718e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007190:	6813      	ldr	r3, [r2, #0]
 8007192:	069b      	lsls	r3, r3, #26
 8007194:	d51d      	bpl.n	80071d2 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007196:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007198:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800719c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800719e:	4910      	ldr	r1, [pc, #64]	@ (80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0x128>)
 80071a0:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071a8:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071aa:	ee06 3a10 	vmov	s12, r3
 80071ae:	ee05 1a90 	vmov	s11, r1
 80071b2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80071b6:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80071ba:	ee36 6a27 	vadd.f32	s12, s12, s15
 80071be:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80071c2:	ee36 7a26 	vadd.f32	s14, s12, s13
 80071c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071ca:	e7a9      	b.n	8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x68>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071cc:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x12c>
 80071d0:	e795      	b.n	80070fe <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80071d2:	eddf 7a05 	vldr	s15, [pc, #20]	@ 80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
 80071d6:	e792      	b.n	80070fe <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80071d8:	58024400 	.word	0x58024400
 80071dc:	4a742400 	.word	0x4a742400
 80071e0:	03d09000 	.word	0x03d09000
 80071e4:	4bbebc20 	.word	0x4bbebc20
 80071e8:	4c742400 	.word	0x4c742400

080071ec <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071ec:	4a47      	ldr	r2, [pc, #284]	@ (800730c <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
{
 80071ee:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80071f2:	6a95      	ldr	r5, [r2, #40]	@ 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80071f4:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
  if (pll1m != 0U)
 80071f6:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80071fa:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80071fe:	6b54      	ldr	r4, [r2, #52]	@ 0x34
  if (pll1m != 0U)
 8007200:	d05b      	beq.n	80072ba <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007202:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007206:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800720a:	f001 0103 	and.w	r1, r1, #3
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800720e:	ee07 3a90 	vmov	s15, r3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007212:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8007216:	2901      	cmp	r1, #1
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800721c:	ee06 4a90 	vmov	s13, r4
 8007220:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 8007224:	d06f      	beq.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8007226:	2902      	cmp	r1, #2
 8007228:	d06a      	beq.n	8007300 <HAL_RCCEx_GetPLL1ClockFreq+0x114>
 800722a:	2900      	cmp	r1, #0
 800722c:	d04a      	beq.n	80072c4 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800722e:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8007310 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8007232:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8007236:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8007244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007248:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800724c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007250:	ee67 7a86 	vmul.f32	s15, s15, s12
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007254:	4a2d      	ldr	r2, [pc, #180]	@ (800730c <HAL_RCCEx_GetPLL1ClockFreq+0x120>)
 8007256:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800725a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800725c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007260:	ee07 3a10 	vmov	s14, r3
 8007264:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8007268:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800726a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800726e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007272:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007276:	edc0 6a00 	vstr	s13, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800727a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800727c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007280:	ee07 3a10 	vmov	s14, r3
 8007284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007288:	ee37 7a06 	vadd.f32	s14, s14, s12
 800728c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007290:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007294:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007298:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800729a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800729e:	ee06 3a90 	vmov	s13, r3
 80072a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80072a6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80072aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072ae:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80072b2:	ee17 3a90 	vmov	r3, s15
 80072b6:	6083      	str	r3, [r0, #8]
}
 80072b8:	4770      	bx	lr
 80072ba:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80072bc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80072c0:	6083      	str	r3, [r0, #8]
}
 80072c2:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c4:	6813      	ldr	r3, [r2, #0]
 80072c6:	069b      	lsls	r3, r3, #26
 80072c8:	d5b1      	bpl.n	800722e <HAL_RCCEx_GetPLL1ClockFreq+0x42>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072ca:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80072d0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072d2:	4910      	ldr	r1, [pc, #64]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x128>)
 80072d4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072dc:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80072de:	ee06 3a10 	vmov	s12, r3
 80072e2:	ee05 1a90 	vmov	s11, r1
 80072e6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80072ea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80072ee:	ee36 6a27 	vadd.f32	s12, s12, s15
 80072f2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80072f6:	ee36 7a26 	vadd.f32	s14, s12, s13
 80072fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072fe:	e7a9      	b.n	8007254 <HAL_RCCEx_GetPLL1ClockFreq+0x68>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007300:	eddf 7a05 	vldr	s15, [pc, #20]	@ 8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x12c>
 8007304:	e795      	b.n	8007232 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007306:	eddf 7a05 	vldr	s15, [pc, #20]	@ 800731c <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800730a:	e792      	b.n	8007232 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800730c:	58024400 	.word	0x58024400
 8007310:	4c742400 	.word	0x4c742400
 8007314:	03d09000 	.word	0x03d09000
 8007318:	4bbebc20 	.word	0x4bbebc20
 800731c:	4a742400 	.word	0x4a742400

08007320 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007320:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 8007324:	430b      	orrs	r3, r1
{
 8007326:	b500      	push	{lr}
 8007328:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800732a:	f000 8083 	beq.w	8007434 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800732e:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
 8007332:	430b      	orrs	r3, r1
 8007334:	d038      	beq.n	80073a8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8007336:	f5a0 6380 	sub.w	r3, r0, #1024	@ 0x400
 800733a:	430b      	orrs	r3, r1
 800733c:	f000 80e6 	beq.w	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007340:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
 8007344:	430b      	orrs	r3, r1
 8007346:	f000 8089 	beq.w	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800734a:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
 800734e:	430b      	orrs	r3, r1
 8007350:	d060      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007352:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
 8007356:	430b      	orrs	r3, r1
 8007358:	f000 8112 	beq.w	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800735c:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
 8007360:	430b      	orrs	r3, r1
 8007362:	f000 80a3 	beq.w	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007366:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
 800736a:	430b      	orrs	r3, r1
 800736c:	f000 80fa 	beq.w	8007564 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007370:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
 8007374:	430b      	orrs	r3, r1
 8007376:	f000 8143 	beq.w	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800737a:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
 800737e:	4308      	orrs	r0, r1
 8007380:	d137      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007382:	4a9a      	ldr	r2, [pc, #616]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007384:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007386:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
    switch (srcclk)
 800738a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800738e:	f000 8084 	beq.w	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007392:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007396:	f000 8157 	beq.w	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800739a:	bb53      	cbnz	r3, 80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800739c:	6810      	ldr	r0, [r2, #0]
 800739e:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80073a2:	d044      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80073a4:	4892      	ldr	r0, [pc, #584]	@ (80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80073a6:	e042      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80073a8:	4a90      	ldr	r2, [pc, #576]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073aa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80073ac:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
    switch (saiclocksource)
 80073b0:	2b80      	cmp	r3, #128	@ 0x80
 80073b2:	f000 80a6 	beq.w	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80073b6:	d920      	bls.n	80073fa <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80073b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80073ba:	d037      	beq.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80073bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073c0:	d117      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073c2:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073c4:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073ca:	0749      	lsls	r1, r1, #29
 80073cc:	d502      	bpl.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80c2 	beq.w	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073d4:	4a85      	ldr	r2, [pc, #532]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073d6:	6812      	ldr	r2, [r2, #0]
 80073d8:	05d0      	lsls	r0, r2, #23
 80073da:	d503      	bpl.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80073dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e0:	f000 8102 	beq.w	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073e4:	4a81      	ldr	r2, [pc, #516]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80073e6:	6812      	ldr	r2, [r2, #0]
 80073e8:	0391      	lsls	r1, r2, #14
 80073ea:	d502      	bpl.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 80073ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073f0:	d0d8      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
          frequency = 0;
 80073f2:	2000      	movs	r0, #0
}
 80073f4:	b005      	add	sp, #20
 80073f6:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d04d      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80073fe:	2b40      	cmp	r3, #64	@ 0x40
 8007400:	d1f7      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007402:	6810      	ldr	r0, [r2, #0]
 8007404:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007408:	d011      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800740a:	a801      	add	r0, sp, #4
 800740c:	f7ff fdba 	bl	8006f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007410:	9801      	ldr	r0, [sp, #4]
 8007412:	e00c      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007414:	4a75      	ldr	r2, [pc, #468]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007416:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007418:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
    switch (srcclk)
 800741c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007420:	d06f      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8007422:	d938      	bls.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8007424:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007428:	f040 8088 	bne.w	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800742c:	4871      	ldr	r0, [pc, #452]	@ (80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800742e:	b005      	add	sp, #20
 8007430:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007434:	4b6d      	ldr	r3, [pc, #436]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007436:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007438:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800743c:	2b04      	cmp	r3, #4
 800743e:	d8d8      	bhi.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8007440:	a201      	add	r2, pc, #4	@ (adr r2, 8007448 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 8007442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007446:	bf00      	nop
 8007448:	080074eb 	.word	0x080074eb
 800744c:	080074c7 	.word	0x080074c7
 8007450:	080074d7 	.word	0x080074d7
 8007454:	0800742d 	.word	0x0800742d
 8007458:	080074d3 	.word	0x080074d3
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800745c:	4a63      	ldr	r2, [pc, #396]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800745e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007460:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
    switch (saiclocksource)
 8007464:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007468:	d04b      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800746a:	d944      	bls.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800746c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007470:	d0dc      	beq.n	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8007472:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007476:	d1bc      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007478:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800747a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800747c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007480:	0752      	lsls	r2, r2, #29
 8007482:	d5a7      	bpl.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d1a5      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007488:	4b58      	ldr	r3, [pc, #352]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800748a:	485b      	ldr	r0, [pc, #364]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007492:	40d8      	lsrs	r0, r3
 8007494:	e7cb      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8007496:	2b00      	cmp	r3, #0
 8007498:	d154      	bne.n	8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800749a:	6810      	ldr	r0, [r2, #0]
 800749c:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80074a0:	d0c5      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074a2:	a801      	add	r0, sp, #4
 80074a4:	f7ff fea2 	bl	80071ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074a8:	9802      	ldr	r0, [sp, #8]
 80074aa:	e7c0      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80074ac:	4a4f      	ldr	r2, [pc, #316]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074ae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80074b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
    switch (srcclk)
 80074b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074b8:	f000 80d0 	beq.w	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80074bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074c0:	d0da      	beq.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d195      	bne.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074c6:	4b49      	ldr	r3, [pc, #292]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074c8:	6818      	ldr	r0, [r3, #0]
 80074ca:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 80074ce:	d0ae      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80074d0:	e79b      	b.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074d2:	4a46      	ldr	r2, [pc, #280]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074d4:	e775      	b.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80074d6:	4b45      	ldr	r3, [pc, #276]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074d8:	6818      	ldr	r0, [r3, #0]
 80074da:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80074de:	d0a6      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80074e0:	a801      	add	r0, sp, #4
 80074e2:	f7ff fde9 	bl	80070b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80074e6:	9801      	ldr	r0, [sp, #4]
 80074e8:	e7a1      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80074ea:	4b40      	ldr	r3, [pc, #256]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80074ec:	6818      	ldr	r0, [r3, #0]
 80074ee:	f010 7000 	ands.w	r0, r0, #33554432	@ 0x2000000
 80074f2:	d09c      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80074f4:	e7d5      	b.n	80074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0cf      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80074fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074fe:	d080      	beq.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8007500:	e777      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007502:	6810      	ldr	r0, [r2, #0]
 8007504:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007508:	d091      	beq.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800750a:	e7e9      	b.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800750c:	4a37      	ldr	r2, [pc, #220]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800750e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007510:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
    switch (saiclocksource)
 8007514:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007518:	d0f3      	beq.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800751a:	d806      	bhi.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d0bc      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8007520:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007524:	f43f af6d 	beq.w	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8007528:	e763      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800752a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800752e:	f43f af7d 	beq.w	800742c <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8007532:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007536:	f43f af44 	beq.w	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800753a:	e75a      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 800753c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007540:	d09a      	beq.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007542:	e756      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8007544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007548:	f43f af5b 	beq.w	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800754c:	e751      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800754e:	6810      	ldr	r0, [r2, #0]
 8007550:	f010 0004 	ands.w	r0, r0, #4
 8007554:	f43f af6b 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007558:	6813      	ldr	r3, [r2, #0]
 800755a:	4827      	ldr	r0, [pc, #156]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800755c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007560:	40d8      	lsrs	r0, r3
 8007562:	e764      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007564:	4b21      	ldr	r3, [pc, #132]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007566:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    switch (srcclk)
 8007568:	03d2      	lsls	r2, r2, #15
 800756a:	d5bf      	bpl.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 8007572:	f43f af5c 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007576:	a801      	add	r0, sp, #4
 8007578:	f7ff fd04 	bl	8006f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800757c:	9803      	ldr	r0, [sp, #12]
 800757e:	e756      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007580:	4a1a      	ldr	r2, [pc, #104]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007582:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8007584:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
    switch (srcclk)
 8007588:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800758c:	d0df      	beq.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800758e:	d810      	bhi.n	80075b2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 8007590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007594:	d058      	beq.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800759a:	d118      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800759c:	4b13      	ldr	r3, [pc, #76]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800759e:	6818      	ldr	r0, [r3, #0]
 80075a0:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 80075a4:	f43f af43 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a8:	a801      	add	r0, sp, #4
 80075aa:	f7ff fd85 	bl	80070b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80075ae:	9802      	ldr	r0, [sp, #8]
 80075b0:	e73d      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80075b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80075b6:	d012      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 80075b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075bc:	f47f af19 	bne.w	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075c0:	4b0a      	ldr	r3, [pc, #40]	@ (80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80075c2:	6818      	ldr	r0, [r3, #0]
 80075c4:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 80075c8:	f43f af31 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80075cc:	e6ea      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f47f af0f 	bne.w	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 80075d4:	b005      	add	sp, #20
 80075d6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 80075da:	f7fe bbf3 	b.w	8005dc4 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075de:	6810      	ldr	r0, [r2, #0]
 80075e0:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 80075e4:	f43f af23 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 80075e8:	4804      	ldr	r0, [pc, #16]	@ (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80075ea:	e720      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80075ec:	58024400 	.word	0x58024400
 80075f0:	017d7840 	.word	0x017d7840
 80075f4:	00bb8000 	.word	0x00bb8000
 80075f8:	03d09000 	.word	0x03d09000
 80075fc:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007600:	4b28      	ldr	r3, [pc, #160]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007604:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
    switch (srcclk)
 8007608:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800760c:	d037      	beq.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800760e:	d814      	bhi.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8007610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007614:	d03f      	beq.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8007616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761a:	d0bf      	beq.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800761c:	2b00      	cmp	r3, #0
 800761e:	f47f aee8 	bne.w	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007622:	f7fe fb8f 	bl	8005d44 <HAL_RCC_GetHCLKFreq>
 8007626:	4b1f      	ldr	r3, [pc, #124]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007628:	4a1f      	ldr	r2, [pc, #124]	@ (80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007630:	5cd3      	ldrb	r3, [r2, r3]
 8007632:	f003 031f 	and.w	r3, r3, #31
 8007636:	40d8      	lsrs	r0, r3
        break;
 8007638:	e6f9      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 800763a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800763e:	d017      	beq.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8007640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007644:	d0bc      	beq.n	80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007646:	e6d4      	b.n	80073f2 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007648:	6810      	ldr	r0, [r2, #0]
 800764a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800764e:	f43f aeee 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007652:	a801      	add	r0, sp, #4
 8007654:	f7ff fc96 	bl	8006f84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007658:	9802      	ldr	r0, [sp, #8]
 800765a:	e6e8      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800765c:	6810      	ldr	r0, [r2, #0]
 800765e:	f010 5000 	ands.w	r0, r0, #536870912	@ 0x20000000
 8007662:	f43f aee4 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007666:	a801      	add	r0, sp, #4
 8007668:	f7ff fd26 	bl	80070b8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800766c:	9803      	ldr	r0, [sp, #12]
 800766e:	e6de      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007670:	4b0c      	ldr	r3, [pc, #48]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007672:	6818      	ldr	r0, [r3, #0]
 8007674:	f410 7080 	ands.w	r0, r0, #256	@ 0x100
 8007678:	f43f aed9 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800767c:	e7b4      	b.n	80075e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800767e:	4b09      	ldr	r3, [pc, #36]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007680:	6818      	ldr	r0, [r3, #0]
 8007682:	f010 0004 	ands.w	r0, r0, #4
 8007686:	f43f aed2 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4807      	ldr	r0, [pc, #28]	@ (80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800768e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007692:	40d8      	lsrs	r0, r3
 8007694:	e6cb      	b.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007696:	4b03      	ldr	r3, [pc, #12]	@ (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8007698:	6818      	ldr	r0, [r3, #0]
 800769a:	f010 6000 	ands.w	r0, r0, #134217728	@ 0x8000000
 800769e:	f43f aec6 	beq.w	800742e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80076a2:	e7d6      	b.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80076a4:	58024400 	.word	0x58024400
 80076a8:	0800e130 	.word	0x0800e130
 80076ac:	03d09000 	.word	0x03d09000

080076b0 <HAL_SPI_Init>:
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076b0:	2800      	cmp	r0, #0
 80076b2:	f000 80c8 	beq.w	8007846 <HAL_SPI_Init+0x196>
{
 80076b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ba:	4604      	mov	r4, r0
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076bc:	4b67      	ldr	r3, [pc, #412]	@ (800785c <HAL_SPI_Init+0x1ac>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076be:	2000      	movs	r0, #0
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076c0:	6822      	ldr	r2, [r4, #0]
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80076c2:	68e1      	ldr	r1, [r4, #12]
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076c4:	429a      	cmp	r2, r3
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076c6:	62a0      	str	r0, [r4, #40]	@ 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076c8:	d016      	beq.n	80076f8 <HAL_SPI_Init+0x48>
 80076ca:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d012      	beq.n	80076f8 <HAL_SPI_Init+0x48>
 80076d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076d6:	429a      	cmp	r2, r3
 80076d8:	f000 80ad 	beq.w	8007836 <HAL_SPI_Init+0x186>
 80076dc:	290f      	cmp	r1, #15
 80076de:	d808      	bhi.n	80076f2 <HAL_SPI_Init+0x42>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80076e0:	6be5      	ldr	r5, [r4, #60]	@ 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80076e2:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80076e6:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 80076e8:	08db      	lsrs	r3, r3, #3

  return data_size * fifo_threashold;
 80076ea:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d90a      	bls.n	8007708 <HAL_SPI_Init+0x58>
    return HAL_ERROR;
 80076f2:	2001      	movs	r0, #1
}
 80076f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076f8:	4b58      	ldr	r3, [pc, #352]	@ (800785c <HAL_SPI_Init+0x1ac>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80076fa:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d06d      	beq.n	80077dc <HAL_SPI_Init+0x12c>
 8007700:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
 8007704:	429a      	cmp	r2, r3
 8007706:	d069      	beq.n	80077dc <HAL_SPI_Init+0x12c>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007708:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 800770c:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 8007710:	2b00      	cmp	r3, #0
 8007712:	d071      	beq.n	80077f8 <HAL_SPI_Init+0x148>
 8007714:	f04f 0800 	mov.w	r8, #0
  hspi->State = HAL_SPI_STATE_BUSY;
 8007718:	2302      	movs	r3, #2
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800771a:	6860      	ldr	r0, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800771c:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hspi->State = HAL_SPI_STATE_BUSY;
 8007720:	f884 3081 	strb.w	r3, [r4, #129]	@ 0x81
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007724:	f400 0980 	and.w	r9, r0, #4194304	@ 0x400000
  __HAL_SPI_DISABLE(hspi);
 8007728:	6813      	ldr	r3, [r2, #0]
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007730:	6893      	ldr	r3, [r2, #8]
 8007732:	f403 1cf8 	and.w	ip, r3, #2031616	@ 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007736:	69a3      	ldr	r3, [r4, #24]
 8007738:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800773c:	d067      	beq.n	800780e <HAL_SPI_Init+0x15e>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800773e:	f1b9 0f00 	cmp.w	r9, #0
 8007742:	d001      	beq.n	8007748 <HAL_SPI_Init+0x98>
 8007744:	2906      	cmp	r1, #6
 8007746:	d86f      	bhi.n	8007828 <HAL_SPI_Init+0x178>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007748:	6817      	ldr	r7, [r2, #0]
 800774a:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 800774e:	6017      	str	r7, [r2, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007750:	4303      	orrs	r3, r0
 8007752:	6b67      	ldr	r7, [r4, #52]	@ 0x34
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007754:	ea41 0108 	orr.w	r1, r1, r8
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007758:	ea43 030e 	orr.w	r3, r3, lr
 800775c:	433b      	orrs	r3, r7
 800775e:	6a67      	ldr	r7, [r4, #36]	@ 0x24
 8007760:	433b      	orrs	r3, r7
 8007762:	6927      	ldr	r7, [r4, #16]
 8007764:	433b      	orrs	r3, r7
 8007766:	6967      	ldr	r7, [r4, #20]
 8007768:	433b      	orrs	r3, r7
 800776a:	6a27      	ldr	r7, [r4, #32]
 800776c:	433b      	orrs	r3, r7
 800776e:	6ce7      	ldr	r7, [r4, #76]	@ 0x4c
 8007770:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007772:	69e7      	ldr	r7, [r4, #28]
 8007774:	4339      	orrs	r1, r7
 8007776:	4329      	orrs	r1, r5
 8007778:	ea41 010c 	orr.w	r1, r1, ip
 800777c:	6091      	str	r1, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800777e:	68a1      	ldr	r1, [r4, #8]
 8007780:	430b      	orrs	r3, r1
 8007782:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007784:	430b      	orrs	r3, r1
 8007786:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8007788:	430b      	orrs	r3, r1
 800778a:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800778c:	b9c0      	cbnz	r0, 80077c0 <HAL_SPI_Init+0x110>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800778e:	6893      	ldr	r3, [r2, #8]
 8007790:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8007794:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007798:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800779a:	6893      	ldr	r3, [r2, #8]
 800779c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80077a0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80077a4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077a6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80077a8:	f023 0301 	bic.w	r3, r3, #1
 80077ac:	6513      	str	r3, [r2, #80]	@ 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077ae:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80077b0:	2201      	movs	r2, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077b2:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
  return HAL_OK;
 80077b6:	4618      	mov	r0, r3
  hspi->State     = HAL_SPI_STATE_READY;
 80077b8:	f884 2081 	strb.w	r2, [r4, #129]	@ 0x81
}
 80077bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077c0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 80077c2:	f023 0301 	bic.w	r3, r3, #1
 80077c6:	6513      	str	r3, [r2, #80]	@ 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80077c8:	f1b9 0f00 	cmp.w	r9, #0
 80077cc:	d0ef      	beq.n	80077ae <HAL_SPI_Init+0xfe>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80077ce:	68d3      	ldr	r3, [r2, #12]
 80077d0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80077d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077d6:	430b      	orrs	r3, r1
 80077d8:	60d3      	str	r3, [r2, #12]
 80077da:	e7e8      	b.n	80077ae <HAL_SPI_Init+0xfe>
  data_size = (data_size + 7UL) / 8UL;
 80077dc:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80077e0:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 80077e2:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 80077e4:	fb00 3303 	mla	r3, r0, r3, r3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077e8:	2b10      	cmp	r3, #16
 80077ea:	d882      	bhi.n	80076f2 <HAL_SPI_Init+0x42>
  if (hspi->State == HAL_SPI_STATE_RESET)
 80077ec:	f894 3081 	ldrb.w	r3, [r4, #129]	@ 0x81
 80077f0:	f003 06ff 	and.w	r6, r3, #255	@ 0xff
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d18d      	bne.n	8007714 <HAL_SPI_Init+0x64>
    HAL_SPI_MspInit(hspi);
 80077f8:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80077fa:	f884 6080 	strb.w	r6, [r4, #128]	@ 0x80
    HAL_SPI_MspInit(hspi);
 80077fe:	f7fa fc17 	bl	8002030 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8007802:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007804:	68e1      	ldr	r1, [r4, #12]
 8007806:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
 800780a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 800780c:	e784      	b.n	8007718 <HAL_SPI_Init+0x68>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800780e:	f5b0 0f80 	cmp.w	r0, #4194304	@ 0x400000
 8007812:	d01a      	beq.n	800784a <HAL_SPI_Init+0x19a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007814:	2800      	cmp	r0, #0
 8007816:	d192      	bne.n	800773e <HAL_SPI_Init+0x8e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007818:	f1be 5f80 	cmp.w	lr, #268435456	@ 0x10000000
 800781c:	d194      	bne.n	8007748 <HAL_SPI_Init+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800781e:	6817      	ldr	r7, [r2, #0]
 8007820:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8007824:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007826:	e78f      	b.n	8007748 <HAL_SPI_Init+0x98>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007828:	6817      	ldr	r7, [r2, #0]
 800782a:	6d26      	ldr	r6, [r4, #80]	@ 0x50
 800782c:	f427 7780 	bic.w	r7, r7, #256	@ 0x100
 8007830:	4337      	orrs	r7, r6
 8007832:	6017      	str	r7, [r2, #0]
 8007834:	e78c      	b.n	8007750 <HAL_SPI_Init+0xa0>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007836:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8007838:	f101 0308 	add.w	r3, r1, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800783c:	0968      	lsrs	r0, r5, #5
  data_size = (data_size + 7UL) / 8UL;
 800783e:	08db      	lsrs	r3, r3, #3
  return data_size * fifo_threashold;
 8007840:	fb00 3303 	mla	r3, r0, r3, r3
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007844:	e7d0      	b.n	80077e8 <HAL_SPI_Init+0x138>
    return HAL_ERROR;
 8007846:	2001      	movs	r0, #1
}
 8007848:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800784a:	f1be 0f00 	cmp.w	lr, #0
 800784e:	f47f af79 	bne.w	8007744 <HAL_SPI_Init+0x94>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007852:	6817      	ldr	r7, [r2, #0]
 8007854:	f447 5780 	orr.w	r7, r7, #4096	@ 0x1000
 8007858:	6017      	str	r7, [r2, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800785a:	e773      	b.n	8007744 <HAL_SPI_Init+0x94>
 800785c:	40013000 	.word	0x40013000

08007860 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007860:	2800      	cmp	r0, #0
 8007862:	f000 8094 	beq.w	800798e <HAL_TIM_Base_Init+0x12e>
{
 8007866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007868:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800786c:	4604      	mov	r4, r0
 800786e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007872:	2b00      	cmp	r3, #0
 8007874:	d07b      	beq.n	800796e <HAL_TIM_Base_Init+0x10e>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007876:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007878:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800787a:	4946      	ldr	r1, [pc, #280]	@ (8007994 <HAL_TIM_Base_Init+0x134>)
 800787c:	4846      	ldr	r0, [pc, #280]	@ (8007998 <HAL_TIM_Base_Init+0x138>)
 800787e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007882:	eba3 0101 	sub.w	r1, r3, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8007886:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800788a:	eba3 0e00 	sub.w	lr, r3, r0
  tmpcr1 = TIMx->CR1;
 800788e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007890:	fab1 f181 	clz	r1, r1
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007894:	69a7      	ldr	r7, [r4, #24]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007896:	fabe fe8e 	clz	lr, lr

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800789a:	6865      	ldr	r5, [r4, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800789c:	ea4f 1151 	mov.w	r1, r1, lsr #5
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078a0:	68e6      	ldr	r6, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80078a6:	d020      	beq.n	80078ea <HAL_TIM_Base_Init+0x8a>
 80078a8:	b9f9      	cbnz	r1, 80078ea <HAL_TIM_Base_Init+0x8a>
 80078aa:	f8df c0fc 	ldr.w	ip, [pc, #252]	@ 80079a8 <HAL_TIM_Base_Init+0x148>
 80078ae:	4563      	cmp	r3, ip
 80078b0:	d01b      	beq.n	80078ea <HAL_TIM_Base_Init+0x8a>
 80078b2:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80078b6:	4563      	cmp	r3, ip
 80078b8:	d017      	beq.n	80078ea <HAL_TIM_Base_Init+0x8a>
 80078ba:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 80078be:	4563      	cmp	r3, ip
 80078c0:	d013      	beq.n	80078ea <HAL_TIM_Base_Init+0x8a>
 80078c2:	f1be 0f00 	cmp.w	lr, #0
 80078c6:	d110      	bne.n	80078ea <HAL_TIM_Base_Init+0x8a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078c8:	4834      	ldr	r0, [pc, #208]	@ (800799c <HAL_TIM_Base_Init+0x13c>)
 80078ca:	4935      	ldr	r1, [pc, #212]	@ (80079a0 <HAL_TIM_Base_Init+0x140>)
 80078cc:	428b      	cmp	r3, r1
 80078ce:	bf18      	it	ne
 80078d0:	4283      	cmpne	r3, r0
 80078d2:	d051      	beq.n	8007978 <HAL_TIM_Base_Init+0x118>
 80078d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80078d8:	428b      	cmp	r3, r1
 80078da:	d04d      	beq.n	8007978 <HAL_TIM_Base_Init+0x118>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078e0:	433a      	orrs	r2, r7
  TIMx->CR1 = tmpcr1;
 80078e2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078e4:	62de      	str	r6, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80078e6:	629d      	str	r5, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e8:	e01d      	b.n	8007926 <HAL_TIM_Base_Init+0xc6>
    tmpcr1 |= Structure->CounterMode;
 80078ea:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80078f0:	4302      	orrs	r2, r0
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078f2:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80078f4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078f8:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078fa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078fe:	433a      	orrs	r2, r7
  TIMx->CR1 = tmpcr1;
 8007900:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007902:	62de      	str	r6, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007904:	629d      	str	r5, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007906:	b961      	cbnz	r1, 8007922 <HAL_TIM_Base_Init+0xc2>
 8007908:	f1be 0f00 	cmp.w	lr, #0
 800790c:	d109      	bne.n	8007922 <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800790e:	4925      	ldr	r1, [pc, #148]	@ (80079a4 <HAL_TIM_Base_Init+0x144>)
 8007910:	4a22      	ldr	r2, [pc, #136]	@ (800799c <HAL_TIM_Base_Init+0x13c>)
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007912:	4293      	cmp	r3, r2
 8007914:	bf18      	it	ne
 8007916:	428b      	cmpne	r3, r1
 8007918:	d003      	beq.n	8007922 <HAL_TIM_Base_Init+0xc2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800791a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800791e:	4293      	cmp	r3, r2
 8007920:	d101      	bne.n	8007926 <HAL_TIM_Base_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007922:	6962      	ldr	r2, [r4, #20]
 8007924:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007926:	2201      	movs	r2, #1
 8007928:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	07d2      	lsls	r2, r2, #31
 800792e:	d503      	bpl.n	8007938 <HAL_TIM_Base_Init+0xd8>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	f022 0201 	bic.w	r2, r2, #1
 8007936:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007938:	2301      	movs	r3, #1
  return HAL_OK;
 800793a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800793c:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8007944:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8007948:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800794c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8007950:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007958:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800795c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8007960:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8007964:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8007968:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800796c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800796e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007972:	f7fa fbc9 	bl	8002108 <HAL_TIM_Base_MspInit>
 8007976:	e77e      	b.n	8007876 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007978:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800797a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800797e:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007984:	433a      	orrs	r2, r7
  TIMx->CR1 = tmpcr1;
 8007986:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007988:	62de      	str	r6, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800798a:	629d      	str	r5, [r3, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800798c:	e7bf      	b.n	800790e <HAL_TIM_Base_Init+0xae>
    return HAL_ERROR;
 800798e:	2001      	movs	r0, #1
}
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000
 8007998:	40010400 	.word	0x40010400
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400
 80079a4:	40014800 	.word	0x40014800
 80079a8:	40000400 	.word	0x40000400

080079ac <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80079ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d13d      	bne.n	8007a30 <HAL_TIM_Base_Start_IT+0x84>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079b4:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80079b6:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007a34 <HAL_TIM_Base_Start_IT+0x88>)
 80079ba:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80079be:	bf18      	it	ne
 80079c0:	429a      	cmpne	r2, r3
{
 80079c2:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079c4:	bf0c      	ite	eq
 80079c6:	2301      	moveq	r3, #1
 80079c8:	2300      	movne	r3, #0
 80079ca:	4d1b      	ldr	r5, [pc, #108]	@ (8007a38 <HAL_TIM_Base_Start_IT+0x8c>)
 80079cc:	4c1b      	ldr	r4, [pc, #108]	@ (8007a3c <HAL_TIM_Base_Start_IT+0x90>)
 80079ce:	42aa      	cmp	r2, r5
 80079d0:	bf08      	it	eq
 80079d2:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80079d6:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079da:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079dc:	42a2      	cmp	r2, r4
 80079de:	bf08      	it	eq
 80079e0:	f043 0301 	orreq.w	r3, r3, #1
 80079e4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079e8:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ec:	4814      	ldr	r0, [pc, #80]	@ (8007a40 <HAL_TIM_Base_Start_IT+0x94>)
 80079ee:	42a2      	cmp	r2, r4
 80079f0:	bf08      	it	eq
 80079f2:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079f6:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079f8:	4282      	cmp	r2, r0
 80079fa:	bf08      	it	eq
 80079fc:	f043 0301 	orreq.w	r3, r3, #1
 8007a00:	4910      	ldr	r1, [pc, #64]	@ (8007a44 <HAL_TIM_Base_Start_IT+0x98>)
 8007a02:	428a      	cmp	r2, r1
 8007a04:	bf08      	it	eq
 8007a06:	f043 0301 	orreq.w	r3, r3, #1
 8007a0a:	b913      	cbnz	r3, 8007a12 <HAL_TIM_Base_Start_IT+0x66>
 8007a0c:	4b0e      	ldr	r3, [pc, #56]	@ (8007a48 <HAL_TIM_Base_Start_IT+0x9c>)
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d107      	bne.n	8007a22 <HAL_TIM_Base_Start_IT+0x76>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a12:	6891      	ldr	r1, [r2, #8]
 8007a14:	4b0d      	ldr	r3, [pc, #52]	@ (8007a4c <HAL_TIM_Base_Start_IT+0xa0>)
 8007a16:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a18:	2b06      	cmp	r3, #6
 8007a1a:	d006      	beq.n	8007a2a <HAL_TIM_Base_Start_IT+0x7e>
 8007a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a20:	d003      	beq.n	8007a2a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8007a22:	6813      	ldr	r3, [r2, #0]
 8007a24:	f043 0301 	orr.w	r3, r3, #1
 8007a28:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007a2a:	2000      	movs	r0, #0
}
 8007a2c:	bc30      	pop	{r4, r5}
 8007a2e:	4770      	bx	lr
    return HAL_ERROR;
 8007a30:	2001      	movs	r0, #1
}
 8007a32:	4770      	bx	lr
 8007a34:	40010000 	.word	0x40010000
 8007a38:	40000400 	.word	0x40000400
 8007a3c:	40000800 	.word	0x40000800
 8007a40:	40010400 	.word	0x40010400
 8007a44:	40001800 	.word	0x40001800
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	00010007 	.word	0x00010007

08007a50 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a50:	6802      	ldr	r2, [r0, #0]
  __HAL_TIM_DISABLE(htim);
 8007a52:	f241 1c11 	movw	ip, #4369	@ 0x1111
{
 8007a56:	4603      	mov	r3, r0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a58:	68d1      	ldr	r1, [r2, #12]
 8007a5a:	f021 0101 	bic.w	r1, r1, #1
 8007a5e:	60d1      	str	r1, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8007a60:	6a11      	ldr	r1, [r2, #32]
 8007a62:	ea11 0f0c 	tst.w	r1, ip
 8007a66:	d108      	bne.n	8007a7a <HAL_TIM_Base_Stop_IT+0x2a>
 8007a68:	6a10      	ldr	r0, [r2, #32]
 8007a6a:	f240 4144 	movw	r1, #1092	@ 0x444
 8007a6e:	4208      	tst	r0, r1
 8007a70:	d103      	bne.n	8007a7a <HAL_TIM_Base_Stop_IT+0x2a>
 8007a72:	6811      	ldr	r1, [r2, #0]
 8007a74:	f021 0101 	bic.w	r1, r1, #1
 8007a78:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007a7a:	2201      	movs	r2, #1
}
 8007a7c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop

08007a88 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop

08007a90 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop

08007a94 <HAL_TIM_IRQHandler>:
{
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8007a96:	6803      	ldr	r3, [r0, #0]
{
 8007a98:	4605      	mov	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8007a9a:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007a9c:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007a9e:	07a1      	lsls	r1, r4, #30
 8007aa0:	d501      	bpl.n	8007aa6 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007aa2:	07b2      	lsls	r2, r6, #30
 8007aa4:	d457      	bmi.n	8007b56 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007aa6:	0767      	lsls	r7, r4, #29
 8007aa8:	d501      	bpl.n	8007aae <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007aaa:	0770      	lsls	r0, r6, #29
 8007aac:	d440      	bmi.n	8007b30 <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007aae:	0721      	lsls	r1, r4, #28
 8007ab0:	d501      	bpl.n	8007ab6 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007ab2:	0732      	lsls	r2, r6, #28
 8007ab4:	d42a      	bmi.n	8007b0c <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007ab6:	06e7      	lsls	r7, r4, #27
 8007ab8:	d501      	bpl.n	8007abe <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007aba:	06f0      	lsls	r0, r6, #27
 8007abc:	d413      	bmi.n	8007ae6 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007abe:	07e1      	lsls	r1, r4, #31
 8007ac0:	d501      	bpl.n	8007ac6 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007ac2:	07f2      	lsls	r2, r6, #31
 8007ac4:	d465      	bmi.n	8007b92 <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ac6:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007aca:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ace:	d052      	beq.n	8007b76 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ad0:	0633      	lsls	r3, r6, #24
 8007ad2:	d466      	bmi.n	8007ba2 <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ad4:	0660      	lsls	r0, r4, #25
 8007ad6:	d501      	bpl.n	8007adc <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ad8:	0671      	lsls	r1, r6, #25
 8007ada:	d473      	bmi.n	8007bc4 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007adc:	06a2      	lsls	r2, r4, #26
 8007ade:	d501      	bpl.n	8007ae4 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007ae0:	06b3      	lsls	r3, r6, #26
 8007ae2:	d44d      	bmi.n	8007b80 <HAL_TIM_IRQHandler+0xec>
}
 8007ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ae6:	682b      	ldr	r3, [r5, #0]
 8007ae8:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 8007aec:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007af0:	2208      	movs	r2, #8
 8007af2:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007afa:	d174      	bne.n	8007be6 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afc:	f7ff ffc2 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b00:	4628      	mov	r0, r5
 8007b02:	f7ff ffc3 	bl	8007a8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b06:	2300      	movs	r3, #0
 8007b08:	772b      	strb	r3, [r5, #28]
 8007b0a:	e7d8      	b.n	8007abe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8007b12:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b16:	2204      	movs	r2, #4
 8007b18:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b1a:	69db      	ldr	r3, [r3, #28]
 8007b1c:	079b      	lsls	r3, r3, #30
 8007b1e:	d15f      	bne.n	8007be0 <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b20:	f7ff ffb0 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b24:	4628      	mov	r0, r5
 8007b26:	f7ff ffb1 	bl	8007a8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	772b      	strb	r3, [r5, #28]
 8007b2e:	e7c2      	b.n	8007ab6 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8007b36:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8007b44:	d149      	bne.n	8007bda <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b46:	f7ff ff9d 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	f7ff ff9e 	bl	8007a8c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b50:	2300      	movs	r3, #0
 8007b52:	772b      	strb	r3, [r5, #28]
 8007b54:	e7ab      	b.n	8007aae <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b56:	f06f 0202 	mvn.w	r2, #2
 8007b5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	079b      	lsls	r3, r3, #30
 8007b64:	d136      	bne.n	8007bd4 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b66:	f7ff ff8d 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f7ff ff8e 	bl	8007a8c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b70:	2300      	movs	r3, #0
 8007b72:	772b      	strb	r3, [r5, #28]
 8007b74:	e797      	b.n	8007aa6 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b76:	2f00      	cmp	r7, #0
 8007b78:	d0ac      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b7a:	0637      	lsls	r7, r6, #24
 8007b7c:	d41a      	bmi.n	8007bb4 <HAL_TIM_IRQHandler+0x120>
 8007b7e:	e7a9      	b.n	8007ad4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007b86:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b88:	611a      	str	r2, [r3, #16]
}
 8007b8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 8007b8e:	f000 b887 	b.w	8007ca0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b92:	682b      	ldr	r3, [r5, #0]
 8007b94:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b98:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b9c:	f7f9 fada 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
 8007ba0:	e791      	b.n	8007ac6 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 8007ba8:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007baa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007bac:	f000 f87a 	bl	8007ca4 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007bb0:	2f00      	cmp	r7, #0
 8007bb2:	d08f      	beq.n	8007ad4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 8007bba:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8007bbe:	f000 f873 	bl	8007ca8 <HAL_TIMEx_Break2Callback>
 8007bc2:	e787      	b.n	8007ad4 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bc4:	682b      	ldr	r3, [r5, #0]
 8007bc6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 8007bca:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007bcc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007bce:	f7ff ff5f 	bl	8007a90 <HAL_TIM_TriggerCallback>
 8007bd2:	e783      	b.n	8007adc <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8007bd4:	f7ff ff58 	bl	8007a88 <HAL_TIM_IC_CaptureCallback>
 8007bd8:	e7ca      	b.n	8007b70 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8007bda:	f7ff ff55 	bl	8007a88 <HAL_TIM_IC_CaptureCallback>
 8007bde:	e7b7      	b.n	8007b50 <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 8007be0:	f7ff ff52 	bl	8007a88 <HAL_TIM_IC_CaptureCallback>
 8007be4:	e7a1      	b.n	8007b2a <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8007be6:	f7ff ff4f 	bl	8007a88 <HAL_TIM_IC_CaptureCallback>
 8007bea:	e78c      	b.n	8007b06 <HAL_TIM_IRQHandler+0x72>

08007bec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bec:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d04b      	beq.n	8007c8c <HAL_TIMEx_MasterConfigSynchronization+0xa0>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007bf4:	6803      	ldr	r3, [r0, #0]
 8007bf6:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 8007bf8:	2002      	movs	r0, #2
{
 8007bfa:	b430      	push	{r4, r5}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007bfc:	4d24      	ldr	r5, [pc, #144]	@ (8007c90 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfe:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c02:	42ab      	cmp	r3, r5
  tmpcr2 = htim->Instance->CR2;
 8007c04:	6858      	ldr	r0, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007c06:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c08:	d029      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8007c0a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c0e:	42ab      	cmp	r3, r5
 8007c10:	d025      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c12:	4d20      	ldr	r5, [pc, #128]	@ (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c14:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c18:	42ab      	cmp	r3, r5
 8007c1a:	bf18      	it	ne
 8007c1c:	f1b3 4f80 	cmpne.w	r3, #1073741824	@ 0x40000000
 8007c20:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c24:	bf0c      	ite	eq
 8007c26:	f04f 0c01 	moveq.w	ip, #1
 8007c2a:	f04f 0c00 	movne.w	ip, #0
 8007c2e:	42ab      	cmp	r3, r5
 8007c30:	bf08      	it	eq
 8007c32:	f04c 0c01 	orreq.w	ip, ip, #1
 8007c36:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	bf08      	it	eq
 8007c3e:	f04c 0c01 	orreq.w	ip, ip, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c42:	680d      	ldr	r5, [r1, #0]
 8007c44:	4328      	orrs	r0, r5
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c46:	4d14      	ldr	r5, [pc, #80]	@ (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->Instance->CR2 = tmpcr2;
 8007c48:	6058      	str	r0, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c4a:	42ab      	cmp	r3, r5
 8007c4c:	bf14      	ite	ne
 8007c4e:	4660      	movne	r0, ip
 8007c50:	f04c 0001 	orreq.w	r0, ip, #1
 8007c54:	b960      	cbnz	r0, 8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007c56:	4811      	ldr	r0, [pc, #68]	@ (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c58:	4283      	cmp	r3, r0
 8007c5a:	d009      	beq.n	8007c70 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8007c5c:	e00d      	b.n	8007c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c5e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c60:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c64:	4328      	orrs	r0, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c66:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c68:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c6c:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8007c6e:	6058      	str	r0, [r3, #4]
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c70:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c72:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c76:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c78:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8007c7a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8007c7c:	2101      	movs	r1, #1

  return HAL_OK;
 8007c7e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8007c80:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8007c84:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8007c88:	bc30      	pop	{r4, r5}
 8007c8a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007c8c:	2002      	movs	r0, #2
}
 8007c8e:	4770      	bx	lr
 8007c90:	40010000 	.word	0x40010000
 8007c94:	40000400 	.word	0x40000400
 8007c98:	40001800 	.word	0x40001800
 8007c9c:	40014000 	.word	0x40014000

08007ca0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop

08007ca4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop

08007ca8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop

08007cac <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cac:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8007cb0:	2b20      	cmp	r3, #32
 8007cb2:	d15d      	bne.n	8007d70 <HAL_UART_Receive_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	d060      	beq.n	8007d7a <HAL_UART_Receive_IT+0xce>
{
 8007cb8:	b430      	push	{r4, r5}
    if ((pData == NULL) || (Size == 0U))
 8007cba:	fab2 f482 	clz	r4, r2
 8007cbe:	0964      	lsrs	r4, r4, #5
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	d057      	beq.n	8007d74 <HAL_UART_Receive_IT+0xc8>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cc4:	6803      	ldr	r3, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	66c4      	str	r4, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cc8:	4c57      	ldr	r4, [pc, #348]	@ (8007e28 <HAL_UART_Receive_IT+0x17c>)
 8007cca:	42a3      	cmp	r3, r4
 8007ccc:	d002      	beq.n	8007cd4 <HAL_UART_Receive_IT+0x28>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007cce:	685c      	ldr	r4, [r3, #4]
 8007cd0:	0224      	lsls	r4, r4, #8
 8007cd2:	d43c      	bmi.n	8007d4e <HAL_UART_Receive_IT+0xa2>
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  huart->pRxBuffPtr  = pData;
 8007cd4:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
  huart->RxXferCount = Size;
  huart->RxISR       = NULL;
 8007cd6:	2400      	movs	r4, #0

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007cd8:	6881      	ldr	r1, [r0, #8]
  huart->RxXferSize  = Size;
 8007cda:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  UART_MASK_COMPUTATION(huart);
 8007cde:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
  huart->RxXferCount = Size;
 8007ce2:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007ce6:	6744      	str	r4, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8007ce8:	d066      	beq.n	8007db8 <HAL_UART_Receive_IT+0x10c>
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d147      	bne.n	8007d7e <HAL_UART_Receive_IT+0xd2>
 8007cee:	6901      	ldr	r1, [r0, #16]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	bf14      	ite	ne
 8007cf4:	247f      	movne	r4, #127	@ 0x7f
 8007cf6:	24ff      	moveq	r4, #255	@ 0xff

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf8:	2100      	movs	r1, #0
  UART_MASK_COMPUTATION(huart);
 8007cfa:	f8a0 4060 	strh.w	r4, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cfe:	f8c0 1090 	str.w	r1, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d02:	2122      	movs	r1, #34	@ 0x22
 8007d04:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	f103 0108 	add.w	r1, r3, #8
 8007d0c:	e851 1f00 	ldrex	r1, [r1]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d10:	f041 0101 	orr.w	r1, r1, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d14:	f103 0508 	add.w	r5, r3, #8
 8007d18:	e845 1400 	strex	r4, r1, [r5]
 8007d1c:	2c00      	cmp	r4, #0
 8007d1e:	d1f3      	bne.n	8007d08 <HAL_UART_Receive_IT+0x5c>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d20:	6e41      	ldr	r1, [r0, #100]	@ 0x64
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d22:	6885      	ldr	r5, [r0, #8]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d24:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d28:	6904      	ldr	r4, [r0, #16]
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d2a:	d04c      	beq.n	8007dc6 <HAL_UART_Receive_IT+0x11a>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d2c:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007d30:	d02e      	beq.n	8007d90 <HAL_UART_Receive_IT+0xe4>
 8007d32:	4a3e      	ldr	r2, [pc, #248]	@ (8007e2c <HAL_UART_Receive_IT+0x180>)
 8007d34:	6742      	str	r2, [r0, #116]	@ 0x74
    {
      huart->RxISR = UART_RxISR_8BIT;
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d36:	b374      	cbz	r4, 8007d96 <HAL_UART_Receive_IT+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d38:	e853 2f00 	ldrex	r2, [r3]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d3c:	f442 7290 	orr.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d40:	e843 2100 	strex	r1, r2, [r3]
 8007d44:	2900      	cmp	r1, #0
 8007d46:	d1f7      	bne.n	8007d38 <HAL_UART_Receive_IT+0x8c>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d48:	2000      	movs	r0, #0
}
 8007d4a:	bc30      	pop	{r4, r5}
 8007d4c:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	e853 4f00 	ldrex	r4, [r3]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d52:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	e843 4500 	strex	r5, r4, [r3]
 8007d5a:	2d00      	cmp	r5, #0
 8007d5c:	d0ba      	beq.n	8007cd4 <HAL_UART_Receive_IT+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d5e:	e853 4f00 	ldrex	r4, [r3]
 8007d62:	f044 6480 	orr.w	r4, r4, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	e843 4500 	strex	r5, r4, [r3]
 8007d6a:	2d00      	cmp	r5, #0
 8007d6c:	d1ef      	bne.n	8007d4e <HAL_UART_Receive_IT+0xa2>
 8007d6e:	e7b1      	b.n	8007cd4 <HAL_UART_Receive_IT+0x28>
    return HAL_BUSY;
 8007d70:	2002      	movs	r0, #2
 8007d72:	4770      	bx	lr
      return HAL_ERROR;
 8007d74:	2001      	movs	r0, #1
}
 8007d76:	bc30      	pop	{r4, r5}
 8007d78:	4770      	bx	lr
      return HAL_ERROR;
 8007d7a:	2001      	movs	r0, #1
}
 8007d7c:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007d7e:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
 8007d82:	d1b9      	bne.n	8007cf8 <HAL_UART_Receive_IT+0x4c>
 8007d84:	6901      	ldr	r1, [r0, #16]
 8007d86:	2900      	cmp	r1, #0
 8007d88:	bf14      	ite	ne
 8007d8a:	243f      	movne	r4, #63	@ 0x3f
 8007d8c:	247f      	moveq	r4, #127	@ 0x7f
 8007d8e:	e7b3      	b.n	8007cf8 <HAL_UART_Receive_IT+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d90:	bb84      	cbnz	r4, 8007df4 <HAL_UART_Receive_IT+0x148>
 8007d92:	4a27      	ldr	r2, [pc, #156]	@ (8007e30 <HAL_UART_Receive_IT+0x184>)
 8007d94:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	e853 2f00 	ldrex	r2, [r3]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d9a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d9e:	e843 2100 	strex	r1, r2, [r3]
 8007da2:	2900      	cmp	r1, #0
 8007da4:	d0d0      	beq.n	8007d48 <HAL_UART_Receive_IT+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	e853 2f00 	ldrex	r2, [r3]
 8007daa:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dae:	e843 2100 	strex	r1, r2, [r3]
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d1ef      	bne.n	8007d96 <HAL_UART_Receive_IT+0xea>
 8007db6:	e7c7      	b.n	8007d48 <HAL_UART_Receive_IT+0x9c>
  UART_MASK_COMPUTATION(huart);
 8007db8:	6901      	ldr	r1, [r0, #16]
 8007dba:	f240 14ff 	movw	r4, #511	@ 0x1ff
 8007dbe:	2900      	cmp	r1, #0
 8007dc0:	bf18      	it	ne
 8007dc2:	24ff      	movne	r4, #255	@ 0xff
 8007dc4:	e798      	b.n	8007cf8 <HAL_UART_Receive_IT+0x4c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007dc6:	f8b0 1068 	ldrh.w	r1, [r0, #104]	@ 0x68
 8007dca:	4291      	cmp	r1, r2
 8007dcc:	d8ae      	bhi.n	8007d2c <HAL_UART_Receive_IT+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dce:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007dd2:	d012      	beq.n	8007dfa <HAL_UART_Receive_IT+0x14e>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007dd4:	4a17      	ldr	r2, [pc, #92]	@ (8007e34 <HAL_UART_Receive_IT+0x188>)
 8007dd6:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007dd8:	b994      	cbnz	r4, 8007e00 <HAL_UART_Receive_IT+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dda:	f103 0208 	add.w	r2, r3, #8
 8007dde:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007de2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de6:	f103 0008 	add.w	r0, r3, #8
 8007dea:	e840 2100 	strex	r1, r2, [r0]
 8007dee:	2900      	cmp	r1, #0
 8007df0:	d1f3      	bne.n	8007dda <HAL_UART_Receive_IT+0x12e>
 8007df2:	e7a9      	b.n	8007d48 <HAL_UART_Receive_IT+0x9c>
 8007df4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e2c <HAL_UART_Receive_IT+0x180>)
 8007df6:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007df8:	e79e      	b.n	8007d38 <HAL_UART_Receive_IT+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007dfa:	b194      	cbz	r4, 8007e22 <HAL_UART_Receive_IT+0x176>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8007e34 <HAL_UART_Receive_IT+0x188>)
 8007dfe:	6742      	str	r2, [r0, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	e843 2100 	strex	r1, r2, [r3]
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	d0e4      	beq.n	8007dda <HAL_UART_Receive_IT+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	e853 2f00 	ldrex	r2, [r3]
 8007e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	e843 2100 	strex	r1, r2, [r3]
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d1ef      	bne.n	8007e00 <HAL_UART_Receive_IT+0x154>
 8007e20:	e7db      	b.n	8007dda <HAL_UART_Receive_IT+0x12e>
 8007e22:	4a05      	ldr	r2, [pc, #20]	@ (8007e38 <HAL_UART_Receive_IT+0x18c>)
 8007e24:	6742      	str	r2, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e26:	e7d8      	b.n	8007dda <HAL_UART_Receive_IT+0x12e>
 8007e28:	58000c00 	.word	0x58000c00
 8007e2c:	080082cd 	.word	0x080082cd
 8007e30:	08008285 	.word	0x08008285
 8007e34:	08008311 	.word	0x08008311
 8007e38:	080084fd 	.word	0x080084fd

08007e3c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop

08007e40 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop

08007e44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e44:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e46:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8007e4e:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e52:	f7ff fff5 	bl	8007e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e56:	bd08      	pop	{r3, pc}

08007e58 <HAL_UARTEx_RxEventCallback>:
}
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop

08007e5c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e5c:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e5e:	f640 0c0f 	movw	ip, #2063	@ 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e62:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e64:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8007e66:	ea12 0f0c 	tst.w	r2, ip
{
 8007e6a:	b570      	push	{r4, r5, r6, lr}
 8007e6c:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e6e:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 8007e70:	d145      	bne.n	8007efe <HAL_UART_IRQHandler+0xa2>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e72:	0696      	lsls	r6, r2, #26
 8007e74:	d507      	bpl.n	8007e86 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e76:	f001 0c20 	and.w	ip, r1, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e7a:	f005 5e80 	and.w	lr, r5, #268435456	@ 0x10000000
 8007e7e:	ea5c 0c0e 	orrs.w	ip, ip, lr
 8007e82:	f040 813a 	bne.w	80080fa <HAL_UART_IRQHandler+0x29e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e86:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8007e88:	2801      	cmp	r0, #1
 8007e8a:	f000 80d6 	beq.w	800803a <HAL_UART_IRQHandler+0x1de>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e8e:	02d6      	lsls	r6, r2, #11
 8007e90:	d41d      	bmi.n	8007ece <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e92:	0616      	lsls	r6, r2, #24
 8007e94:	d506      	bpl.n	8007ea4 <HAL_UART_IRQHandler+0x48>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e96:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e9a:	f001 0080 	and.w	r0, r1, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e9e:	4328      	orrs	r0, r5
 8007ea0:	f040 8132 	bne.w	8008108 <HAL_UART_IRQHandler+0x2ac>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ea4:	0650      	lsls	r0, r2, #25
 8007ea6:	d51c      	bpl.n	8007ee2 <HAL_UART_IRQHandler+0x86>
 8007ea8:	064e      	lsls	r6, r1, #25
 8007eaa:	d51a      	bpl.n	8007ee2 <HAL_UART_IRQHandler+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eac:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb4:	e843 2100 	strex	r1, r2, [r3]
 8007eb8:	2900      	cmp	r1, #0
 8007eba:	d1f7      	bne.n	8007eac <HAL_UART_IRQHandler+0x50>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ebc:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ebe:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ec0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8007ec2:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->TxISR = NULL;
 8007ec6:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8007ec8:	f7ff ffb8 	bl	8007e3c <HAL_UART_TxCpltCallback>
}
 8007ecc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ece:	0268      	lsls	r0, r5, #9
 8007ed0:	d5df      	bpl.n	8007e92 <HAL_UART_IRQHandler+0x36>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ed2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8007ed6:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ed8:	621a      	str	r2, [r3, #32]
}
 8007eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8007ede:	f000 bf77 	b.w	8008dd0 <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ee2:	0215      	lsls	r5, r2, #8
 8007ee4:	d502      	bpl.n	8007eec <HAL_UART_IRQHandler+0x90>
 8007ee6:	0048      	lsls	r0, r1, #1
 8007ee8:	f100 8134 	bmi.w	8008154 <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007eec:	01d3      	lsls	r3, r2, #7
 8007eee:	d5ed      	bpl.n	8007ecc <HAL_UART_IRQHandler+0x70>
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	daeb      	bge.n	8007ecc <HAL_UART_IRQHandler+0x70>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007ef4:	4620      	mov	r0, r4
}
 8007ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007efa:	f000 bf6b 	b.w	8008dd4 <HAL_UARTEx_RxFifoFullCallback>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007efe:	48b6      	ldr	r0, [pc, #728]	@ (80081d8 <HAL_UART_IRQHandler+0x37c>)
 8007f00:	ea05 0c00 	and.w	ip, r5, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f04:	48b5      	ldr	r0, [pc, #724]	@ (80081dc <HAL_UART_IRQHandler+0x380>)
 8007f06:	4008      	ands	r0, r1
 8007f08:	ea50 000c 	orrs.w	r0, r0, ip
 8007f0c:	d0bb      	beq.n	8007e86 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f0e:	07d6      	lsls	r6, r2, #31
 8007f10:	d509      	bpl.n	8007f26 <HAL_UART_IRQHandler+0xca>
 8007f12:	05c8      	lsls	r0, r1, #23
 8007f14:	d507      	bpl.n	8007f26 <HAL_UART_IRQHandler+0xca>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f16:	2001      	movs	r0, #1
 8007f18:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f1a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f1e:	f040 0001 	orr.w	r0, r0, #1
 8007f22:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f26:	0796      	lsls	r6, r2, #30
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f28:	f002 0004 	and.w	r0, r2, #4
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f2c:	f140 80de 	bpl.w	80080ec <HAL_UART_IRQHandler+0x290>
 8007f30:	07ee      	lsls	r6, r5, #31
 8007f32:	d510      	bpl.n	8007f56 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f34:	2602      	movs	r6, #2
 8007f36:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f38:	f8d4 6090 	ldr.w	r6, [r4, #144]	@ 0x90
 8007f3c:	f046 0604 	orr.w	r6, r6, #4
 8007f40:	f8c4 6090 	str.w	r6, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f44:	b138      	cbz	r0, 8007f56 <HAL_UART_IRQHandler+0xfa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f46:	2004      	movs	r0, #4
 8007f48:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f4a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f4e:	f040 0002 	orr.w	r0, r0, #2
 8007f52:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f56:	0716      	lsls	r6, r2, #28
 8007f58:	d50c      	bpl.n	8007f74 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f5a:	f001 0020 	and.w	r0, r1, #32
 8007f5e:	ea50 000c 	orrs.w	r0, r0, ip
 8007f62:	d007      	beq.n	8007f74 <HAL_UART_IRQHandler+0x118>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f64:	2008      	movs	r0, #8
 8007f66:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f68:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f6c:	f040 0008 	orr.w	r0, r0, #8
 8007f70:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f74:	0510      	lsls	r0, r2, #20
 8007f76:	d50a      	bpl.n	8007f8e <HAL_UART_IRQHandler+0x132>
 8007f78:	014e      	lsls	r6, r1, #5
 8007f7a:	d508      	bpl.n	8007f8e <HAL_UART_IRQHandler+0x132>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f7c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8007f80:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f82:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f86:	f040 0020 	orr.w	r0, r0, #32
 8007f8a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f8e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 8007f92:	2800      	cmp	r0, #0
 8007f94:	d09a      	beq.n	8007ecc <HAL_UART_IRQHandler+0x70>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f96:	0690      	lsls	r0, r2, #26
 8007f98:	d506      	bpl.n	8007fa8 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f9a:	f001 0120 	and.w	r1, r1, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f9e:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 8007fa2:	4329      	orrs	r1, r5
 8007fa4:	f040 80ca 	bne.w	800813c <HAL_UART_IRQHandler+0x2e0>
      errorcode = huart->ErrorCode;
 8007fa8:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fac:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fae:	f001 0128 	and.w	r1, r1, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fb2:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8007fb6:	ea52 0501 	orrs.w	r5, r2, r1
 8007fba:	f000 80d0 	beq.w	800815e <HAL_UART_IRQHandler+0x302>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	e843 2100 	strex	r1, r2, [r3]
 8007fca:	2900      	cmp	r1, #0
 8007fcc:	d1f7      	bne.n	8007fbe <HAL_UART_IRQHandler+0x162>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fce:	4884      	ldr	r0, [pc, #528]	@ (80081e0 <HAL_UART_IRQHandler+0x384>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd0:	f103 0208 	add.w	r2, r3, #8
 8007fd4:	e852 2f00 	ldrex	r2, [r2]
 8007fd8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	f103 0508 	add.w	r5, r3, #8
 8007fde:	e845 2100 	strex	r1, r2, [r5]
 8007fe2:	2900      	cmp	r1, #0
 8007fe4:	d1f4      	bne.n	8007fd0 <HAL_UART_IRQHandler+0x174>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fe6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8007fe8:	2a01      	cmp	r2, #1
 8007fea:	f000 8095 	beq.w	8008118 <HAL_UART_IRQHandler+0x2bc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fee:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	2120      	movs	r1, #32
 8007ff2:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ff6:	66e2      	str	r2, [r4, #108]	@ 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ff8:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
 8007ffa:	6762      	str	r2, [r4, #116]	@ 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	064a      	lsls	r2, r1, #25
 8007ffe:	f140 80a5 	bpl.w	800814c <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	f103 0208 	add.w	r2, r3, #8
 8008006:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800800a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800e:	f103 0008 	add.w	r0, r3, #8
 8008012:	e840 2100 	strex	r1, r2, [r0]
 8008016:	2900      	cmp	r1, #0
 8008018:	d1f3      	bne.n	8008002 <HAL_UART_IRQHandler+0x1a6>
          if (huart->hdmarx != NULL)
 800801a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800801e:	2800      	cmp	r0, #0
 8008020:	f000 8094 	beq.w	800814c <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008024:	4b6f      	ldr	r3, [pc, #444]	@ (80081e4 <HAL_UART_IRQHandler+0x388>)
 8008026:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008028:	f7fc fbfc 	bl	8004824 <HAL_DMA_Abort_IT>
 800802c:	2800      	cmp	r0, #0
 800802e:	f43f af4d 	beq.w	8007ecc <HAL_UART_IRQHandler+0x70>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008032:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008036:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008038:	e063      	b.n	8008102 <HAL_UART_IRQHandler+0x2a6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800803a:	06d6      	lsls	r6, r2, #27
 800803c:	f57f af27 	bpl.w	8007e8e <HAL_UART_IRQHandler+0x32>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008040:	06c8      	lsls	r0, r1, #27
 8008042:	f57f af24 	bpl.w	8007e8e <HAL_UART_IRQHandler+0x32>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008046:	2210      	movs	r2, #16
 8008048:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800804a:	689a      	ldr	r2, [r3, #8]
 800804c:	0652      	lsls	r2, r2, #25
 800804e:	f140 808c 	bpl.w	800816a <HAL_UART_IRQHandler+0x30e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008052:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8008056:	6801      	ldr	r1, [r0, #0]
 8008058:	684a      	ldr	r2, [r1, #4]
 800805a:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800805c:	2a00      	cmp	r2, #0
 800805e:	f43f af35 	beq.w	8007ecc <HAL_UART_IRQHandler+0x70>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008062:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008066:	4291      	cmp	r1, r2
 8008068:	f67f af30 	bls.w	8007ecc <HAL_UART_IRQHandler+0x70>
        huart->RxXferCount = nb_remaining_rx_data;
 800806c:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008070:	69c2      	ldr	r2, [r0, #28]
 8008072:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8008076:	d02f      	beq.n	80080d8 <HAL_UART_IRQHandler+0x27c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008078:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800807c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	e843 2100 	strex	r1, r2, [r3]
 8008084:	2900      	cmp	r1, #0
 8008086:	d1f7      	bne.n	8008078 <HAL_UART_IRQHandler+0x21c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008088:	f103 0208 	add.w	r2, r3, #8
 800808c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008090:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008094:	f103 0508 	add.w	r5, r3, #8
 8008098:	e845 2100 	strex	r1, r2, [r5]
 800809c:	2900      	cmp	r1, #0
 800809e:	d1f3      	bne.n	8008088 <HAL_UART_IRQHandler+0x22c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	f103 0208 	add.w	r2, r3, #8
 80080a4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	f103 0508 	add.w	r5, r3, #8
 80080b0:	e845 2100 	strex	r1, r2, [r5]
 80080b4:	2900      	cmp	r1, #0
 80080b6:	d1f3      	bne.n	80080a0 <HAL_UART_IRQHandler+0x244>
          huart->RxState = HAL_UART_STATE_READY;
 80080b8:	2220      	movs	r2, #32
 80080ba:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	e843 2100 	strex	r1, r2, [r3]
 80080cc:	2900      	cmp	r1, #0
 80080ce:	d1f7      	bne.n	80080c0 <HAL_UART_IRQHandler+0x264>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80080d0:	f7fc f9f6 	bl	80044c0 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080d4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080d8:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080da:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80080dc:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80080de:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80080e2:	1ac9      	subs	r1, r1, r3
 80080e4:	b289      	uxth	r1, r1
 80080e6:	f7ff feb7 	bl	8007e58 <HAL_UARTEx_RxEventCallback>
}
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080ec:	2800      	cmp	r0, #0
 80080ee:	f43f af32 	beq.w	8007f56 <HAL_UART_IRQHandler+0xfa>
 80080f2:	07e8      	lsls	r0, r5, #31
 80080f4:	f53f af27 	bmi.w	8007f46 <HAL_UART_IRQHandler+0xea>
 80080f8:	e72d      	b.n	8007f56 <HAL_UART_IRQHandler+0xfa>
      if (huart->RxISR != NULL)
 80080fa:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	f43f aee5 	beq.w	8007ecc <HAL_UART_IRQHandler+0x70>
}
 8008102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008106:	4718      	bx	r3
    if (huart->TxISR != NULL)
 8008108:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800810a:	2b00      	cmp	r3, #0
 800810c:	f43f aede 	beq.w	8007ecc <HAL_UART_IRQHandler+0x70>
      huart->TxISR(huart);
 8008110:	4620      	mov	r0, r4
}
 8008112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8008116:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008118:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800811c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008120:	e843 2100 	strex	r1, r2, [r3]
 8008124:	2900      	cmp	r1, #0
 8008126:	f43f af62 	beq.w	8007fee <HAL_UART_IRQHandler+0x192>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812a:	e853 2f00 	ldrex	r2, [r3]
 800812e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	e843 2100 	strex	r1, r2, [r3]
 8008136:	2900      	cmp	r1, #0
 8008138:	d1ee      	bne.n	8008118 <HAL_UART_IRQHandler+0x2bc>
 800813a:	e758      	b.n	8007fee <HAL_UART_IRQHandler+0x192>
        if (huart->RxISR != NULL)
 800813c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800813e:	2a00      	cmp	r2, #0
 8008140:	f43f af32 	beq.w	8007fa8 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8008144:	4620      	mov	r0, r4
 8008146:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008148:	6823      	ldr	r3, [r4, #0]
 800814a:	e72d      	b.n	8007fa8 <HAL_UART_IRQHandler+0x14c>
            HAL_UART_ErrorCallback(huart);
 800814c:	4620      	mov	r0, r4
 800814e:	f7ff fe77 	bl	8007e40 <HAL_UART_ErrorCallback>
}
 8008152:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008154:	4620      	mov	r0, r4
}
 8008156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800815a:	f000 be3d 	b.w	8008dd8 <HAL_UARTEx_TxFifoEmptyCallback>
        HAL_UART_ErrorCallback(huart);
 800815e:	4620      	mov	r0, r4
 8008160:	f7ff fe6e 	bl	8007e40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008164:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
}
 8008168:	bd70      	pop	{r4, r5, r6, pc}
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800816a:	f8b4 005e 	ldrh.w	r0, [r4, #94]	@ 0x5e
 800816e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
      if ((huart->RxXferCount > 0U)
 8008172:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008176:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8008178:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800817a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800817c:	2a00      	cmp	r2, #0
 800817e:	f43f aea5 	beq.w	8007ecc <HAL_UART_IRQHandler+0x70>
 8008182:	2900      	cmp	r1, #0
 8008184:	f43f aea2 	beq.w	8007ecc <HAL_UART_IRQHandler+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800818c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008190:	e843 2000 	strex	r0, r2, [r3]
 8008194:	2800      	cmp	r0, #0
 8008196:	d1f7      	bne.n	8008188 <HAL_UART_IRQHandler+0x32c>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008198:	4d11      	ldr	r5, [pc, #68]	@ (80081e0 <HAL_UART_IRQHandler+0x384>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	f103 0208 	add.w	r2, r3, #8
 800819e:	e852 2f00 	ldrex	r2, [r2]
 80081a2:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	f103 0608 	add.w	r6, r3, #8
 80081a8:	e846 2000 	strex	r0, r2, [r6]
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d1f4      	bne.n	800819a <HAL_UART_IRQHandler+0x33e>
        huart->RxState = HAL_UART_STATE_READY;
 80081b0:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 80081b2:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80081b4:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b8:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081be:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	e843 2000 	strex	r0, r2, [r3]
 80081c6:	2800      	cmp	r0, #0
 80081c8:	d1f7      	bne.n	80081ba <HAL_UART_IRQHandler+0x35e>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081ca:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081cc:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80081ce:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80081d0:	f7ff fe42 	bl	8007e58 <HAL_UARTEx_RxEventCallback>
}
 80081d4:	bd70      	pop	{r4, r5, r6, pc}
 80081d6:	bf00      	nop
 80081d8:	10000001 	.word	0x10000001
 80081dc:	04000120 	.word	0x04000120
 80081e0:	effffffe 	.word	0xeffffffe
 80081e4:	08007e45 	.word	0x08007e45

080081e8 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
 80081e8:	6803      	ldr	r3, [r0, #0]
 80081ea:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ec:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f4:	e843 2100 	strex	r1, r2, [r3]
 80081f8:	2900      	cmp	r1, #0
 80081fa:	d1f7      	bne.n	80081ec <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	f103 0208 	add.w	r2, r3, #8
 8008200:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008204:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008208:	f103 0408 	add.w	r4, r3, #8
 800820c:	e844 2100 	strex	r1, r2, [r4]
 8008210:	2900      	cmp	r1, #0
 8008212:	d1f3      	bne.n	80081fc <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008214:	4a1a      	ldr	r2, [pc, #104]	@ (8008280 <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxState = HAL_UART_STATE_READY;
 8008216:	2420      	movs	r4, #32
      huart->RxISR = NULL;
 8008218:	6741      	str	r1, [r0, #116]	@ 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800821a:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
 800821c:	f8c0 408c 	str.w	r4, [r0, #140]	@ 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008220:	6701      	str	r1, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008222:	d002      	beq.n	800822a <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	0211      	lsls	r1, r2, #8
 8008228:	d416      	bmi.n	8008258 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800822a:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 800822c:	2a01      	cmp	r2, #1
 800822e:	d124      	bne.n	800827a <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008230:	2200      	movs	r2, #0
 8008232:	66c2      	str	r2, [r0, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008238:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823c:	e843 2100 	strex	r1, r2, [r3]
 8008240:	2900      	cmp	r1, #0
 8008242:	d1f7      	bne.n	8008234 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008244:	69da      	ldr	r2, [r3, #28]
 8008246:	06d2      	lsls	r2, r2, #27
 8008248:	d501      	bpl.n	800824e <UART_RxISR_16BIT.part.0+0x66>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800824a:	2210      	movs	r2, #16
 800824c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800824e:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008252:	f7ff fe01 	bl	8007e58 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008256:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008258:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800825c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008260:	e843 2100 	strex	r1, r2, [r3]
 8008264:	2900      	cmp	r1, #0
 8008266:	d0e0      	beq.n	800822a <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	e853 2f00 	ldrex	r2, [r3]
 800826c:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	e843 2100 	strex	r1, r2, [r3]
 8008274:	2900      	cmp	r1, #0
 8008276:	d1ef      	bne.n	8008258 <UART_RxISR_16BIT.part.0+0x70>
 8008278:	e7d7      	b.n	800822a <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
 800827a:	f7f9 f867 	bl	800134c <HAL_UART_RxCpltCallback>
}
 800827e:	bd10      	pop	{r4, pc}
 8008280:	58000c00 	.word	0x58000c00

08008284 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008284:	b410      	push	{r4}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008286:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 800828a:	f8b0 1060 	ldrh.w	r1, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800828e:	2c22      	cmp	r4, #34	@ 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008290:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008292:	d006      	beq.n	80082a2 <UART_RxISR_16BIT+0x1e>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008294:	6993      	ldr	r3, [r2, #24]
 8008296:	f043 0308 	orr.w	r3, r3, #8
 800829a:	6193      	str	r3, [r2, #24]
  }
}
 800829c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a0:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80082a4:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80082a6:	4011      	ands	r1, r2
 80082a8:	f824 1b02 	strh.w	r1, [r4], #2
    huart->RxXferCount--;
 80082ac:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr += 2U;
 80082b0:	6584      	str	r4, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80082b2:	3a01      	subs	r2, #1
 80082b4:	b292      	uxth	r2, r2
 80082b6:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 80082ba:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 80082be:	b29b      	uxth	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1eb      	bne.n	800829c <UART_RxISR_16BIT+0x18>
}
 80082c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c8:	f7ff bf8e 	b.w	80081e8 <UART_RxISR_16BIT.part.0>

080082cc <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082cc:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
  uint16_t uhMask = huart->Mask;
 80082d0:	f8b0 c060 	ldrh.w	ip, [r0, #96]	@ 0x60
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082d4:	2922      	cmp	r1, #34	@ 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082d6:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082d8:	d004      	beq.n	80082e4 <UART_RxISR_8BIT+0x18>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082da:	6993      	ldr	r3, [r2, #24]
 80082dc:	f043 0308 	orr.w	r3, r3, #8
 80082e0:	6193      	str	r3, [r2, #24]
}
 80082e2:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80082e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80082e6:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 80082e8:	ea02 020c 	and.w	r2, r2, ip
 80082ec:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
 80082ee:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
    huart->pRxBuffPtr++;
 80082f2:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80082f4:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
 80082f6:	3101      	adds	r1, #1
    huart->RxXferCount--;
 80082f8:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
 80082fa:	6581      	str	r1, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 80082fc:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8008300:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1eb      	bne.n	80082e2 <UART_RxISR_8BIT+0x16>
 800830a:	f7ff bf6d 	b.w	80081e8 <UART_RxISR_16BIT.part.0>
 800830e:	bf00      	nop

08008310 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008314:	6802      	ldr	r2, [r0, #0]
{
 8008316:	4604      	mov	r4, r0
  uint16_t  uhMask = huart->Mask;
 8008318:	f8b0 a060 	ldrh.w	sl, [r0, #96]	@ 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800831c:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800831e:	6816      	ldr	r6, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008320:	6895      	ldr	r5, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008322:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 8008326:	2922      	cmp	r1, #34	@ 0x22
 8008328:	d006      	beq.n	8008338 <UART_RxISR_8BIT_FIFOEN+0x28>
 800832a:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800832c:	6992      	ldr	r2, [r2, #24]
 800832e:	f042 0208 	orr.w	r2, r2, #8
 8008332:	619a      	str	r2, [r3, #24]
  }
}
 8008334:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008338:	f8b4 3068 	ldrh.w	r3, [r4, #104]	@ 0x68
 800833c:	2b00      	cmp	r3, #0
 800833e:	f000 80d4 	beq.w	80084ea <UART_RxISR_8BIT_FIFOEN+0x1da>
 8008342:	0680      	lsls	r0, r0, #26
 8008344:	f140 8088 	bpl.w	8008458 <UART_RxISR_8BIT_FIFOEN+0x148>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008348:	f406 7680 	and.w	r6, r6, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800834c:	f005 0501 	and.w	r5, r5, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008350:	fa5f fa8a 	uxtb.w	sl, sl
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008354:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008358:	f8df 919c 	ldr.w	r9, [pc, #412]	@ 80084f8 <UART_RxISR_8BIT_FIFOEN+0x1e8>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800835c:	4f64      	ldr	r7, [pc, #400]	@ (80084f0 <UART_RxISR_8BIT_FIFOEN+0x1e0>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800835e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008360:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008362:	ea0a 0202 	and.w	r2, sl, r2
 8008366:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
 8008368:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800836c:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
 800836e:	3901      	subs	r1, #1
      huart->pRxBuffPtr++;
 8008370:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8008372:	b289      	uxth	r1, r1
      huart->pRxBuffPtr++;
 8008374:	3201      	adds	r2, #1
      huart->RxXferCount--;
 8008376:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800837a:	f8d3 b01c 	ldr.w	fp, [r3, #28]
      huart->pRxBuffPtr++;
 800837e:	65a2      	str	r2, [r4, #88]	@ 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008380:	f01b 0f07 	tst.w	fp, #7
 8008384:	d01d      	beq.n	80083c2 <UART_RxISR_8BIT_FIFOEN+0xb2>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008386:	f01b 0f01 	tst.w	fp, #1
 800838a:	d008      	beq.n	800839e <UART_RxISR_8BIT_FIFOEN+0x8e>
 800838c:	b13e      	cbz	r6, 800839e <UART_RxISR_8BIT_FIFOEN+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800838e:	2201      	movs	r2, #1
 8008390:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008392:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8008396:	f042 0201 	orr.w	r2, r2, #1
 800839a:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800839e:	f01b 0f02 	tst.w	fp, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083a2:	f00b 0204 	and.w	r2, fp, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083a6:	d015      	beq.n	80083d4 <UART_RxISR_8BIT_FIFOEN+0xc4>
 80083a8:	b145      	cbz	r5, 80083bc <UART_RxISR_8BIT_FIFOEN+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80083aa:	2102      	movs	r1, #2
 80083ac:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083ae:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 80083b2:	f041 0104 	orr.w	r1, r1, #4
 80083b6:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083ba:	b97a      	cbnz	r2, 80083dc <UART_RxISR_8BIT_FIFOEN+0xcc>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083c0:	b9c3      	cbnz	r3, 80083f4 <UART_RxISR_8BIT_FIFOEN+0xe4>
      if (huart->RxXferCount == 0U)
 80083c2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	b1f3      	cbz	r3, 8008408 <UART_RxISR_8BIT_FIFOEN+0xf8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083ca:	f01b 0f20 	tst.w	fp, #32
 80083ce:	d043      	beq.n	8008458 <UART_RxISR_8BIT_FIFOEN+0x148>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80083d0:	6822      	ldr	r2, [r4, #0]
 80083d2:	e7c4      	b.n	800835e <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083d4:	2a00      	cmp	r2, #0
 80083d6:	d0f1      	beq.n	80083bc <UART_RxISR_8BIT_FIFOEN+0xac>
 80083d8:	2d00      	cmp	r5, #0
 80083da:	d0ef      	beq.n	80083bc <UART_RxISR_8BIT_FIFOEN+0xac>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80083dc:	2204      	movs	r2, #4
 80083de:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083e0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083ec:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d0e6      	beq.n	80083c2 <UART_RxISR_8BIT_FIFOEN+0xb2>
          HAL_UART_ErrorCallback(huart);
 80083f4:	4620      	mov	r0, r4
 80083f6:	f7ff fd23 	bl	8007e40 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fa:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 80083fe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008402:	b29b      	uxth	r3, r3
 8008404:	2b00      	cmp	r3, #0
 8008406:	d1e0      	bne.n	80083ca <UART_RxISR_8BIT_FIFOEN+0xba>
 8008408:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800840e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008412:	e843 2100 	strex	r1, r2, [r3]
 8008416:	2900      	cmp	r1, #0
 8008418:	d1f7      	bne.n	800840a <UART_RxISR_8BIT_FIFOEN+0xfa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841a:	f103 0208 	add.w	r2, r3, #8
 800841e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008422:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	f103 0008 	add.w	r0, r3, #8
 800842a:	e840 2100 	strex	r1, r2, [r0]
 800842e:	2900      	cmp	r1, #0
 8008430:	d1f3      	bne.n	800841a <UART_RxISR_8BIT_FIFOEN+0x10a>
        huart->RxState = HAL_UART_STATE_READY;
 8008432:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008434:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
 8008436:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008438:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800843c:	6721      	str	r1, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800843e:	d002      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x136>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	0211      	lsls	r1, r2, #8
 8008444:	d42b      	bmi.n	800849e <UART_RxISR_8BIT_FIFOEN+0x18e>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008446:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008448:	2a01      	cmp	r2, #1
 800844a:	d039      	beq.n	80084c0 <UART_RxISR_8BIT_FIFOEN+0x1b0>
          HAL_UART_RxCpltCallback(huart);
 800844c:	4620      	mov	r0, r4
 800844e:	f7f8 ff7d 	bl	800134c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008452:	f01b 0f20 	tst.w	fp, #32
 8008456:	d1bb      	bne.n	80083d0 <UART_RxISR_8BIT_FIFOEN+0xc0>
    rxdatacount = huart->RxXferCount;
 8008458:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800845c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800845e:	2b00      	cmp	r3, #0
 8008460:	f43f af68 	beq.w	8008334 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008464:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8008468:	429a      	cmp	r2, r3
 800846a:	f67f af63 	bls.w	8008334 <UART_RxISR_8BIT_FIFOEN+0x24>
 800846e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008470:	f103 0208 	add.w	r2, r3, #8
 8008474:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008478:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847c:	f103 0008 	add.w	r0, r3, #8
 8008480:	e840 2100 	strex	r1, r2, [r0]
 8008484:	2900      	cmp	r1, #0
 8008486:	d1f3      	bne.n	8008470 <UART_RxISR_8BIT_FIFOEN+0x160>
      huart->RxISR = UART_RxISR_8BIT;
 8008488:	4a1a      	ldr	r2, [pc, #104]	@ (80084f4 <UART_RxISR_8BIT_FIFOEN+0x1e4>)
 800848a:	6762      	str	r2, [r4, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008490:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	e843 2100 	strex	r1, r2, [r3]
 8008498:	2900      	cmp	r1, #0
 800849a:	d1f7      	bne.n	800848c <UART_RxISR_8BIT_FIFOEN+0x17c>
 800849c:	e74a      	b.n	8008334 <UART_RxISR_8BIT_FIFOEN+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80084a2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a6:	e843 2100 	strex	r1, r2, [r3]
 80084aa:	2900      	cmp	r1, #0
 80084ac:	d0cb      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x136>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	e853 2f00 	ldrex	r2, [r3]
 80084b2:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b6:	e843 2100 	strex	r1, r2, [r3]
 80084ba:	2900      	cmp	r1, #0
 80084bc:	d1ef      	bne.n	800849e <UART_RxISR_8BIT_FIFOEN+0x18e>
 80084be:	e7c2      	b.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x136>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c0:	2200      	movs	r2, #0
 80084c2:	66e2      	str	r2, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084cc:	e843 2100 	strex	r1, r2, [r3]
 80084d0:	2900      	cmp	r1, #0
 80084d2:	d1f7      	bne.n	80084c4 <UART_RxISR_8BIT_FIFOEN+0x1b4>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80084d4:	69da      	ldr	r2, [r3, #28]
 80084d6:	06d2      	lsls	r2, r2, #27
 80084d8:	d501      	bpl.n	80084de <UART_RxISR_8BIT_FIFOEN+0x1ce>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084da:	2210      	movs	r2, #16
 80084dc:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80084de:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7ff fcb8 	bl	8007e58 <HAL_UARTEx_RxEventCallback>
 80084e8:	e76f      	b.n	80083ca <UART_RxISR_8BIT_FIFOEN+0xba>
    rxdatacount = huart->RxXferCount;
 80084ea:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80084ee:	e721      	b.n	8008334 <UART_RxISR_8BIT_FIFOEN+0x24>
 80084f0:	58000c00 	.word	0x58000c00
 80084f4:	080082cd 	.word	0x080082cd
 80084f8:	effffffe 	.word	0xeffffffe

080084fc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80084fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008500:	6803      	ldr	r3, [r0, #0]
  uint16_t  uhMask = huart->Mask;
 8008502:	f8b0 a060 	ldrh.w	sl, [r0, #96]	@ 0x60
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008506:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008508:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800850a:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800850c:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8008510:	2a22      	cmp	r2, #34	@ 0x22
 8008512:	d005      	beq.n	8008520 <UART_RxISR_16BIT_FIFOEN+0x24>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008514:	699a      	ldr	r2, [r3, #24]
 8008516:	f042 0208 	orr.w	r2, r2, #8
 800851a:	619a      	str	r2, [r3, #24]
  }
}
 800851c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008520:	f8b0 2068 	ldrh.w	r2, [r0, #104]	@ 0x68
 8008524:	4683      	mov	fp, r0
 8008526:	2a00      	cmp	r2, #0
 8008528:	f000 80d4 	beq.w	80086d4 <UART_RxISR_16BIT_FIFOEN+0x1d8>
 800852c:	0688      	lsls	r0, r1, #26
 800852e:	f140 8085 	bpl.w	800863c <UART_RxISR_16BIT_FIFOEN+0x140>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008532:	f406 7680 	and.w	r6, r6, #256	@ 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008536:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800853a:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800853e:	f8df 91a4 	ldr.w	r9, [pc, #420]	@ 80086e4 <UART_RxISR_16BIT_FIFOEN+0x1e8>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008542:	4f66      	ldr	r7, [pc, #408]	@ (80086dc <UART_RxISR_16BIT_FIFOEN+0x1e0>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008544:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 8008546:	f8db 1058 	ldr.w	r1, [fp, #88]	@ 0x58
 800854a:	ea0a 0202 	and.w	r2, sl, r2
 800854e:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
 8008552:	f8bb 205e 	ldrh.w	r2, [fp, #94]	@ 0x5e
      huart->pRxBuffPtr += 2U;
 8008556:	f8cb 1058 	str.w	r1, [fp, #88]	@ 0x58
      huart->RxXferCount--;
 800855a:	3a01      	subs	r2, #1
 800855c:	b292      	uxth	r2, r2
 800855e:	f8ab 205e 	strh.w	r2, [fp, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008562:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008564:	0761      	lsls	r1, r4, #29
 8008566:	d01b      	beq.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0xa4>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008568:	07e2      	lsls	r2, r4, #31
 800856a:	d508      	bpl.n	800857e <UART_RxISR_16BIT_FIFOEN+0x82>
 800856c:	b13e      	cbz	r6, 800857e <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800856e:	2201      	movs	r2, #1
 8008570:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008572:	f8db 2090 	ldr.w	r2, [fp, #144]	@ 0x90
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	f8cb 2090 	str.w	r2, [fp, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800857e:	07a0      	lsls	r0, r4, #30
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008580:	f004 0204 	and.w	r2, r4, #4
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008584:	d515      	bpl.n	80085b2 <UART_RxISR_16BIT_FIFOEN+0xb6>
 8008586:	b145      	cbz	r5, 800859a <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008588:	2102      	movs	r1, #2
 800858a:	6219      	str	r1, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800858c:	f8db 1090 	ldr.w	r1, [fp, #144]	@ 0x90
 8008590:	f041 0104 	orr.w	r1, r1, #4
 8008594:	f8cb 1090 	str.w	r1, [fp, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008598:	b97a      	cbnz	r2, 80085ba <UART_RxISR_16BIT_FIFOEN+0xbe>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800859a:	f8db 3090 	ldr.w	r3, [fp, #144]	@ 0x90
 800859e:	b9c3      	cbnz	r3, 80085d2 <UART_RxISR_16BIT_FIFOEN+0xd6>
      if (huart->RxXferCount == 0U)
 80085a0:	f8bb 305e 	ldrh.w	r3, [fp, #94]	@ 0x5e
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	b1f3      	cbz	r3, 80085e6 <UART_RxISR_16BIT_FIFOEN+0xea>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80085a8:	06a3      	lsls	r3, r4, #26
 80085aa:	d547      	bpl.n	800863c <UART_RxISR_16BIT_FIFOEN+0x140>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085ac:	f8db 3000 	ldr.w	r3, [fp]
 80085b0:	e7c8      	b.n	8008544 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	d0f1      	beq.n	800859a <UART_RxISR_16BIT_FIFOEN+0x9e>
 80085b6:	2d00      	cmp	r5, #0
 80085b8:	d0ef      	beq.n	800859a <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085ba:	2204      	movs	r2, #4
 80085bc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80085be:	f8db 3090 	ldr.w	r3, [fp, #144]	@ 0x90
 80085c2:	f043 0302 	orr.w	r3, r3, #2
 80085c6:	f8cb 3090 	str.w	r3, [fp, #144]	@ 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085ca:	f8db 3090 	ldr.w	r3, [fp, #144]	@ 0x90
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0e6      	beq.n	80085a0 <UART_RxISR_16BIT_FIFOEN+0xa4>
          HAL_UART_ErrorCallback(huart);
 80085d2:	4658      	mov	r0, fp
 80085d4:	f7ff fc34 	bl	8007e40 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085d8:	f8cb 8090 	str.w	r8, [fp, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 80085dc:	f8bb 305e 	ldrh.w	r3, [fp, #94]	@ 0x5e
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1e0      	bne.n	80085a8 <UART_RxISR_16BIT_FIFOEN+0xac>
 80085e6:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	e843 2100 	strex	r1, r2, [r3]
 80085f6:	2900      	cmp	r1, #0
 80085f8:	d1f7      	bne.n	80085ea <UART_RxISR_16BIT_FIFOEN+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fa:	f103 0208 	add.w	r2, r3, #8
 80085fe:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008602:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	f103 0008 	add.w	r0, r3, #8
 800860a:	e840 2100 	strex	r1, r2, [r0]
 800860e:	2900      	cmp	r1, #0
 8008610:	d1f3      	bne.n	80085fa <UART_RxISR_16BIT_FIFOEN+0xfe>
        huart->RxState = HAL_UART_STATE_READY;
 8008612:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008614:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
 8008616:	f8cb 1074 	str.w	r1, [fp, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800861a:	f8cb 208c 	str.w	r2, [fp, #140]	@ 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800861e:	f8cb 1070 	str.w	r1, [fp, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008622:	d002      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0x12e>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008624:	685a      	ldr	r2, [r3, #4]
 8008626:	0211      	lsls	r1, r2, #8
 8008628:	d42d      	bmi.n	8008686 <UART_RxISR_16BIT_FIFOEN+0x18a>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800862a:	f8db 206c 	ldr.w	r2, [fp, #108]	@ 0x6c
 800862e:	2a01      	cmp	r2, #1
 8008630:	d03a      	beq.n	80086a8 <UART_RxISR_16BIT_FIFOEN+0x1ac>
          HAL_UART_RxCpltCallback(huart);
 8008632:	4658      	mov	r0, fp
 8008634:	f7f8 fe8a 	bl	800134c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008638:	06a3      	lsls	r3, r4, #26
 800863a:	d4b7      	bmi.n	80085ac <UART_RxISR_16BIT_FIFOEN+0xb0>
    rxdatacount = huart->RxXferCount;
 800863c:	f8bb 305e 	ldrh.w	r3, [fp, #94]	@ 0x5e
 8008640:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008642:	2b00      	cmp	r3, #0
 8008644:	f43f af6a 	beq.w	800851c <UART_RxISR_16BIT_FIFOEN+0x20>
 8008648:	f8bb 2068 	ldrh.w	r2, [fp, #104]	@ 0x68
 800864c:	429a      	cmp	r2, r3
 800864e:	f67f af65 	bls.w	800851c <UART_RxISR_16BIT_FIFOEN+0x20>
 8008652:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	f103 0208 	add.w	r2, r3, #8
 800865a:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800865e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008662:	f103 0008 	add.w	r0, r3, #8
 8008666:	e840 2100 	strex	r1, r2, [r0]
 800866a:	2900      	cmp	r1, #0
 800866c:	d1f3      	bne.n	8008656 <UART_RxISR_16BIT_FIFOEN+0x15a>
      huart->RxISR = UART_RxISR_16BIT;
 800866e:	4a1c      	ldr	r2, [pc, #112]	@ (80086e0 <UART_RxISR_16BIT_FIFOEN+0x1e4>)
 8008670:	f8cb 2074 	str.w	r2, [fp, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008674:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008678:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	e843 2100 	strex	r1, r2, [r3]
 8008680:	2900      	cmp	r1, #0
 8008682:	d1f7      	bne.n	8008674 <UART_RxISR_16BIT_FIFOEN+0x178>
 8008684:	e74a      	b.n	800851c <UART_RxISR_16BIT_FIFOEN+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008686:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800868a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868e:	e843 2100 	strex	r1, r2, [r3]
 8008692:	2900      	cmp	r1, #0
 8008694:	d0c9      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0x12e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	e853 2f00 	ldrex	r2, [r3]
 800869a:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	e843 2100 	strex	r1, r2, [r3]
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d1ef      	bne.n	8008686 <UART_RxISR_16BIT_FIFOEN+0x18a>
 80086a6:	e7c0      	b.n	800862a <UART_RxISR_16BIT_FIFOEN+0x12e>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8cb 206c 	str.w	r2, [fp, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086b2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	e843 2100 	strex	r1, r2, [r3]
 80086ba:	2900      	cmp	r1, #0
 80086bc:	d1f7      	bne.n	80086ae <UART_RxISR_16BIT_FIFOEN+0x1b2>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086be:	69da      	ldr	r2, [r3, #28]
 80086c0:	06d2      	lsls	r2, r2, #27
 80086c2:	d501      	bpl.n	80086c8 <UART_RxISR_16BIT_FIFOEN+0x1cc>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086c4:	2210      	movs	r2, #16
 80086c6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c8:	f8bb 105c 	ldrh.w	r1, [fp, #92]	@ 0x5c
 80086cc:	4658      	mov	r0, fp
 80086ce:	f7ff fbc3 	bl	8007e58 <HAL_UARTEx_RxEventCallback>
 80086d2:	e769      	b.n	80085a8 <UART_RxISR_16BIT_FIFOEN+0xac>
    rxdatacount = huart->RxXferCount;
 80086d4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086d8:	e720      	b.n	800851c <UART_RxISR_16BIT_FIFOEN+0x20>
 80086da:	bf00      	nop
 80086dc:	58000c00 	.word	0x58000c00
 80086e0:	08008285 	.word	0x08008285
 80086e4:	effffffe 	.word	0xeffffffe

080086e8 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086e8:	6901      	ldr	r1, [r0, #16]
 80086ea:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 80086ec:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f0:	49a2      	ldr	r1, [pc, #648]	@ (800897c <UART_SetConfig+0x294>)
{
 80086f2:	b570      	push	{r4, r5, r6, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f4:	6945      	ldr	r5, [r0, #20]
{
 80086f6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f8:	69c0      	ldr	r0, [r0, #28]
{
 80086fa:	b086      	sub	sp, #24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086fc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086fe:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008700:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008702:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008704:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008706:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008708:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800870a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008712:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008714:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008716:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008718:	4a99      	ldr	r2, [pc, #612]	@ (8008980 <UART_SetConfig+0x298>)
 800871a:	4293      	cmp	r3, r2
 800871c:	f000 8118 	beq.w	8008950 <UART_SetConfig+0x268>
    tmpreg |= huart->Init.OneBitSampling;
 8008720:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008722:	689e      	ldr	r6, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8008724:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008726:	4a97      	ldr	r2, [pc, #604]	@ (8008984 <UART_SetConfig+0x29c>)
 8008728:	4032      	ands	r2, r6
 800872a:	4311      	orrs	r1, r2
 800872c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800872e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008730:	f022 020f 	bic.w	r2, r2, #15
 8008734:	432a      	orrs	r2, r5
 8008736:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008738:	4a93      	ldr	r2, [pc, #588]	@ (8008988 <UART_SetConfig+0x2a0>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d028      	beq.n	8008790 <UART_SetConfig+0xa8>
 800873e:	4a93      	ldr	r2, [pc, #588]	@ (800898c <UART_SetConfig+0x2a4>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d01a      	beq.n	800877a <UART_SetConfig+0x92>
 8008744:	4a92      	ldr	r2, [pc, #584]	@ (8008990 <UART_SetConfig+0x2a8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d017      	beq.n	800877a <UART_SetConfig+0x92>
 800874a:	4a92      	ldr	r2, [pc, #584]	@ (8008994 <UART_SetConfig+0x2ac>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d014      	beq.n	800877a <UART_SetConfig+0x92>
 8008750:	4a91      	ldr	r2, [pc, #580]	@ (8008998 <UART_SetConfig+0x2b0>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d011      	beq.n	800877a <UART_SetConfig+0x92>
 8008756:	4a91      	ldr	r2, [pc, #580]	@ (800899c <UART_SetConfig+0x2b4>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d019      	beq.n	8008790 <UART_SetConfig+0xa8>
 800875c:	4a90      	ldr	r2, [pc, #576]	@ (80089a0 <UART_SetConfig+0x2b8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00b      	beq.n	800877a <UART_SetConfig+0x92>
 8008762:	4a90      	ldr	r2, [pc, #576]	@ (80089a4 <UART_SetConfig+0x2bc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d008      	beq.n	800877a <UART_SetConfig+0x92>
        ret = HAL_ERROR;
 8008768:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800876a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800876c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->RxISR = NULL;
 8008770:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8008772:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8008774:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8008776:	b006      	add	sp, #24
 8008778:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800877a:	4b8b      	ldr	r3, [pc, #556]	@ (80089a8 <UART_SetConfig+0x2c0>)
 800877c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	2b05      	cmp	r3, #5
 8008784:	d8f0      	bhi.n	8008768 <UART_SetConfig+0x80>
 8008786:	e8df f003 	tbb	[pc, r3]
 800878a:	5f9d      	.short	0x5f9d
 800878c:	977e7169 	.word	0x977e7169
 8008790:	4b85      	ldr	r3, [pc, #532]	@ (80089a8 <UART_SetConfig+0x2c0>)
 8008792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008794:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008798:	2b28      	cmp	r3, #40	@ 0x28
 800879a:	d8e5      	bhi.n	8008768 <UART_SetConfig+0x80>
 800879c:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <UART_SetConfig+0xbc>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	0800891f 	.word	0x0800891f
 80087a8:	08008769 	.word	0x08008769
 80087ac:	08008769 	.word	0x08008769
 80087b0:	08008769 	.word	0x08008769
 80087b4:	08008769 	.word	0x08008769
 80087b8:	08008769 	.word	0x08008769
 80087bc:	08008769 	.word	0x08008769
 80087c0:	08008769 	.word	0x08008769
 80087c4:	08008849 	.word	0x08008849
 80087c8:	08008769 	.word	0x08008769
 80087cc:	08008769 	.word	0x08008769
 80087d0:	08008769 	.word	0x08008769
 80087d4:	08008769 	.word	0x08008769
 80087d8:	08008769 	.word	0x08008769
 80087dc:	08008769 	.word	0x08008769
 80087e0:	08008769 	.word	0x08008769
 80087e4:	0800885d 	.word	0x0800885d
 80087e8:	08008769 	.word	0x08008769
 80087ec:	08008769 	.word	0x08008769
 80087f0:	08008769 	.word	0x08008769
 80087f4:	08008769 	.word	0x08008769
 80087f8:	08008769 	.word	0x08008769
 80087fc:	08008769 	.word	0x08008769
 8008800:	08008769 	.word	0x08008769
 8008804:	0800886d 	.word	0x0800886d
 8008808:	08008769 	.word	0x08008769
 800880c:	08008769 	.word	0x08008769
 8008810:	08008769 	.word	0x08008769
 8008814:	08008769 	.word	0x08008769
 8008818:	08008769 	.word	0x08008769
 800881c:	08008769 	.word	0x08008769
 8008820:	08008769 	.word	0x08008769
 8008824:	08008887 	.word	0x08008887
 8008828:	08008769 	.word	0x08008769
 800882c:	08008769 	.word	0x08008769
 8008830:	08008769 	.word	0x08008769
 8008834:	08008769 	.word	0x08008769
 8008838:	08008769 	.word	0x08008769
 800883c:	08008769 	.word	0x08008769
 8008840:	08008769 	.word	0x08008769
 8008844:	080088b9 	.word	0x080088b9
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008848:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800884c:	d040      	beq.n	80088d0 <UART_SetConfig+0x1e8>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800884e:	4668      	mov	r0, sp
 8008850:	f7fe fb98 	bl	8006f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008854:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 8008856:	b368      	cbz	r0, 80088b4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008858:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800885a:	e018      	b.n	800888e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800885c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008860:	d06e      	beq.n	8008940 <UART_SetConfig+0x258>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008862:	a803      	add	r0, sp, #12
 8008864:	f7fe fc28 	bl	80070b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008868:	9804      	ldr	r0, [sp, #16]
        break;
 800886a:	e7f4      	b.n	8008856 <UART_SetConfig+0x16e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800886c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008870:	d05b      	beq.n	800892a <UART_SetConfig+0x242>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008872:	4b4d      	ldr	r3, [pc, #308]	@ (80089a8 <UART_SetConfig+0x2c0>)
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	0692      	lsls	r2, r2, #26
 8008878:	d54c      	bpl.n	8008914 <UART_SetConfig+0x22c>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	484b      	ldr	r0, [pc, #300]	@ (80089ac <UART_SetConfig+0x2c4>)
 800887e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008882:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8008884:	e003      	b.n	800888e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008886:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) CSI_VALUE;
 800888a:	4849      	ldr	r0, [pc, #292]	@ (80089b0 <UART_SetConfig+0x2c8>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800888c:	d027      	beq.n	80088de <UART_SetConfig+0x1f6>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800888e:	4a49      	ldr	r2, [pc, #292]	@ (80089b4 <UART_SetConfig+0x2cc>)
 8008890:	6863      	ldr	r3, [r4, #4]
 8008892:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008896:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800889a:	fbb0 f0f1 	udiv	r0, r0, r1
 800889e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80088a2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a6:	f1a0 0310 	sub.w	r3, r0, #16
 80088aa:	4293      	cmp	r3, r2
 80088ac:	f63f af5c 	bhi.w	8008768 <UART_SetConfig+0x80>
          huart->Instance->BRR = usartdiv;
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	60d8      	str	r0, [r3, #12]
          pclk = (uint32_t) HSI_VALUE;
 80088b4:	2000      	movs	r0, #0
 80088b6:	e758      	b.n	800876a <UART_SetConfig+0x82>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80088bc:	d00f      	beq.n	80088de <UART_SetConfig+0x1f6>
        pclk = (uint32_t) LSE_VALUE;
 80088be:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80088c2:	e7e4      	b.n	800888e <UART_SetConfig+0x1a6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80088c8:	d026      	beq.n	8008918 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ca:	f7fd fa7b 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
        break;
 80088ce:	e7c2      	b.n	8008856 <UART_SetConfig+0x16e>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088d0:	4668      	mov	r0, sp
 80088d2:	f7fe fb57 	bl	8006f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088d6:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 80088d8:	2800      	cmp	r0, #0
 80088da:	d0eb      	beq.n	80088b4 <UART_SetConfig+0x1cc>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088dc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80088de:	4b35      	ldr	r3, [pc, #212]	@ (80089b4 <UART_SetConfig+0x2cc>)
 80088e0:	6862      	ldr	r2, [r4, #4]
 80088e2:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80088e6:	0853      	lsrs	r3, r2, #1
 80088e8:	fbb0 f0f1 	udiv	r0, r0, r1
 80088ec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f0:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088f8:	f1a3 0210 	sub.w	r2, r3, #16
 80088fc:	428a      	cmp	r2, r1
 80088fe:	f63f af33 	bhi.w	8008768 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008902:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008906:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800890a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800890c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800890e:	4313      	orrs	r3, r2
 8008910:	60cb      	str	r3, [r1, #12]
 8008912:	e7cf      	b.n	80088b4 <UART_SetConfig+0x1cc>
          pclk = (uint32_t) HSI_VALUE;
 8008914:	4825      	ldr	r0, [pc, #148]	@ (80089ac <UART_SetConfig+0x2c4>)
 8008916:	e7ba      	b.n	800888e <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008918:	f7fd fa54 	bl	8005dc4 <HAL_RCC_GetPCLK1Freq>
        break;
 800891c:	e7dc      	b.n	80088d8 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800891e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008922:	d012      	beq.n	800894a <UART_SetConfig+0x262>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008924:	f7fd fa96 	bl	8005e54 <HAL_RCC_GetPCLK2Freq>
        break;
 8008928:	e795      	b.n	8008856 <UART_SetConfig+0x16e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800892a:	4b1f      	ldr	r3, [pc, #124]	@ (80089a8 <UART_SetConfig+0x2c0>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	0691      	lsls	r1, r2, #26
 8008930:	f140 808a 	bpl.w	8008a48 <UART_SetConfig+0x360>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	481d      	ldr	r0, [pc, #116]	@ (80089ac <UART_SetConfig+0x2c4>)
 8008938:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800893c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800893e:	e7ce      	b.n	80088de <UART_SetConfig+0x1f6>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008940:	a803      	add	r0, sp, #12
 8008942:	f7fe fbb9 	bl	80070b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008946:	9804      	ldr	r0, [sp, #16]
        break;
 8008948:	e7c6      	b.n	80088d8 <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK2Freq();
 800894a:	f7fd fa83 	bl	8005e54 <HAL_RCC_GetPCLK2Freq>
        break;
 800894e:	e7c3      	b.n	80088d8 <UART_SetConfig+0x1f0>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008950:	6898      	ldr	r0, [r3, #8]
 8008952:	4a0c      	ldr	r2, [pc, #48]	@ (8008984 <UART_SetConfig+0x29c>)
 8008954:	4002      	ands	r2, r0
 8008956:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008958:	4913      	ldr	r1, [pc, #76]	@ (80089a8 <UART_SetConfig+0x2c0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800895a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800895c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800895e:	f022 020f 	bic.w	r2, r2, #15
 8008962:	432a      	orrs	r2, r5
 8008964:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008966:	6d8b      	ldr	r3, [r1, #88]	@ 0x58
 8008968:	f003 0307 	and.w	r3, r3, #7
 800896c:	2b05      	cmp	r3, #5
 800896e:	f63f aefb 	bhi.w	8008768 <UART_SetConfig+0x80>
 8008972:	e8df f003 	tbb	[pc, r3]
 8008976:	565b      	.short	0x565b
 8008978:	5e61214d 	.word	0x5e61214d
 800897c:	cfff69f3 	.word	0xcfff69f3
 8008980:	58000c00 	.word	0x58000c00
 8008984:	11fff4ff 	.word	0x11fff4ff
 8008988:	40011000 	.word	0x40011000
 800898c:	40004400 	.word	0x40004400
 8008990:	40004800 	.word	0x40004800
 8008994:	40004c00 	.word	0x40004c00
 8008998:	40005000 	.word	0x40005000
 800899c:	40011400 	.word	0x40011400
 80089a0:	40007800 	.word	0x40007800
 80089a4:	40007c00 	.word	0x40007c00
 80089a8:	58024400 	.word	0x58024400
 80089ac:	03d09000 	.word	0x03d09000
 80089b0:	003d0900 	.word	0x003d0900
 80089b4:	0800e148 	.word	0x0800e148
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089b8:	4b24      	ldr	r3, [pc, #144]	@ (8008a4c <UART_SetConfig+0x364>)
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	0690      	lsls	r0, r2, #26
 80089be:	d43d      	bmi.n	8008a3c <UART_SetConfig+0x354>
          pclk = (uint32_t) HSI_VALUE;
 80089c0:	4823      	ldr	r0, [pc, #140]	@ (8008a50 <UART_SetConfig+0x368>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089c2:	4b24      	ldr	r3, [pc, #144]	@ (8008a54 <UART_SetConfig+0x36c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089c4:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089c6:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089ca:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089ce:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d2:	4299      	cmp	r1, r3
 80089d4:	f63f aec8 	bhi.w	8008768 <UART_SetConfig+0x80>
 80089d8:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80089dc:	f63f aec4 	bhi.w	8008768 <UART_SetConfig+0x80>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089e0:	2300      	movs	r3, #0
 80089e2:	4619      	mov	r1, r3
 80089e4:	f7f7 fc78 	bl	80002d8 <__aeabi_uldivmod>
 80089e8:	4632      	mov	r2, r6
 80089ea:	0209      	lsls	r1, r1, #8
 80089ec:	0203      	lsls	r3, r0, #8
 80089ee:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80089f2:	0870      	lsrs	r0, r6, #1
 80089f4:	1818      	adds	r0, r3, r0
 80089f6:	f04f 0300 	mov.w	r3, #0
 80089fa:	f141 0100 	adc.w	r1, r1, #0
 80089fe:	f7f7 fc6b 	bl	80002d8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a02:	4b15      	ldr	r3, [pc, #84]	@ (8008a58 <UART_SetConfig+0x370>)
 8008a04:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	f63f aead 	bhi.w	8008768 <UART_SetConfig+0x80>
 8008a0e:	e74f      	b.n	80088b0 <UART_SetConfig+0x1c8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a10:	a803      	add	r0, sp, #12
 8008a12:	f7fe fb51 	bl	80070b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a16:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	f43f af4b 	beq.w	80088b4 <UART_SetConfig+0x1cc>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a1e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008a20:	e7cf      	b.n	80089c2 <UART_SetConfig+0x2da>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a22:	4668      	mov	r0, sp
 8008a24:	f7fe faae 	bl	8006f84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a28:	9801      	ldr	r0, [sp, #4]
        break;
 8008a2a:	e7f5      	b.n	8008a18 <UART_SetConfig+0x330>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008a2c:	f7fe fa98 	bl	8006f60 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 8008a30:	e7f2      	b.n	8008a18 <UART_SetConfig+0x330>
        pclk = (uint32_t) LSE_VALUE;
 8008a32:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008a36:	e7c4      	b.n	80089c2 <UART_SetConfig+0x2da>
        pclk = (uint32_t) CSI_VALUE;
 8008a38:	4808      	ldr	r0, [pc, #32]	@ (8008a5c <UART_SetConfig+0x374>)
 8008a3a:	e7c2      	b.n	80089c2 <UART_SetConfig+0x2da>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4804      	ldr	r0, [pc, #16]	@ (8008a50 <UART_SetConfig+0x368>)
 8008a40:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a44:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 8008a46:	e7bc      	b.n	80089c2 <UART_SetConfig+0x2da>
          pclk = (uint32_t) HSI_VALUE;
 8008a48:	4801      	ldr	r0, [pc, #4]	@ (8008a50 <UART_SetConfig+0x368>)
 8008a4a:	e748      	b.n	80088de <UART_SetConfig+0x1f6>
 8008a4c:	58024400 	.word	0x58024400
 8008a50:	03d09000 	.word	0x03d09000
 8008a54:	0800e148 	.word	0x0800e148
 8008a58:	000ffcff 	.word	0x000ffcff
 8008a5c:	003d0900 	.word	0x003d0900

08008a60 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a60:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008a62:	071a      	lsls	r2, r3, #28
{
 8008a64:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a66:	d506      	bpl.n	8008a76 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a68:	6801      	ldr	r1, [r0, #0]
 8008a6a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008a6c:	684a      	ldr	r2, [r1, #4]
 8008a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008a72:	4322      	orrs	r2, r4
 8008a74:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a76:	07dc      	lsls	r4, r3, #31
 8008a78:	d506      	bpl.n	8008a88 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a7a:	6801      	ldr	r1, [r0, #0]
 8008a7c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008a7e:	684a      	ldr	r2, [r1, #4]
 8008a80:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008a84:	4322      	orrs	r2, r4
 8008a86:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a88:	0799      	lsls	r1, r3, #30
 8008a8a:	d506      	bpl.n	8008a9a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a8c:	6801      	ldr	r1, [r0, #0]
 8008a8e:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008a90:	684a      	ldr	r2, [r1, #4]
 8008a92:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008a96:	4322      	orrs	r2, r4
 8008a98:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a9a:	075a      	lsls	r2, r3, #29
 8008a9c:	d506      	bpl.n	8008aac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a9e:	6801      	ldr	r1, [r0, #0]
 8008aa0:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008aa2:	684a      	ldr	r2, [r1, #4]
 8008aa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008aa8:	4322      	orrs	r2, r4
 8008aaa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008aac:	06dc      	lsls	r4, r3, #27
 8008aae:	d506      	bpl.n	8008abe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ab0:	6801      	ldr	r1, [r0, #0]
 8008ab2:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008ab4:	688a      	ldr	r2, [r1, #8]
 8008ab6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008aba:	4322      	orrs	r2, r4
 8008abc:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008abe:	0699      	lsls	r1, r3, #26
 8008ac0:	d506      	bpl.n	8008ad0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ac2:	6801      	ldr	r1, [r0, #0]
 8008ac4:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008ac6:	688a      	ldr	r2, [r1, #8]
 8008ac8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008acc:	4322      	orrs	r2, r4
 8008ace:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ad0:	065a      	lsls	r2, r3, #25
 8008ad2:	d50a      	bpl.n	8008aea <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ad4:	6801      	ldr	r1, [r0, #0]
 8008ad6:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008ad8:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ada:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ade:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008ae2:	ea42 0204 	orr.w	r2, r2, r4
 8008ae6:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ae8:	d00b      	beq.n	8008b02 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aea:	061b      	lsls	r3, r3, #24
 8008aec:	d506      	bpl.n	8008afc <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aee:	6802      	ldr	r2, [r0, #0]
 8008af0:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008af2:	6853      	ldr	r3, [r2, #4]
 8008af4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008af8:	430b      	orrs	r3, r1
 8008afa:	6053      	str	r3, [r2, #4]
}
 8008afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b00:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b02:	684a      	ldr	r2, [r1, #4]
 8008b04:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8008b06:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8008b0a:	4322      	orrs	r2, r4
 8008b0c:	604a      	str	r2, [r1, #4]
 8008b0e:	e7ec      	b.n	8008aea <UART_AdvFeatureConfig+0x8a>

08008b10 <UART_CheckIdleState>:
{
 8008b10:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b12:	2300      	movs	r3, #0
{
 8008b14:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b16:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8008b1a:	f7f9 fcc1 	bl	80024a0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b1e:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8008b20:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b22:	6813      	ldr	r3, [r2, #0]
 8008b24:	071b      	lsls	r3, r3, #28
 8008b26:	d40f      	bmi.n	8008b48 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b28:	6813      	ldr	r3, [r2, #0]
 8008b2a:	0759      	lsls	r1, r3, #29
 8008b2c:	d431      	bmi.n	8008b92 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008b30:	2220      	movs	r2, #32
  return HAL_OK;
 8008b32:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8008b34:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b38:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b3c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3e:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8008b40:	2300      	movs	r3, #0
 8008b42:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008b46:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b48:	69d3      	ldr	r3, [r2, #28]
 8008b4a:	0298      	lsls	r0, r3, #10
 8008b4c:	d4ec      	bmi.n	8008b28 <UART_CheckIdleState+0x18>
 8008b4e:	e00c      	b.n	8008b6a <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	461a      	mov	r2, r3
 8008b54:	0749      	lsls	r1, r1, #29
 8008b56:	d505      	bpl.n	8008b64 <UART_CheckIdleState+0x54>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b58:	69d9      	ldr	r1, [r3, #28]
 8008b5a:	0708      	lsls	r0, r1, #28
 8008b5c:	d44a      	bmi.n	8008bf4 <UART_CheckIdleState+0xe4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b5e:	69d9      	ldr	r1, [r3, #28]
 8008b60:	0509      	lsls	r1, r1, #20
 8008b62:	d475      	bmi.n	8008c50 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b64:	69db      	ldr	r3, [r3, #28]
 8008b66:	0298      	lsls	r0, r3, #10
 8008b68:	d4de      	bmi.n	8008b28 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6a:	f7f9 fc99 	bl	80024a0 <HAL_GetTick>
 8008b6e:	1b43      	subs	r3, r0, r5
 8008b70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b74:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b76:	d3eb      	bcc.n	8008b50 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	e843 2100 	strex	r1, r2, [r3]
 8008b84:	2900      	cmp	r1, #0
 8008b86:	d1f7      	bne.n	8008b78 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8008b88:	2320      	movs	r3, #32
 8008b8a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8008b8e:	2003      	movs	r0, #3
 8008b90:	e7d6      	b.n	8008b40 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b92:	69d3      	ldr	r3, [r2, #28]
 8008b94:	025b      	lsls	r3, r3, #9
 8008b96:	d4ca      	bmi.n	8008b2e <UART_CheckIdleState+0x1e>
 8008b98:	e00d      	b.n	8008bb6 <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	0750      	lsls	r0, r2, #29
 8008b9e:	d507      	bpl.n	8008bb0 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ba0:	69da      	ldr	r2, [r3, #28]
 8008ba2:	0711      	lsls	r1, r2, #28
 8008ba4:	f100 8082 	bmi.w	8008cac <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ba8:	69da      	ldr	r2, [r3, #28]
 8008baa:	0512      	lsls	r2, r2, #20
 8008bac:	f100 80ac 	bmi.w	8008d08 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	025b      	lsls	r3, r3, #9
 8008bb4:	d4bb      	bmi.n	8008b2e <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb6:	f7f9 fc73 	bl	80024a0 <HAL_GetTick>
 8008bba:	1b43      	subs	r3, r0, r5
 8008bbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bc0:	6823      	ldr	r3, [r4, #0]
 8008bc2:	d3ea      	bcc.n	8008b9a <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bc8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bcc:	e843 2100 	strex	r1, r2, [r3]
 8008bd0:	2900      	cmp	r1, #0
 8008bd2:	d1f7      	bne.n	8008bc4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	f103 0208 	add.w	r2, r3, #8
 8008bd8:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bdc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	f103 0008 	add.w	r0, r3, #8
 8008be4:	e840 2100 	strex	r1, r2, [r0]
 8008be8:	2900      	cmp	r1, #0
 8008bea:	d1f3      	bne.n	8008bd4 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8008bec:	2320      	movs	r3, #32
 8008bee:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8008bf2:	e7cc      	b.n	8008b8e <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bf4:	2208      	movs	r2, #8
 8008bf6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bfc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	e843 2100 	strex	r1, r2, [r3]
 8008c04:	2900      	cmp	r1, #0
 8008c06:	d1f7      	bne.n	8008bf8 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c08:	4856      	ldr	r0, [pc, #344]	@ (8008d64 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0a:	f103 0208 	add.w	r2, r3, #8
 8008c0e:	e852 2f00 	ldrex	r2, [r2]
 8008c12:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c14:	f103 0508 	add.w	r5, r3, #8
 8008c18:	e845 2100 	strex	r1, r2, [r5]
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	d1f4      	bne.n	8008c0a <UART_CheckIdleState+0xfa>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c20:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008c22:	2a01      	cmp	r2, #1
 8008c24:	d00b      	beq.n	8008c3e <UART_CheckIdleState+0x12e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c26:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008c28:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c2a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008c2c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008c30:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c32:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008c34:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c38:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8008c3c:	e79c      	b.n	8008b78 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c42:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	e843 2100 	strex	r1, r2, [r3]
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	d1f7      	bne.n	8008c3e <UART_CheckIdleState+0x12e>
 8008c4e:	e7ea      	b.n	8008c26 <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c50:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c54:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c56:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c5a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	e843 2100 	strex	r1, r2, [r3]
 8008c62:	2900      	cmp	r1, #0
 8008c64:	d1f7      	bne.n	8008c56 <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c66:	483f      	ldr	r0, [pc, #252]	@ (8008d64 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c68:	f103 0208 	add.w	r2, r3, #8
 8008c6c:	e852 2f00 	ldrex	r2, [r2]
 8008c70:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c72:	f103 0508 	add.w	r5, r3, #8
 8008c76:	e845 2100 	strex	r1, r2, [r5]
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	d1f4      	bne.n	8008c68 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c7e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008c80:	2a01      	cmp	r2, #1
 8008c82:	d00a      	beq.n	8008c9a <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c84:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008c86:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8008c88:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008c8a:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8008c8e:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c92:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c94:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008c98:	e76e      	b.n	8008b78 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c9e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	e843 2100 	strex	r1, r2, [r3]
 8008ca6:	2900      	cmp	r1, #0
 8008ca8:	d1f7      	bne.n	8008c9a <UART_CheckIdleState+0x18a>
 8008caa:	e7eb      	b.n	8008c84 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cac:	2208      	movs	r2, #8
 8008cae:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cb4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	e843 2100 	strex	r1, r2, [r3]
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	d1f7      	bne.n	8008cb0 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cc0:	4828      	ldr	r0, [pc, #160]	@ (8008d64 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	f103 0208 	add.w	r2, r3, #8
 8008cc6:	e852 2f00 	ldrex	r2, [r2]
 8008cca:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	f103 0508 	add.w	r5, r3, #8
 8008cd0:	e845 2100 	strex	r1, r2, [r5]
 8008cd4:	2900      	cmp	r1, #0
 8008cd6:	d1f4      	bne.n	8008cc2 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008cda:	2a01      	cmp	r2, #1
 8008cdc:	d00b      	beq.n	8008cf6 <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cde:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008ce0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ce2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008ce4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008ce8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cea:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008cec:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cf0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8008cf4:	e766      	b.n	8008bc4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cfa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	e843 2100 	strex	r1, r2, [r3]
 8008d02:	2900      	cmp	r1, #0
 8008d04:	d1f7      	bne.n	8008cf6 <UART_CheckIdleState+0x1e6>
 8008d06:	e7ea      	b.n	8008cde <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d0c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d12:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d16:	e843 2100 	strex	r1, r2, [r3]
 8008d1a:	2900      	cmp	r1, #0
 8008d1c:	d1f7      	bne.n	8008d0e <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d1e:	4811      	ldr	r0, [pc, #68]	@ (8008d64 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	f103 0208 	add.w	r2, r3, #8
 8008d24:	e852 2f00 	ldrex	r2, [r2]
 8008d28:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	f103 0508 	add.w	r5, r3, #8
 8008d2e:	e845 2100 	strex	r1, r2, [r5]
 8008d32:	2900      	cmp	r1, #0
 8008d34:	d1f4      	bne.n	8008d20 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d36:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008d38:	2a01      	cmp	r2, #1
 8008d3a:	d00a      	beq.n	8008d52 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008d3e:	2120      	movs	r1, #32
  huart->RxISR = NULL;
 8008d40:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008d42:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
          __HAL_UNLOCK(huart);
 8008d46:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d4a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d4c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008d50:	e738      	b.n	8008bc4 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d52:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d56:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5a:	e843 2100 	strex	r1, r2, [r3]
 8008d5e:	2900      	cmp	r1, #0
 8008d60:	d1f7      	bne.n	8008d52 <UART_CheckIdleState+0x242>
 8008d62:	e7eb      	b.n	8008d3c <UART_CheckIdleState+0x22c>
 8008d64:	effffffe 	.word	0xeffffffe

08008d68 <HAL_UART_Init>:
  if (huart == NULL)
 8008d68:	b380      	cbz	r0, 8008dcc <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008d6a:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008d72:	b333      	cbz	r3, 8008dc2 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8008d74:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008d76:	2324      	movs	r3, #36	@ 0x24
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d78:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8008d7a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008d7e:	6813      	ldr	r3, [r2, #0]
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d86:	b9c1      	cbnz	r1, 8008dba <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff fcad 	bl	80086e8 <UART_SetConfig>
 8008d8e:	2801      	cmp	r0, #1
 8008d90:	d011      	beq.n	8008db6 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d92:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8008d94:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d96:	685a      	ldr	r2, [r3, #4]
 8008d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008da4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
}
 8008dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8008db0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8008db2:	f7ff bead 	b.w	8008b10 <UART_CheckIdleState>
}
 8008db6:	2001      	movs	r0, #1
 8008db8:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7ff fe50 	bl	8008a60 <UART_AdvFeatureConfig>
 8008dc0:	e7e2      	b.n	8008d88 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8008dc2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8008dc6:	f7f9 f9d7 	bl	8002178 <HAL_UART_MspInit>
 8008dca:	e7d3      	b.n	8008d74 <HAL_UART_Init+0xc>
}
 8008dcc:	2001      	movs	r0, #1
 8008dce:	4770      	bx	lr

08008dd0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop

08008dd4 <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop

08008dd8 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop

08008ddc <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ddc:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008de0:	2a01      	cmp	r2, #1
 8008de2:	d017      	beq.n	8008e14 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008de4:	6802      	ldr	r2, [r0, #0]
 8008de6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008de8:	2024      	movs	r0, #36	@ 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dea:	2100      	movs	r1, #0
{
 8008dec:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
 8008dee:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8008df2:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df4:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008df6:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008df8:	f020 5000 	bic.w	r0, r0, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8008dfc:	f024 0401 	bic.w	r4, r4, #1
 8008e00:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e02:	6659      	str	r1, [r3, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e04:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8008e06:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008e08:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008e0c:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8008e10:	bc30      	pop	{r4, r5}
 8008e12:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008e14:	2002      	movs	r0, #2
}
 8008e16:	4770      	bx	lr

08008e18 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e18:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008e1c:	2a01      	cmp	r2, #1
 8008e1e:	d037      	beq.n	8008e90 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e20:	6802      	ldr	r2, [r0, #0]
 8008e22:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008e24:	2024      	movs	r0, #36	@ 0x24
{
 8008e26:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008e28:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e2c:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e2e:	6810      	ldr	r0, [r2, #0]
 8008e30:	f020 0001 	bic.w	r0, r0, #1
 8008e34:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e36:	6890      	ldr	r0, [r2, #8]
 8008e38:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8008e3c:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e3e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e40:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e42:	b310      	cbz	r0, 8008e8a <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008e44:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e46:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e48:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e4c:	4911      	ldr	r1, [pc, #68]	@ (8008e94 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e4e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e52:	4d11      	ldr	r5, [pc, #68]	@ (8008e98 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e54:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e58:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008e5c:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e60:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8008e62:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e66:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008e68:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008e6c:	fbb1 f1f5 	udiv	r1, r1, r5
 8008e70:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8008e74:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8008e76:	2100      	movs	r1, #0
 8008e78:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e7c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8008e7e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008e80:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008e84:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8008e88:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008e8a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	e7ef      	b.n	8008e70 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008e90:	2002      	movs	r0, #2
}
 8008e92:	4770      	bx	lr
 8008e94:	0800e168 	.word	0x0800e168
 8008e98:	0800e160 	.word	0x0800e160

08008e9c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008e9c:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008ea0:	2a01      	cmp	r2, #1
 8008ea2:	d037      	beq.n	8008f14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ea4:	6802      	ldr	r2, [r0, #0]
 8008ea6:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8008ea8:	2024      	movs	r0, #36	@ 0x24
{
 8008eaa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008eac:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb0:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008eb2:	6810      	ldr	r0, [r2, #0]
 8008eb4:	f020 0001 	bic.w	r0, r0, #1
 8008eb8:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008eba:	6890      	ldr	r0, [r2, #8]
 8008ebc:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8008ec0:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ec2:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ec4:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ec6:	b310      	cbz	r0, 8008f0e <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ec8:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eca:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ecc:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ed0:	4911      	ldr	r1, [pc, #68]	@ (8008f18 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ed2:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ed6:	4d11      	ldr	r5, [pc, #68]	@ (8008f1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ed8:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008edc:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ee0:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ee4:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ee6:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eea:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eec:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ef0:	fbb1 f1f5 	udiv	r1, r1, r5
 8008ef4:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  huart->gState = HAL_UART_STATE_READY;
 8008ef8:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
 8008efa:	2100      	movs	r1, #0
 8008efc:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f00:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8008f02:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008f04:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008f08:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
}
 8008f0c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008f0e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008f10:	4608      	mov	r0, r1
 8008f12:	e7ef      	b.n	8008ef4 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008f14:	2002      	movs	r0, #2
}
 8008f16:	4770      	bx	lr
 8008f18:	0800e168 	.word	0x0800e168
 8008f1c:	0800e160 	.word	0x0800e160

08008f20 <memset>:
 8008f20:	4402      	add	r2, r0
 8008f22:	4603      	mov	r3, r0
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d100      	bne.n	8008f2a <memset+0xa>
 8008f28:	4770      	bx	lr
 8008f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f2e:	e7f9      	b.n	8008f24 <memset+0x4>

08008f30 <__errno>:
 8008f30:	4b01      	ldr	r3, [pc, #4]	@ (8008f38 <__errno+0x8>)
 8008f32:	6818      	ldr	r0, [r3, #0]
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	24002074 	.word	0x24002074

08008f3c <__libc_init_array>:
 8008f3c:	b570      	push	{r4, r5, r6, lr}
 8008f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8008f74 <__libc_init_array+0x38>)
 8008f40:	4c0d      	ldr	r4, [pc, #52]	@ (8008f78 <__libc_init_array+0x3c>)
 8008f42:	1b64      	subs	r4, r4, r5
 8008f44:	10a4      	asrs	r4, r4, #2
 8008f46:	2600      	movs	r6, #0
 8008f48:	42a6      	cmp	r6, r4
 8008f4a:	d109      	bne.n	8008f60 <__libc_init_array+0x24>
 8008f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8008f7c <__libc_init_array+0x40>)
 8008f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8008f80 <__libc_init_array+0x44>)
 8008f50:	f000 f9e0 	bl	8009314 <_init>
 8008f54:	1b64      	subs	r4, r4, r5
 8008f56:	10a4      	asrs	r4, r4, #2
 8008f58:	2600      	movs	r6, #0
 8008f5a:	42a6      	cmp	r6, r4
 8008f5c:	d105      	bne.n	8008f6a <__libc_init_array+0x2e>
 8008f5e:	bd70      	pop	{r4, r5, r6, pc}
 8008f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f64:	4798      	blx	r3
 8008f66:	3601      	adds	r6, #1
 8008f68:	e7ee      	b.n	8008f48 <__libc_init_array+0xc>
 8008f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f6e:	4798      	blx	r3
 8008f70:	3601      	adds	r6, #1
 8008f72:	e7f2      	b.n	8008f5a <__libc_init_array+0x1e>
 8008f74:	0800e3e8 	.word	0x0800e3e8
 8008f78:	0800e3e8 	.word	0x0800e3e8
 8008f7c:	0800e3e8 	.word	0x0800e3e8
 8008f80:	0800e3ec 	.word	0x0800e3ec

08008f84 <checkint>:
 8008f84:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008f88:	2b7e      	cmp	r3, #126	@ 0x7e
 8008f8a:	d910      	bls.n	8008fae <checkint+0x2a>
 8008f8c:	2b96      	cmp	r3, #150	@ 0x96
 8008f8e:	d80c      	bhi.n	8008faa <checkint+0x26>
 8008f90:	2201      	movs	r2, #1
 8008f92:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008f96:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9a:	1e5a      	subs	r2, r3, #1
 8008f9c:	4202      	tst	r2, r0
 8008f9e:	d106      	bne.n	8008fae <checkint+0x2a>
 8008fa0:	4203      	tst	r3, r0
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2002      	moveq	r0, #2
 8008fa6:	2001      	movne	r0, #1
 8008fa8:	4770      	bx	lr
 8008faa:	2002      	movs	r0, #2
 8008fac:	4770      	bx	lr
 8008fae:	2000      	movs	r0, #0
 8008fb0:	4770      	bx	lr
 8008fb2:	0000      	movs	r0, r0
 8008fb4:	0000      	movs	r0, r0
	...

08008fb8 <powf>:
 8008fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fba:	ee10 1a10 	vmov	r1, s0
 8008fbe:	ee10 4a90 	vmov	r4, s1
 8008fc2:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 8008fc6:	0063      	lsls	r3, r4, #1
 8008fc8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8008fcc:	eef0 7a40 	vmov.f32	s15, s0
 8008fd0:	eeb0 7a60 	vmov.f32	s14, s1
 8008fd4:	f103 30ff 	add.w	r0, r3, #4294967295
 8008fd8:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8008fdc:	d252      	bcs.n	8009084 <powf+0xcc>
 8008fde:	4290      	cmp	r0, r2
 8008fe0:	d258      	bcs.n	8009094 <powf+0xdc>
 8008fe2:	2000      	movs	r0, #0
 8008fe4:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8008fe8:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8008fec:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8008ff0:	0ddb      	lsrs	r3, r3, #23
 8008ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8009268 <powf+0x2b0>)
 8008ff4:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8008ff8:	05db      	lsls	r3, r3, #23
 8008ffa:	1ac9      	subs	r1, r1, r3
 8008ffc:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8009000:	ee07 1a90 	vmov	s15, r1
 8009004:	ed94 5b02 	vldr	d5, [r4, #8]
 8009008:	ed94 4b00 	vldr	d4, [r4]
 800900c:	15db      	asrs	r3, r3, #23
 800900e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009012:	ee07 3a90 	vmov	s15, r3
 8009016:	eea4 2b06 	vfma.f64	d2, d4, d6
 800901a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800901e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8009022:	ee24 0b04 	vmul.f64	d0, d4, d4
 8009026:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800902a:	ee36 6b05 	vadd.f64	d6, d6, d5
 800902e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8009032:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8009036:	eea2 1b05 	vfma.f64	d1, d2, d5
 800903a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800903e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8009042:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8009046:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800904a:	eea2 6b03 	vfma.f64	d6, d2, d3
 800904e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8009052:	eea1 6b00 	vfma.f64	d6, d1, d0
 8009056:	ee27 7b06 	vmul.f64	d7, d7, d6
 800905a:	ee17 3a90 	vmov	r3, s15
 800905e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8009062:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8009066:	429a      	cmp	r2, r3
 8009068:	f0c0 80b8 	bcc.w	80091dc <powf+0x224>
 800906c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8009248 <powf+0x290>
 8009070:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009078:	dd79      	ble.n	800916e <powf+0x1b6>
 800907a:	b003      	add	sp, #12
 800907c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009080:	f000 b920 	b.w	80092c4 <__math_oflowf>
 8009084:	4290      	cmp	r0, r2
 8009086:	d330      	bcc.n	80090ea <powf+0x132>
 8009088:	b12b      	cbz	r3, 8009096 <powf+0xde>
 800908a:	0049      	lsls	r1, r1, #1
 800908c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8009090:	d808      	bhi.n	80090a4 <powf+0xec>
 8009092:	e015      	b.n	80090c0 <powf+0x108>
 8009094:	b953      	cbnz	r3, 80090ac <powf+0xf4>
 8009096:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800909a:	0049      	lsls	r1, r1, #1
 800909c:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 80090a0:	f240 80ca 	bls.w	8009238 <powf+0x280>
 80090a4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80090a8:	b003      	add	sp, #12
 80090aa:	bd30      	pop	{r4, r5, pc}
 80090ac:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80090b0:	d105      	bne.n	80090be <powf+0x106>
 80090b2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80090b6:	0064      	lsls	r4, r4, #1
 80090b8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80090bc:	e7f0      	b.n	80090a0 <powf+0xe8>
 80090be:	0049      	lsls	r1, r1, #1
 80090c0:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 80090c4:	d1ee      	bne.n	80090a4 <powf+0xec>
 80090c6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80090ca:	f000 80b5 	beq.w	8009238 <powf+0x280>
 80090ce:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80090d2:	ea6f 0404 	mvn.w	r4, r4
 80090d6:	bf34      	ite	cc
 80090d8:	2100      	movcc	r1, #0
 80090da:	2101      	movcs	r1, #1
 80090dc:	0fe4      	lsrs	r4, r4, #31
 80090de:	42a1      	cmp	r1, r4
 80090e0:	f040 80ad 	bne.w	800923e <powf+0x286>
 80090e4:	ee27 0a07 	vmul.f32	s0, s14, s14
 80090e8:	e7de      	b.n	80090a8 <powf+0xf0>
 80090ea:	004d      	lsls	r5, r1, #1
 80090ec:	1e6b      	subs	r3, r5, #1
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d31b      	bcc.n	800912a <powf+0x172>
 80090f2:	2900      	cmp	r1, #0
 80090f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80090f8:	da0e      	bge.n	8009118 <powf+0x160>
 80090fa:	4620      	mov	r0, r4
 80090fc:	f7ff ff42 	bl	8008f84 <checkint>
 8009100:	2801      	cmp	r0, #1
 8009102:	d109      	bne.n	8009118 <powf+0x160>
 8009104:	eeb1 0a40 	vneg.f32	s0, s0
 8009108:	b945      	cbnz	r5, 800911c <powf+0x164>
 800910a:	2c00      	cmp	r4, #0
 800910c:	dacc      	bge.n	80090a8 <powf+0xf0>
 800910e:	b003      	add	sp, #12
 8009110:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009114:	f000 b8dc 	b.w	80092d0 <__math_divzerof>
 8009118:	2000      	movs	r0, #0
 800911a:	e7f5      	b.n	8009108 <powf+0x150>
 800911c:	2c00      	cmp	r4, #0
 800911e:	dac3      	bge.n	80090a8 <powf+0xf0>
 8009120:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009124:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009128:	e7be      	b.n	80090a8 <powf+0xf0>
 800912a:	2900      	cmp	r1, #0
 800912c:	da1d      	bge.n	800916a <powf+0x1b2>
 800912e:	4620      	mov	r0, r4
 8009130:	f7ff ff28 	bl	8008f84 <checkint>
 8009134:	b920      	cbnz	r0, 8009140 <powf+0x188>
 8009136:	b003      	add	sp, #12
 8009138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800913c:	f000 b8da 	b.w	80092f4 <__math_invalidf>
 8009140:	1e43      	subs	r3, r0, #1
 8009142:	4258      	negs	r0, r3
 8009144:	4158      	adcs	r0, r3
 8009146:	0400      	lsls	r0, r0, #16
 8009148:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800914c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8009150:	f4bf af48 	bcs.w	8008fe4 <powf+0x2c>
 8009154:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800926c <powf+0x2b4>
 8009158:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800915c:	ee10 3a10 	vmov	r3, s0
 8009160:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009164:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8009168:	e73c      	b.n	8008fe4 <powf+0x2c>
 800916a:	2000      	movs	r0, #0
 800916c:	e7ee      	b.n	800914c <powf+0x194>
 800916e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8009250 <powf+0x298>
 8009172:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800917a:	dd0f      	ble.n	800919c <powf+0x1e4>
 800917c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8009180:	b1c0      	cbz	r0, 80091b4 <powf+0x1fc>
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	eddd 6a01 	vldr	s13, [sp, #4]
 8009188:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800918c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009190:	eef4 6a46 	vcmp.f32	s13, s12
 8009194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009198:	f47f af6f 	bne.w	800907a <powf+0xc2>
 800919c:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 8009258 <powf+0x2a0>
 80091a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80091a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091a8:	d80c      	bhi.n	80091c4 <powf+0x20c>
 80091aa:	b003      	add	sp, #12
 80091ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091b0:	f000 b87c 	b.w	80092ac <__math_uflowf>
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	eddd 6a00 	vldr	s13, [sp]
 80091ba:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80091be:	ee76 6a86 	vadd.f32	s13, s13, s12
 80091c2:	e7e5      	b.n	8009190 <powf+0x1d8>
 80091c4:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8009260 <powf+0x2a8>
 80091c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80091cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d0:	d504      	bpl.n	80091dc <powf+0x224>
 80091d2:	b003      	add	sp, #12
 80091d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091d8:	f000 b86e 	b.w	80092b8 <__math_may_uflowf>
 80091dc:	4b24      	ldr	r3, [pc, #144]	@ (8009270 <powf+0x2b8>)
 80091de:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80091e2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 80091e6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80091ea:	ee16 2a10 	vmov	r2, s12
 80091ee:	ee36 6b45 	vsub.f64	d6, d6, d5
 80091f2:	f002 011f 	and.w	r1, r2, #31
 80091f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80091fa:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 80091fe:	ee27 4b07 	vmul.f64	d4, d7, d7
 8009202:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8009206:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800920a:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800920e:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009212:	686d      	ldr	r5, [r5, #4]
 8009214:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8009218:	1880      	adds	r0, r0, r2
 800921a:	2100      	movs	r1, #0
 800921c:	190a      	adds	r2, r1, r4
 800921e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8009222:	eea7 0b05 	vfma.f64	d0, d7, d5
 8009226:	ec43 2b17 	vmov	d7, r2, r3
 800922a:	eea6 0b04 	vfma.f64	d0, d6, d4
 800922e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009232:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009236:	e737      	b.n	80090a8 <powf+0xf0>
 8009238:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800923c:	e734      	b.n	80090a8 <powf+0xf0>
 800923e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8009274 <powf+0x2bc>
 8009242:	e731      	b.n	80090a8 <powf+0xf0>
 8009244:	f3af 8000 	nop.w
 8009248:	ffd1d571 	.word	0xffd1d571
 800924c:	405fffff 	.word	0x405fffff
 8009250:	ffa3aae2 	.word	0xffa3aae2
 8009254:	405fffff 	.word	0x405fffff
 8009258:	00000000 	.word	0x00000000
 800925c:	c062c000 	.word	0xc062c000
 8009260:	00000000 	.word	0x00000000
 8009264:	c062a000 	.word	0xc062a000
 8009268:	0800e2b8 	.word	0x0800e2b8
 800926c:	4b000000 	.word	0x4b000000
 8009270:	0800e170 	.word	0x0800e170
 8009274:	00000000 	.word	0x00000000

08009278 <with_errnof>:
 8009278:	b510      	push	{r4, lr}
 800927a:	ed2d 8b02 	vpush	{d8}
 800927e:	eeb0 8a40 	vmov.f32	s16, s0
 8009282:	4604      	mov	r4, r0
 8009284:	f7ff fe54 	bl	8008f30 <__errno>
 8009288:	eeb0 0a48 	vmov.f32	s0, s16
 800928c:	ecbd 8b02 	vpop	{d8}
 8009290:	6004      	str	r4, [r0, #0]
 8009292:	bd10      	pop	{r4, pc}

08009294 <xflowf>:
 8009294:	b130      	cbz	r0, 80092a4 <xflowf+0x10>
 8009296:	eef1 7a40 	vneg.f32	s15, s0
 800929a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800929e:	2022      	movs	r0, #34	@ 0x22
 80092a0:	f7ff bfea 	b.w	8009278 <with_errnof>
 80092a4:	eef0 7a40 	vmov.f32	s15, s0
 80092a8:	e7f7      	b.n	800929a <xflowf+0x6>
	...

080092ac <__math_uflowf>:
 80092ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80092b4 <__math_uflowf+0x8>
 80092b0:	f7ff bff0 	b.w	8009294 <xflowf>
 80092b4:	10000000 	.word	0x10000000

080092b8 <__math_may_uflowf>:
 80092b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80092c0 <__math_may_uflowf+0x8>
 80092bc:	f7ff bfea 	b.w	8009294 <xflowf>
 80092c0:	1a200000 	.word	0x1a200000

080092c4 <__math_oflowf>:
 80092c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80092cc <__math_oflowf+0x8>
 80092c8:	f7ff bfe4 	b.w	8009294 <xflowf>
 80092cc:	70000000 	.word	0x70000000

080092d0 <__math_divzerof>:
 80092d0:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80092f0 <__math_divzerof+0x20>
 80092d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80092d8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80092dc:	2800      	cmp	r0, #0
 80092de:	f04f 0022 	mov.w	r0, #34	@ 0x22
 80092e2:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80092e6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80092ea:	f7ff bfc5 	b.w	8009278 <with_errnof>
 80092ee:	bf00      	nop
 80092f0:	00000000 	.word	0x00000000

080092f4 <__math_invalidf>:
 80092f4:	eef0 7a40 	vmov.f32	s15, s0
 80092f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80092fc:	eef4 7a67 	vcmp.f32	s15, s15
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009308:	d602      	bvs.n	8009310 <__math_invalidf+0x1c>
 800930a:	2021      	movs	r0, #33	@ 0x21
 800930c:	f7ff bfb4 	b.w	8009278 <with_errnof>
 8009310:	4770      	bx	lr
	...

08009314 <_init>:
 8009314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009316:	bf00      	nop
 8009318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800931a:	bc08      	pop	{r3}
 800931c:	469e      	mov	lr, r3
 800931e:	4770      	bx	lr

08009320 <_fini>:
 8009320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009322:	bf00      	nop
 8009324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009326:	bc08      	pop	{r3}
 8009328:	469e      	mov	lr, r3
 800932a:	4770      	bx	lr
